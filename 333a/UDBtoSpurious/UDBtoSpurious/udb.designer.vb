'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.4927
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection
Namespace UDB

<System.Data.Linq.Mapping.DatabaseAttribute(Name:="udb")>  _
Partial Public Class udbDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub Insertcreature_template(instance As creature_template)
    End Sub
  Partial Private Sub Updatecreature_template(instance As creature_template)
    End Sub
  Partial Private Sub Deletecreature_template(instance As creature_template)
    End Sub
  Partial Private Sub Insertcreature(instance As creature)
    End Sub
  Partial Private Sub Updatecreature(instance As creature)
    End Sub
  Partial Private Sub Deletecreature(instance As creature)
    End Sub
  Partial Private Sub Insertcreature_equip_template(instance As creature_equip_template)
    End Sub
  Partial Private Sub Updatecreature_equip_template(instance As creature_equip_template)
    End Sub
  Partial Private Sub Deletecreature_equip_template(instance As creature_equip_template)
    End Sub
  Partial Private Sub Insertcreature_model_info(instance As creature_model_info)
    End Sub
  Partial Private Sub Updatecreature_model_info(instance As creature_model_info)
    End Sub
  Partial Private Sub Deletecreature_model_info(instance As creature_model_info)
    End Sub
  Partial Private Sub Insertcreature_template_addon(instance As creature_template_addon)
    End Sub
  Partial Private Sub Updatecreature_template_addon(instance As creature_template_addon)
    End Sub
  Partial Private Sub Deletecreature_template_addon(instance As creature_template_addon)
    End Sub
  Partial Private Sub Insertgameobject(instance As gameobject)
    End Sub
  Partial Private Sub Updategameobject(instance As gameobject)
    End Sub
  Partial Private Sub Deletegameobject(instance As gameobject)
    End Sub
  Partial Private Sub Insertgameobject_template(instance As gameobject_template)
    End Sub
  Partial Private Sub Updategameobject_template(instance As gameobject_template)
    End Sub
  Partial Private Sub Deletegameobject_template(instance As gameobject_template)
    End Sub
  Partial Private Sub Insertitem_template(instance As item_template)
    End Sub
  Partial Private Sub Updateitem_template(instance As item_template)
    End Sub
  Partial Private Sub Deleteitem_template(instance As item_template)
    End Sub
  Partial Private Sub Insertquest_template(instance As quest_template)
    End Sub
  Partial Private Sub Updatequest_template(instance As quest_template)
    End Sub
  Partial Private Sub Deletequest_template(instance As quest_template)
    End Sub
  Partial Private Sub Insertbattlemaster_entry(instance As battlemaster_entry)
    End Sub
  Partial Private Sub Updatebattlemaster_entry(instance As battlemaster_entry)
    End Sub
  Partial Private Sub Deletebattlemaster_entry(instance As battlemaster_entry)
    End Sub
  Partial Private Sub Insertbattleground_template(instance As battleground_template)
    End Sub
  Partial Private Sub Updatebattleground_template(instance As battleground_template)
    End Sub
  Partial Private Sub Deletebattleground_template(instance As battleground_template)
    End Sub
  Partial Private Sub Insertareatrigger_involvedrelation(instance As areatrigger_involvedrelation)
    End Sub
  Partial Private Sub Updateareatrigger_involvedrelation(instance As areatrigger_involvedrelation)
    End Sub
  Partial Private Sub Deleteareatrigger_involvedrelation(instance As areatrigger_involvedrelation)
    End Sub
  Partial Private Sub Insertareatrigger_tavern(instance As areatrigger_tavern)
    End Sub
  Partial Private Sub Updateareatrigger_tavern(instance As areatrigger_tavern)
    End Sub
  Partial Private Sub Deleteareatrigger_tavern(instance As areatrigger_tavern)
    End Sub
  Partial Private Sub Insertareatrigger_teleport(instance As areatrigger_teleport)
    End Sub
  Partial Private Sub Updateareatrigger_teleport(instance As areatrigger_teleport)
    End Sub
  Partial Private Sub Deleteareatrigger_teleport(instance As areatrigger_teleport)
    End Sub
  Partial Private Sub Insertspell_target_position(instance As spell_target_position)
    End Sub
  Partial Private Sub Updatespell_target_position(instance As spell_target_position)
    End Sub
  Partial Private Sub Deletespell_target_position(instance As spell_target_position)
    End Sub
  Partial Private Sub Insertnpc_gossip(instance As npc_gossip)
    End Sub
  Partial Private Sub Updatenpc_gossip(instance As npc_gossip)
    End Sub
  Partial Private Sub Deletenpc_gossip(instance As npc_gossip)
    End Sub
  Partial Private Sub Insertnpc_trainer(instance As npc_trainer)
    End Sub
  Partial Private Sub Updatenpc_trainer(instance As npc_trainer)
    End Sub
  Partial Private Sub Deletenpc_trainer(instance As npc_trainer)
    End Sub
  Partial Private Sub Insertnpc_vendor(instance As npc_vendor)
    End Sub
  Partial Private Sub Updatenpc_vendor(instance As npc_vendor)
    End Sub
  Partial Private Sub Deletenpc_vendor(instance As npc_vendor)
    End Sub
  Partial Private Sub Insertnpc_text(instance As npc_text)
    End Sub
  Partial Private Sub Updatenpc_text(instance As npc_text)
    End Sub
  Partial Private Sub Deletenpc_text(instance As npc_text)
    End Sub
  Partial Private Sub Insertcreature_questrelation(instance As creature_questrelation)
    End Sub
  Partial Private Sub Updatecreature_questrelation(instance As creature_questrelation)
    End Sub
  Partial Private Sub Deletecreature_questrelation(instance As creature_questrelation)
    End Sub
  Partial Private Sub Insertcreature_involvedrelation(instance As creature_involvedrelation)
    End Sub
  Partial Private Sub Updatecreature_involvedrelation(instance As creature_involvedrelation)
    End Sub
  Partial Private Sub Deletecreature_involvedrelation(instance As creature_involvedrelation)
    End Sub
  Partial Private Sub Insertgameobject_questrelation(instance As gameobject_questrelation)
    End Sub
  Partial Private Sub Updategameobject_questrelation(instance As gameobject_questrelation)
    End Sub
  Partial Private Sub Deletegameobject_questrelation(instance As gameobject_questrelation)
    End Sub
  Partial Private Sub Insertgameobject_involvedrelation(instance As gameobject_involvedrelation)
    End Sub
  Partial Private Sub Updategameobject_involvedrelation(instance As gameobject_involvedrelation)
    End Sub
  Partial Private Sub Deletegameobject_involvedrelation(instance As gameobject_involvedrelation)
    End Sub
  Partial Private Sub Insertgame_weather(instance As game_weather)
    End Sub
  Partial Private Sub Updategame_weather(instance As game_weather)
    End Sub
  Partial Private Sub Deletegame_weather(instance As game_weather)
    End Sub
  Partial Private Sub Insertpage_text(instance As page_text)
    End Sub
  Partial Private Sub Updatepage_text(instance As page_text)
    End Sub
  Partial Private Sub Deletepage_text(instance As page_text)
    End Sub
  Partial Private Sub Insertplayer_classlevelstat(instance As player_classlevelstat)
    End Sub
  Partial Private Sub Updateplayer_classlevelstat(instance As player_classlevelstat)
    End Sub
  Partial Private Sub Deleteplayer_classlevelstat(instance As player_classlevelstat)
    End Sub
  Partial Private Sub Insertplayer_levelstat(instance As player_levelstat)
    End Sub
  Partial Private Sub Updateplayer_levelstat(instance As player_levelstat)
    End Sub
  Partial Private Sub Deleteplayer_levelstat(instance As player_levelstat)
    End Sub
  Partial Private Sub Insertplayercreateinfo(instance As playercreateinfo)
    End Sub
  Partial Private Sub Updateplayercreateinfo(instance As playercreateinfo)
    End Sub
  Partial Private Sub Deleteplayercreateinfo(instance As playercreateinfo)
    End Sub
  Partial Private Sub Insertplayercreateinfo_action(instance As playercreateinfo_action)
    End Sub
  Partial Private Sub Updateplayercreateinfo_action(instance As playercreateinfo_action)
    End Sub
  Partial Private Sub Deleteplayercreateinfo_action(instance As playercreateinfo_action)
    End Sub
  Partial Private Sub Insertplayercreateinfo_spell(instance As playercreateinfo_spell)
    End Sub
  Partial Private Sub Updateplayercreateinfo_spell(instance As playercreateinfo_spell)
    End Sub
  Partial Private Sub Deleteplayercreateinfo_spell(instance As playercreateinfo_spell)
    End Sub
  Partial Private Sub Insertskinning_loot_template(instance As skinning_loot_template)
    End Sub
  Partial Private Sub Updateskinning_loot_template(instance As skinning_loot_template)
    End Sub
  Partial Private Sub Deleteskinning_loot_template(instance As skinning_loot_template)
    End Sub
  Partial Private Sub Insertgameobject_loot_template(instance As gameobject_loot_template)
    End Sub
  Partial Private Sub Updategameobject_loot_template(instance As gameobject_loot_template)
    End Sub
  Partial Private Sub Deletegameobject_loot_template(instance As gameobject_loot_template)
    End Sub
  Partial Private Sub Insertcreature_loot_template(instance As creature_loot_template)
    End Sub
  Partial Private Sub Updatecreature_loot_template(instance As creature_loot_template)
    End Sub
  Partial Private Sub Deletecreature_loot_template(instance As creature_loot_template)
    End Sub
  Partial Private Sub Insertitem_loot_template(instance As item_loot_template)
    End Sub
  Partial Private Sub Updateitem_loot_template(instance As item_loot_template)
    End Sub
  Partial Private Sub Deleteitem_loot_template(instance As item_loot_template)
    End Sub
  Partial Private Sub Insertcreature_movement(instance As creature_movement)
    End Sub
  Partial Private Sub Updatecreature_movement(instance As creature_movement)
    End Sub
  Partial Private Sub Deletecreature_movement(instance As creature_movement)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.UDBtoSpurious.My.MySettings.Default.udbConnectionString1, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property creature_templates() As System.Data.Linq.Table(Of creature_template)
		Get
			Return Me.GetTable(Of creature_template)
		End Get
	End Property
	
	Public ReadOnly Property creatures() As System.Data.Linq.Table(Of creature)
		Get
			Return Me.GetTable(Of creature)
		End Get
	End Property
	
	Public ReadOnly Property creature_equip_templates() As System.Data.Linq.Table(Of creature_equip_template)
		Get
			Return Me.GetTable(Of creature_equip_template)
		End Get
	End Property
	
	Public ReadOnly Property creature_model_infos() As System.Data.Linq.Table(Of creature_model_info)
		Get
			Return Me.GetTable(Of creature_model_info)
		End Get
	End Property
	
	Public ReadOnly Property creature_template_addons() As System.Data.Linq.Table(Of creature_template_addon)
		Get
			Return Me.GetTable(Of creature_template_addon)
		End Get
	End Property
	
	Public ReadOnly Property gameobjects() As System.Data.Linq.Table(Of gameobject)
		Get
			Return Me.GetTable(Of gameobject)
		End Get
	End Property
	
	Public ReadOnly Property gameobject_templates() As System.Data.Linq.Table(Of gameobject_template)
		Get
			Return Me.GetTable(Of gameobject_template)
		End Get
	End Property
	
	Public ReadOnly Property item_templates() As System.Data.Linq.Table(Of item_template)
		Get
			Return Me.GetTable(Of item_template)
		End Get
	End Property
	
	Public ReadOnly Property quest_templates() As System.Data.Linq.Table(Of quest_template)
		Get
			Return Me.GetTable(Of quest_template)
		End Get
	End Property
	
	Public ReadOnly Property battlemaster_entries() As System.Data.Linq.Table(Of battlemaster_entry)
		Get
			Return Me.GetTable(Of battlemaster_entry)
		End Get
	End Property
	
	Public ReadOnly Property battleground_templates() As System.Data.Linq.Table(Of battleground_template)
		Get
			Return Me.GetTable(Of battleground_template)
		End Get
	End Property
	
	Public ReadOnly Property areatrigger_involvedrelations() As System.Data.Linq.Table(Of areatrigger_involvedrelation)
		Get
			Return Me.GetTable(Of areatrigger_involvedrelation)
		End Get
	End Property
	
	Public ReadOnly Property areatrigger_taverns() As System.Data.Linq.Table(Of areatrigger_tavern)
		Get
			Return Me.GetTable(Of areatrigger_tavern)
		End Get
	End Property
	
	Public ReadOnly Property areatrigger_teleports() As System.Data.Linq.Table(Of areatrigger_teleport)
		Get
			Return Me.GetTable(Of areatrigger_teleport)
		End Get
	End Property
	
	Public ReadOnly Property spell_target_positions() As System.Data.Linq.Table(Of spell_target_position)
		Get
			Return Me.GetTable(Of spell_target_position)
		End Get
	End Property
	
	Public ReadOnly Property npc_gossips() As System.Data.Linq.Table(Of npc_gossip)
		Get
			Return Me.GetTable(Of npc_gossip)
		End Get
	End Property
	
	Public ReadOnly Property npc_trainers() As System.Data.Linq.Table(Of npc_trainer)
		Get
			Return Me.GetTable(Of npc_trainer)
		End Get
	End Property
	
	Public ReadOnly Property npc_vendors() As System.Data.Linq.Table(Of npc_vendor)
		Get
			Return Me.GetTable(Of npc_vendor)
		End Get
	End Property
	
	Public ReadOnly Property npc_texts() As System.Data.Linq.Table(Of npc_text)
		Get
			Return Me.GetTable(Of npc_text)
		End Get
	End Property
	
	Public ReadOnly Property npc_spellclick_spells() As System.Data.Linq.Table(Of npc_spellclick_spell)
		Get
			Return Me.GetTable(Of npc_spellclick_spell)
		End Get
	End Property
	
	Public ReadOnly Property creature_questrelations() As System.Data.Linq.Table(Of creature_questrelation)
		Get
			Return Me.GetTable(Of creature_questrelation)
		End Get
	End Property
	
	Public ReadOnly Property creature_involvedrelations() As System.Data.Linq.Table(Of creature_involvedrelation)
		Get
			Return Me.GetTable(Of creature_involvedrelation)
		End Get
	End Property
	
	Public ReadOnly Property gameobject_questrelations() As System.Data.Linq.Table(Of gameobject_questrelation)
		Get
			Return Me.GetTable(Of gameobject_questrelation)
		End Get
	End Property
	
	Public ReadOnly Property gameobject_involvedrelations() As System.Data.Linq.Table(Of gameobject_involvedrelation)
		Get
			Return Me.GetTable(Of gameobject_involvedrelation)
		End Get
	End Property
	
	Public ReadOnly Property game_weathers() As System.Data.Linq.Table(Of game_weather)
		Get
			Return Me.GetTable(Of game_weather)
		End Get
	End Property
	
	Public ReadOnly Property page_texts() As System.Data.Linq.Table(Of page_text)
		Get
			Return Me.GetTable(Of page_text)
		End Get
	End Property
	
	Public ReadOnly Property player_classlevelstats() As System.Data.Linq.Table(Of player_classlevelstat)
		Get
			Return Me.GetTable(Of player_classlevelstat)
		End Get
	End Property
	
	Public ReadOnly Property player_levelstats() As System.Data.Linq.Table(Of player_levelstat)
		Get
			Return Me.GetTable(Of player_levelstat)
		End Get
	End Property
	
	Public ReadOnly Property playercreateinfos() As System.Data.Linq.Table(Of playercreateinfo)
		Get
			Return Me.GetTable(Of playercreateinfo)
		End Get
	End Property
	
	Public ReadOnly Property playercreateinfo_actions() As System.Data.Linq.Table(Of playercreateinfo_action)
		Get
			Return Me.GetTable(Of playercreateinfo_action)
		End Get
	End Property
	
	Public ReadOnly Property playercreateinfo_items() As System.Data.Linq.Table(Of playercreateinfo_item)
		Get
			Return Me.GetTable(Of playercreateinfo_item)
		End Get
	End Property
	
	Public ReadOnly Property playercreateinfo_spells() As System.Data.Linq.Table(Of playercreateinfo_spell)
		Get
			Return Me.GetTable(Of playercreateinfo_spell)
		End Get
	End Property
	
	Public ReadOnly Property skinning_loot_templates() As System.Data.Linq.Table(Of skinning_loot_template)
		Get
			Return Me.GetTable(Of skinning_loot_template)
		End Get
	End Property
	
	Public ReadOnly Property gameobject_loot_templates() As System.Data.Linq.Table(Of gameobject_loot_template)
		Get
			Return Me.GetTable(Of gameobject_loot_template)
		End Get
	End Property
	
	Public ReadOnly Property creature_loot_templates() As System.Data.Linq.Table(Of creature_loot_template)
		Get
			Return Me.GetTable(Of creature_loot_template)
		End Get
	End Property
	
	Public ReadOnly Property item_loot_templates() As System.Data.Linq.Table(Of item_loot_template)
		Get
			Return Me.GetTable(Of item_loot_template)
		End Get
	End Property
	
	Public ReadOnly Property creature_movements() As System.Data.Linq.Table(Of creature_movement)
		Get
			Return Me.GetTable(Of creature_movement)
		End Get
	End Property
End Class

<Table(Name:="dbo.creature_template")>  _
Partial Public Class creature_template
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _entry As Integer
	
	Private _difficulty_entry_1 As Integer
	
	Private _difficulty_entry_2 As Integer
	
	Private _difficulty_entry_3 As Integer
	
	Private _KillCredit1 As Integer
	
	Private _KillCredit2 As Integer
	
	Private _modelid_A As Integer
	
	Private _modelid_A2 As Integer
	
	Private _modelid_H As Integer
	
	Private _modelid_H2 As Integer
	
	Private _name As String
	
	Private _subname As String
	
	Private _IconName As String
	
	Private _gossip_menu_id As Integer
	
	Private _minlevel As Byte
	
	Private _maxlevel As Byte
	
	Private _minhealth As Integer
	
	Private _maxhealth As Integer
	
	Private _minmana As Integer
	
	Private _maxmana As Integer
	
	Private _armor As Integer
	
	Private _faction_A As Short
	
	Private _faction_H As Short
	
	Private _npcflag As Integer
	
	Private _speed_walk As Single
	
	Private _speed_run As Single
	
	Private _scale As Single
	
	Private _rank As Byte
	
	Private _mindmg As Single
	
	Private _maxdmg As Single
	
	Private _dmgschool As Short
	
	Private _attackpower As Integer
	
	Private _dmg_multiplier As Single
	
	Private _baseattacktime As Integer
	
	Private _rangeattacktime As Integer
	
	Private _unit_class As Byte
	
	Private _unit_flags As Integer
	
	Private _dynamicflags As Integer
	
	Private _family As Short
	
	Private _trainer_type As Short
	
	Private _trainer_spell As Integer
	
	Private _trainer_class As Byte
	
	Private _trainer_race As Byte
	
	Private _minrangedmg As Single
	
	Private _maxrangedmg As Single
	
	Private _rangedattackpower As Short
	
	Private _type As Byte
	
	Private _type_flags As Integer
	
	Private _lootid As Integer
	
	Private _pickpocketloot As Integer
	
	Private _skinloot As Integer
	
	Private _resistance1 As Short
	
	Private _resistance2 As Short
	
	Private _resistance3 As Short
	
	Private _resistance4 As Short
	
	Private _resistance5 As Short
	
	Private _resistance6 As Short
	
	Private _spell1 As Integer
	
	Private _spell2 As Integer
	
	Private _spell3 As Integer
	
	Private _spell4 As Integer
	
	Private _PetSpellDataId As Integer
	
	Private _mingold As Integer
	
	Private _maxgold As Integer
	
	Private _AIName As String
	
	Private _MovementType As Byte
	
	Private _InhabitType As Byte
	
	Private _unk16 As Single
	
	Private _unk17 As Single
	
	Private _RacialLeader As Byte
	
	Private _questItem1 As Integer
	
	Private _questItem2 As Integer
	
	Private _questItem3 As Integer
	
	Private _questItem4 As Integer
	
	Private _questItem5 As Integer
	
	Private _questItem6 As Integer
	
	Private _movementId As Integer
	
	Private _RegenHealth As Byte
	
	Private _equipment_id As Integer
	
	Private _mechanic_immune_mask As Integer
	
	Private _flags_extra As Integer
	
	Private _ScriptName As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnentryChanging(value As Integer)
    End Sub
    Partial Private Sub OnentryChanged()
    End Sub
    Partial Private Sub Ondifficulty_entry_1Changing(value As Integer)
    End Sub
    Partial Private Sub Ondifficulty_entry_1Changed()
    End Sub
    Partial Private Sub Ondifficulty_entry_2Changing(value As Integer)
    End Sub
    Partial Private Sub Ondifficulty_entry_2Changed()
    End Sub
    Partial Private Sub Ondifficulty_entry_3Changing(value As Integer)
    End Sub
    Partial Private Sub Ondifficulty_entry_3Changed()
    End Sub
    Partial Private Sub OnKillCredit1Changing(value As Integer)
    End Sub
    Partial Private Sub OnKillCredit1Changed()
    End Sub
    Partial Private Sub OnKillCredit2Changing(value As Integer)
    End Sub
    Partial Private Sub OnKillCredit2Changed()
    End Sub
    Partial Private Sub Onmodelid_AChanging(value As Integer)
    End Sub
    Partial Private Sub Onmodelid_AChanged()
    End Sub
    Partial Private Sub Onmodelid_A2Changing(value As Integer)
    End Sub
    Partial Private Sub Onmodelid_A2Changed()
    End Sub
    Partial Private Sub Onmodelid_HChanging(value As Integer)
    End Sub
    Partial Private Sub Onmodelid_HChanged()
    End Sub
    Partial Private Sub Onmodelid_H2Changing(value As Integer)
    End Sub
    Partial Private Sub Onmodelid_H2Changed()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub OnsubnameChanging(value As String)
    End Sub
    Partial Private Sub OnsubnameChanged()
    End Sub
    Partial Private Sub OnIconNameChanging(value As String)
    End Sub
    Partial Private Sub OnIconNameChanged()
    End Sub
    Partial Private Sub Ongossip_menu_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ongossip_menu_idChanged()
    End Sub
    Partial Private Sub OnminlevelChanging(value As Byte)
    End Sub
    Partial Private Sub OnminlevelChanged()
    End Sub
    Partial Private Sub OnmaxlevelChanging(value As Byte)
    End Sub
    Partial Private Sub OnmaxlevelChanged()
    End Sub
    Partial Private Sub OnminhealthChanging(value As Integer)
    End Sub
    Partial Private Sub OnminhealthChanged()
    End Sub
    Partial Private Sub OnmaxhealthChanging(value As Integer)
    End Sub
    Partial Private Sub OnmaxhealthChanged()
    End Sub
    Partial Private Sub OnminmanaChanging(value As Integer)
    End Sub
    Partial Private Sub OnminmanaChanged()
    End Sub
    Partial Private Sub OnmaxmanaChanging(value As Integer)
    End Sub
    Partial Private Sub OnmaxmanaChanged()
    End Sub
    Partial Private Sub OnarmorChanging(value As Integer)
    End Sub
    Partial Private Sub OnarmorChanged()
    End Sub
    Partial Private Sub Onfaction_AChanging(value As Short)
    End Sub
    Partial Private Sub Onfaction_AChanged()
    End Sub
    Partial Private Sub Onfaction_HChanging(value As Short)
    End Sub
    Partial Private Sub Onfaction_HChanged()
    End Sub
    Partial Private Sub OnnpcflagChanging(value As Integer)
    End Sub
    Partial Private Sub OnnpcflagChanged()
    End Sub
    Partial Private Sub Onspeed_walkChanging(value As Single)
    End Sub
    Partial Private Sub Onspeed_walkChanged()
    End Sub
    Partial Private Sub Onspeed_runChanging(value As Single)
    End Sub
    Partial Private Sub Onspeed_runChanged()
    End Sub
    Partial Private Sub OnscaleChanging(value As Single)
    End Sub
    Partial Private Sub OnscaleChanged()
    End Sub
    Partial Private Sub OnrankChanging(value As Byte)
    End Sub
    Partial Private Sub OnrankChanged()
    End Sub
    Partial Private Sub OnmindmgChanging(value As Single)
    End Sub
    Partial Private Sub OnmindmgChanged()
    End Sub
    Partial Private Sub OnmaxdmgChanging(value As Single)
    End Sub
    Partial Private Sub OnmaxdmgChanged()
    End Sub
    Partial Private Sub OndmgschoolChanging(value As Short)
    End Sub
    Partial Private Sub OndmgschoolChanged()
    End Sub
    Partial Private Sub OnattackpowerChanging(value As Integer)
    End Sub
    Partial Private Sub OnattackpowerChanged()
    End Sub
    Partial Private Sub Ondmg_multiplierChanging(value As Single)
    End Sub
    Partial Private Sub Ondmg_multiplierChanged()
    End Sub
    Partial Private Sub OnbaseattacktimeChanging(value As Integer)
    End Sub
    Partial Private Sub OnbaseattacktimeChanged()
    End Sub
    Partial Private Sub OnrangeattacktimeChanging(value As Integer)
    End Sub
    Partial Private Sub OnrangeattacktimeChanged()
    End Sub
    Partial Private Sub Onunit_classChanging(value As Byte)
    End Sub
    Partial Private Sub Onunit_classChanged()
    End Sub
    Partial Private Sub Onunit_flagsChanging(value As Integer)
    End Sub
    Partial Private Sub Onunit_flagsChanged()
    End Sub
    Partial Private Sub OndynamicflagsChanging(value As Integer)
    End Sub
    Partial Private Sub OndynamicflagsChanged()
    End Sub
    Partial Private Sub OnfamilyChanging(value As Short)
    End Sub
    Partial Private Sub OnfamilyChanged()
    End Sub
    Partial Private Sub Ontrainer_typeChanging(value As Short)
    End Sub
    Partial Private Sub Ontrainer_typeChanged()
    End Sub
    Partial Private Sub Ontrainer_spellChanging(value As Integer)
    End Sub
    Partial Private Sub Ontrainer_spellChanged()
    End Sub
    Partial Private Sub Ontrainer_classChanging(value As Byte)
    End Sub
    Partial Private Sub Ontrainer_classChanged()
    End Sub
    Partial Private Sub Ontrainer_raceChanging(value As Byte)
    End Sub
    Partial Private Sub Ontrainer_raceChanged()
    End Sub
    Partial Private Sub OnminrangedmgChanging(value As Single)
    End Sub
    Partial Private Sub OnminrangedmgChanged()
    End Sub
    Partial Private Sub OnmaxrangedmgChanging(value As Single)
    End Sub
    Partial Private Sub OnmaxrangedmgChanged()
    End Sub
    Partial Private Sub OnrangedattackpowerChanging(value As Short)
    End Sub
    Partial Private Sub OnrangedattackpowerChanged()
    End Sub
    Partial Private Sub OntypeChanging(value As Byte)
    End Sub
    Partial Private Sub OntypeChanged()
    End Sub
    Partial Private Sub Ontype_flagsChanging(value As Integer)
    End Sub
    Partial Private Sub Ontype_flagsChanged()
    End Sub
    Partial Private Sub OnlootidChanging(value As Integer)
    End Sub
    Partial Private Sub OnlootidChanged()
    End Sub
    Partial Private Sub OnpickpocketlootChanging(value As Integer)
    End Sub
    Partial Private Sub OnpickpocketlootChanged()
    End Sub
    Partial Private Sub OnskinlootChanging(value As Integer)
    End Sub
    Partial Private Sub OnskinlootChanged()
    End Sub
    Partial Private Sub Onresistance1Changing(value As Short)
    End Sub
    Partial Private Sub Onresistance1Changed()
    End Sub
    Partial Private Sub Onresistance2Changing(value As Short)
    End Sub
    Partial Private Sub Onresistance2Changed()
    End Sub
    Partial Private Sub Onresistance3Changing(value As Short)
    End Sub
    Partial Private Sub Onresistance3Changed()
    End Sub
    Partial Private Sub Onresistance4Changing(value As Short)
    End Sub
    Partial Private Sub Onresistance4Changed()
    End Sub
    Partial Private Sub Onresistance5Changing(value As Short)
    End Sub
    Partial Private Sub Onresistance5Changed()
    End Sub
    Partial Private Sub Onresistance6Changing(value As Short)
    End Sub
    Partial Private Sub Onresistance6Changed()
    End Sub
    Partial Private Sub Onspell1Changing(value As Integer)
    End Sub
    Partial Private Sub Onspell1Changed()
    End Sub
    Partial Private Sub Onspell2Changing(value As Integer)
    End Sub
    Partial Private Sub Onspell2Changed()
    End Sub
    Partial Private Sub Onspell3Changing(value As Integer)
    End Sub
    Partial Private Sub Onspell3Changed()
    End Sub
    Partial Private Sub Onspell4Changing(value As Integer)
    End Sub
    Partial Private Sub Onspell4Changed()
    End Sub
    Partial Private Sub OnPetSpellDataIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnPetSpellDataIdChanged()
    End Sub
    Partial Private Sub OnmingoldChanging(value As Integer)
    End Sub
    Partial Private Sub OnmingoldChanged()
    End Sub
    Partial Private Sub OnmaxgoldChanging(value As Integer)
    End Sub
    Partial Private Sub OnmaxgoldChanged()
    End Sub
    Partial Private Sub OnAINameChanging(value As String)
    End Sub
    Partial Private Sub OnAINameChanged()
    End Sub
    Partial Private Sub OnMovementTypeChanging(value As Byte)
    End Sub
    Partial Private Sub OnMovementTypeChanged()
    End Sub
    Partial Private Sub OnInhabitTypeChanging(value As Byte)
    End Sub
    Partial Private Sub OnInhabitTypeChanged()
    End Sub
    Partial Private Sub Onunk16Changing(value As Single)
    End Sub
    Partial Private Sub Onunk16Changed()
    End Sub
    Partial Private Sub Onunk17Changing(value As Single)
    End Sub
    Partial Private Sub Onunk17Changed()
    End Sub
    Partial Private Sub OnRacialLeaderChanging(value As Byte)
    End Sub
    Partial Private Sub OnRacialLeaderChanged()
    End Sub
    Partial Private Sub OnquestItem1Changing(value As Integer)
    End Sub
    Partial Private Sub OnquestItem1Changed()
    End Sub
    Partial Private Sub OnquestItem2Changing(value As Integer)
    End Sub
    Partial Private Sub OnquestItem2Changed()
    End Sub
    Partial Private Sub OnquestItem3Changing(value As Integer)
    End Sub
    Partial Private Sub OnquestItem3Changed()
    End Sub
    Partial Private Sub OnquestItem4Changing(value As Integer)
    End Sub
    Partial Private Sub OnquestItem4Changed()
    End Sub
    Partial Private Sub OnquestItem5Changing(value As Integer)
    End Sub
    Partial Private Sub OnquestItem5Changed()
    End Sub
    Partial Private Sub OnquestItem6Changing(value As Integer)
    End Sub
    Partial Private Sub OnquestItem6Changed()
    End Sub
    Partial Private Sub OnmovementIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnmovementIdChanged()
    End Sub
    Partial Private Sub OnRegenHealthChanging(value As Byte)
    End Sub
    Partial Private Sub OnRegenHealthChanged()
    End Sub
    Partial Private Sub Onequipment_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onequipment_idChanged()
    End Sub
    Partial Private Sub Onmechanic_immune_maskChanging(value As Integer)
    End Sub
    Partial Private Sub Onmechanic_immune_maskChanged()
    End Sub
    Partial Private Sub Onflags_extraChanging(value As Integer)
    End Sub
    Partial Private Sub Onflags_extraChanged()
    End Sub
    Partial Private Sub OnScriptNameChanging(value As String)
    End Sub
    Partial Private Sub OnScriptNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_entry", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property entry() As Integer
		Get
			Return Me._entry
		End Get
		Set
			If ((Me._entry = value)  _
						= false) Then
				Me.OnentryChanging(value)
				Me.SendPropertyChanging
				Me._entry = value
				Me.SendPropertyChanged("entry")
				Me.OnentryChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_difficulty_entry_1", DbType:="Int NOT NULL")>  _
	Public Property difficulty_entry_1() As Integer
		Get
			Return Me._difficulty_entry_1
		End Get
		Set
			If ((Me._difficulty_entry_1 = value)  _
						= false) Then
				Me.Ondifficulty_entry_1Changing(value)
				Me.SendPropertyChanging
				Me._difficulty_entry_1 = value
				Me.SendPropertyChanged("difficulty_entry_1")
				Me.Ondifficulty_entry_1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_difficulty_entry_2", DbType:="Int NOT NULL")>  _
	Public Property difficulty_entry_2() As Integer
		Get
			Return Me._difficulty_entry_2
		End Get
		Set
			If ((Me._difficulty_entry_2 = value)  _
						= false) Then
				Me.Ondifficulty_entry_2Changing(value)
				Me.SendPropertyChanging
				Me._difficulty_entry_2 = value
				Me.SendPropertyChanged("difficulty_entry_2")
				Me.Ondifficulty_entry_2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_difficulty_entry_3", DbType:="Int NOT NULL")>  _
	Public Property difficulty_entry_3() As Integer
		Get
			Return Me._difficulty_entry_3
		End Get
		Set
			If ((Me._difficulty_entry_3 = value)  _
						= false) Then
				Me.Ondifficulty_entry_3Changing(value)
				Me.SendPropertyChanging
				Me._difficulty_entry_3 = value
				Me.SendPropertyChanged("difficulty_entry_3")
				Me.Ondifficulty_entry_3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_KillCredit1", DbType:="Int NOT NULL")>  _
	Public Property KillCredit1() As Integer
		Get
			Return Me._KillCredit1
		End Get
		Set
			If ((Me._KillCredit1 = value)  _
						= false) Then
				Me.OnKillCredit1Changing(value)
				Me.SendPropertyChanging
				Me._KillCredit1 = value
				Me.SendPropertyChanged("KillCredit1")
				Me.OnKillCredit1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_KillCredit2", DbType:="Int NOT NULL")>  _
	Public Property KillCredit2() As Integer
		Get
			Return Me._KillCredit2
		End Get
		Set
			If ((Me._KillCredit2 = value)  _
						= false) Then
				Me.OnKillCredit2Changing(value)
				Me.SendPropertyChanging
				Me._KillCredit2 = value
				Me.SendPropertyChanged("KillCredit2")
				Me.OnKillCredit2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_modelid_A", DbType:="Int NOT NULL")>  _
	Public Property modelid_A() As Integer
		Get
			Return Me._modelid_A
		End Get
		Set
			If ((Me._modelid_A = value)  _
						= false) Then
				Me.Onmodelid_AChanging(value)
				Me.SendPropertyChanging
				Me._modelid_A = value
				Me.SendPropertyChanged("modelid_A")
				Me.Onmodelid_AChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_modelid_A2", DbType:="Int NOT NULL")>  _
	Public Property modelid_A2() As Integer
		Get
			Return Me._modelid_A2
		End Get
		Set
			If ((Me._modelid_A2 = value)  _
						= false) Then
				Me.Onmodelid_A2Changing(value)
				Me.SendPropertyChanging
				Me._modelid_A2 = value
				Me.SendPropertyChanged("modelid_A2")
				Me.Onmodelid_A2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_modelid_H", DbType:="Int NOT NULL")>  _
	Public Property modelid_H() As Integer
		Get
			Return Me._modelid_H
		End Get
		Set
			If ((Me._modelid_H = value)  _
						= false) Then
				Me.Onmodelid_HChanging(value)
				Me.SendPropertyChanging
				Me._modelid_H = value
				Me.SendPropertyChanged("modelid_H")
				Me.Onmodelid_HChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_modelid_H2", DbType:="Int NOT NULL")>  _
	Public Property modelid_H2() As Integer
		Get
			Return Me._modelid_H2
		End Get
		Set
			If ((Me._modelid_H2 = value)  _
						= false) Then
				Me.Onmodelid_H2Changing(value)
				Me.SendPropertyChanging
				Me._modelid_H2 = value
				Me.SendPropertyChanged("modelid_H2")
				Me.Onmodelid_H2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_name", DbType:="Char(100) NOT NULL", CanBeNull:=false)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_subname", DbType:="Char(100)")>  _
	Public Property subname() As String
		Get
			Return Me._subname
		End Get
		Set
			If (String.Equals(Me._subname, value) = false) Then
				Me.OnsubnameChanging(value)
				Me.SendPropertyChanging
				Me._subname = value
				Me.SendPropertyChanged("subname")
				Me.OnsubnameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IconName", DbType:="Char(100)")>  _
	Public Property IconName() As String
		Get
			Return Me._IconName
		End Get
		Set
			If (String.Equals(Me._IconName, value) = false) Then
				Me.OnIconNameChanging(value)
				Me.SendPropertyChanging
				Me._IconName = value
				Me.SendPropertyChanged("IconName")
				Me.OnIconNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_gossip_menu_id", DbType:="Int NOT NULL")>  _
	Public Property gossip_menu_id() As Integer
		Get
			Return Me._gossip_menu_id
		End Get
		Set
			If ((Me._gossip_menu_id = value)  _
						= false) Then
				Me.Ongossip_menu_idChanging(value)
				Me.SendPropertyChanging
				Me._gossip_menu_id = value
				Me.SendPropertyChanged("gossip_menu_id")
				Me.Ongossip_menu_idChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_minlevel", DbType:="TinyInt NOT NULL")>  _
	Public Property minlevel() As Byte
		Get
			Return Me._minlevel
		End Get
		Set
			If ((Me._minlevel = value)  _
						= false) Then
				Me.OnminlevelChanging(value)
				Me.SendPropertyChanging
				Me._minlevel = value
				Me.SendPropertyChanged("minlevel")
				Me.OnminlevelChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_maxlevel", DbType:="TinyInt NOT NULL")>  _
	Public Property maxlevel() As Byte
		Get
			Return Me._maxlevel
		End Get
		Set
			If ((Me._maxlevel = value)  _
						= false) Then
				Me.OnmaxlevelChanging(value)
				Me.SendPropertyChanging
				Me._maxlevel = value
				Me.SendPropertyChanged("maxlevel")
				Me.OnmaxlevelChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_minhealth", DbType:="Int NOT NULL")>  _
	Public Property minhealth() As Integer
		Get
			Return Me._minhealth
		End Get
		Set
			If ((Me._minhealth = value)  _
						= false) Then
				Me.OnminhealthChanging(value)
				Me.SendPropertyChanging
				Me._minhealth = value
				Me.SendPropertyChanged("minhealth")
				Me.OnminhealthChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_maxhealth", DbType:="Int NOT NULL")>  _
	Public Property maxhealth() As Integer
		Get
			Return Me._maxhealth
		End Get
		Set
			If ((Me._maxhealth = value)  _
						= false) Then
				Me.OnmaxhealthChanging(value)
				Me.SendPropertyChanging
				Me._maxhealth = value
				Me.SendPropertyChanged("maxhealth")
				Me.OnmaxhealthChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_minmana", DbType:="Int NOT NULL")>  _
	Public Property minmana() As Integer
		Get
			Return Me._minmana
		End Get
		Set
			If ((Me._minmana = value)  _
						= false) Then
				Me.OnminmanaChanging(value)
				Me.SendPropertyChanging
				Me._minmana = value
				Me.SendPropertyChanged("minmana")
				Me.OnminmanaChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_maxmana", DbType:="Int NOT NULL")>  _
	Public Property maxmana() As Integer
		Get
			Return Me._maxmana
		End Get
		Set
			If ((Me._maxmana = value)  _
						= false) Then
				Me.OnmaxmanaChanging(value)
				Me.SendPropertyChanging
				Me._maxmana = value
				Me.SendPropertyChanged("maxmana")
				Me.OnmaxmanaChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_armor", DbType:="Int NOT NULL")>  _
	Public Property armor() As Integer
		Get
			Return Me._armor
		End Get
		Set
			If ((Me._armor = value)  _
						= false) Then
				Me.OnarmorChanging(value)
				Me.SendPropertyChanging
				Me._armor = value
				Me.SendPropertyChanged("armor")
				Me.OnarmorChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_faction_A", DbType:="SmallInt NOT NULL")>  _
	Public Property faction_A() As Short
		Get
			Return Me._faction_A
		End Get
		Set
			If ((Me._faction_A = value)  _
						= false) Then
				Me.Onfaction_AChanging(value)
				Me.SendPropertyChanging
				Me._faction_A = value
				Me.SendPropertyChanged("faction_A")
				Me.Onfaction_AChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_faction_H", DbType:="SmallInt NOT NULL")>  _
	Public Property faction_H() As Short
		Get
			Return Me._faction_H
		End Get
		Set
			If ((Me._faction_H = value)  _
						= false) Then
				Me.Onfaction_HChanging(value)
				Me.SendPropertyChanging
				Me._faction_H = value
				Me.SendPropertyChanged("faction_H")
				Me.Onfaction_HChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_npcflag", DbType:="Int NOT NULL")>  _
	Public Property npcflag() As Integer
		Get
			Return Me._npcflag
		End Get
		Set
			If ((Me._npcflag = value)  _
						= false) Then
				Me.OnnpcflagChanging(value)
				Me.SendPropertyChanging
				Me._npcflag = value
				Me.SendPropertyChanged("npcflag")
				Me.OnnpcflagChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_speed_walk", DbType:="Real NOT NULL")>  _
	Public Property speed_walk() As Single
		Get
			Return Me._speed_walk
		End Get
		Set
			If ((Me._speed_walk = value)  _
						= false) Then
				Me.Onspeed_walkChanging(value)
				Me.SendPropertyChanging
				Me._speed_walk = value
				Me.SendPropertyChanged("speed_walk")
				Me.Onspeed_walkChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_speed_run", DbType:="Real NOT NULL")>  _
	Public Property speed_run() As Single
		Get
			Return Me._speed_run
		End Get
		Set
			If ((Me._speed_run = value)  _
						= false) Then
				Me.Onspeed_runChanging(value)
				Me.SendPropertyChanging
				Me._speed_run = value
				Me.SendPropertyChanged("speed_run")
				Me.Onspeed_runChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_scale", DbType:="Real NOT NULL")>  _
	Public Property scale() As Single
		Get
			Return Me._scale
		End Get
		Set
			If ((Me._scale = value)  _
						= false) Then
				Me.OnscaleChanging(value)
				Me.SendPropertyChanging
				Me._scale = value
				Me.SendPropertyChanged("scale")
				Me.OnscaleChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_rank", DbType:="TinyInt NOT NULL")>  _
	Public Property rank() As Byte
		Get
			Return Me._rank
		End Get
		Set
			If ((Me._rank = value)  _
						= false) Then
				Me.OnrankChanging(value)
				Me.SendPropertyChanging
				Me._rank = value
				Me.SendPropertyChanged("rank")
				Me.OnrankChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_mindmg", DbType:="Real NOT NULL")>  _
	Public Property mindmg() As Single
		Get
			Return Me._mindmg
		End Get
		Set
			If ((Me._mindmg = value)  _
						= false) Then
				Me.OnmindmgChanging(value)
				Me.SendPropertyChanging
				Me._mindmg = value
				Me.SendPropertyChanged("mindmg")
				Me.OnmindmgChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_maxdmg", DbType:="Real NOT NULL")>  _
	Public Property maxdmg() As Single
		Get
			Return Me._maxdmg
		End Get
		Set
			If ((Me._maxdmg = value)  _
						= false) Then
				Me.OnmaxdmgChanging(value)
				Me.SendPropertyChanging
				Me._maxdmg = value
				Me.SendPropertyChanged("maxdmg")
				Me.OnmaxdmgChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_dmgschool", DbType:="SmallInt NOT NULL")>  _
	Public Property dmgschool() As Short
		Get
			Return Me._dmgschool
		End Get
		Set
			If ((Me._dmgschool = value)  _
						= false) Then
				Me.OndmgschoolChanging(value)
				Me.SendPropertyChanging
				Me._dmgschool = value
				Me.SendPropertyChanged("dmgschool")
				Me.OndmgschoolChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_attackpower", DbType:="Int NOT NULL")>  _
	Public Property attackpower() As Integer
		Get
			Return Me._attackpower
		End Get
		Set
			If ((Me._attackpower = value)  _
						= false) Then
				Me.OnattackpowerChanging(value)
				Me.SendPropertyChanging
				Me._attackpower = value
				Me.SendPropertyChanged("attackpower")
				Me.OnattackpowerChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_dmg_multiplier", DbType:="Real NOT NULL")>  _
	Public Property dmg_multiplier() As Single
		Get
			Return Me._dmg_multiplier
		End Get
		Set
			If ((Me._dmg_multiplier = value)  _
						= false) Then
				Me.Ondmg_multiplierChanging(value)
				Me.SendPropertyChanging
				Me._dmg_multiplier = value
				Me.SendPropertyChanged("dmg_multiplier")
				Me.Ondmg_multiplierChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_baseattacktime", DbType:="Int NOT NULL")>  _
	Public Property baseattacktime() As Integer
		Get
			Return Me._baseattacktime
		End Get
		Set
			If ((Me._baseattacktime = value)  _
						= false) Then
				Me.OnbaseattacktimeChanging(value)
				Me.SendPropertyChanging
				Me._baseattacktime = value
				Me.SendPropertyChanged("baseattacktime")
				Me.OnbaseattacktimeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_rangeattacktime", DbType:="Int NOT NULL")>  _
	Public Property rangeattacktime() As Integer
		Get
			Return Me._rangeattacktime
		End Get
		Set
			If ((Me._rangeattacktime = value)  _
						= false) Then
				Me.OnrangeattacktimeChanging(value)
				Me.SendPropertyChanging
				Me._rangeattacktime = value
				Me.SendPropertyChanged("rangeattacktime")
				Me.OnrangeattacktimeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_unit_class", DbType:="TinyInt NOT NULL")>  _
	Public Property unit_class() As Byte
		Get
			Return Me._unit_class
		End Get
		Set
			If ((Me._unit_class = value)  _
						= false) Then
				Me.Onunit_classChanging(value)
				Me.SendPropertyChanging
				Me._unit_class = value
				Me.SendPropertyChanged("unit_class")
				Me.Onunit_classChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_unit_flags", DbType:="Int NOT NULL")>  _
	Public Property unit_flags() As Integer
		Get
			Return Me._unit_flags
		End Get
		Set
			If ((Me._unit_flags = value)  _
						= false) Then
				Me.Onunit_flagsChanging(value)
				Me.SendPropertyChanging
				Me._unit_flags = value
				Me.SendPropertyChanged("unit_flags")
				Me.Onunit_flagsChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_dynamicflags", DbType:="Int NOT NULL")>  _
	Public Property dynamicflags() As Integer
		Get
			Return Me._dynamicflags
		End Get
		Set
			If ((Me._dynamicflags = value)  _
						= false) Then
				Me.OndynamicflagsChanging(value)
				Me.SendPropertyChanging
				Me._dynamicflags = value
				Me.SendPropertyChanged("dynamicflags")
				Me.OndynamicflagsChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_family", DbType:="SmallInt NOT NULL")>  _
	Public Property family() As Short
		Get
			Return Me._family
		End Get
		Set
			If ((Me._family = value)  _
						= false) Then
				Me.OnfamilyChanging(value)
				Me.SendPropertyChanging
				Me._family = value
				Me.SendPropertyChanged("family")
				Me.OnfamilyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_trainer_type", DbType:="SmallInt NOT NULL")>  _
	Public Property trainer_type() As Short
		Get
			Return Me._trainer_type
		End Get
		Set
			If ((Me._trainer_type = value)  _
						= false) Then
				Me.Ontrainer_typeChanging(value)
				Me.SendPropertyChanging
				Me._trainer_type = value
				Me.SendPropertyChanged("trainer_type")
				Me.Ontrainer_typeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_trainer_spell", DbType:="Int NOT NULL")>  _
	Public Property trainer_spell() As Integer
		Get
			Return Me._trainer_spell
		End Get
		Set
			If ((Me._trainer_spell = value)  _
						= false) Then
				Me.Ontrainer_spellChanging(value)
				Me.SendPropertyChanging
				Me._trainer_spell = value
				Me.SendPropertyChanged("trainer_spell")
				Me.Ontrainer_spellChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_trainer_class", DbType:="TinyInt NOT NULL")>  _
	Public Property trainer_class() As Byte
		Get
			Return Me._trainer_class
		End Get
		Set
			If ((Me._trainer_class = value)  _
						= false) Then
				Me.Ontrainer_classChanging(value)
				Me.SendPropertyChanging
				Me._trainer_class = value
				Me.SendPropertyChanged("trainer_class")
				Me.Ontrainer_classChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_trainer_race", DbType:="TinyInt NOT NULL")>  _
	Public Property trainer_race() As Byte
		Get
			Return Me._trainer_race
		End Get
		Set
			If ((Me._trainer_race = value)  _
						= false) Then
				Me.Ontrainer_raceChanging(value)
				Me.SendPropertyChanging
				Me._trainer_race = value
				Me.SendPropertyChanged("trainer_race")
				Me.Ontrainer_raceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_minrangedmg", DbType:="Real NOT NULL")>  _
	Public Property minrangedmg() As Single
		Get
			Return Me._minrangedmg
		End Get
		Set
			If ((Me._minrangedmg = value)  _
						= false) Then
				Me.OnminrangedmgChanging(value)
				Me.SendPropertyChanging
				Me._minrangedmg = value
				Me.SendPropertyChanged("minrangedmg")
				Me.OnminrangedmgChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_maxrangedmg", DbType:="Real NOT NULL")>  _
	Public Property maxrangedmg() As Single
		Get
			Return Me._maxrangedmg
		End Get
		Set
			If ((Me._maxrangedmg = value)  _
						= false) Then
				Me.OnmaxrangedmgChanging(value)
				Me.SendPropertyChanging
				Me._maxrangedmg = value
				Me.SendPropertyChanged("maxrangedmg")
				Me.OnmaxrangedmgChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_rangedattackpower", DbType:="SmallInt NOT NULL")>  _
	Public Property rangedattackpower() As Short
		Get
			Return Me._rangedattackpower
		End Get
		Set
			If ((Me._rangedattackpower = value)  _
						= false) Then
				Me.OnrangedattackpowerChanging(value)
				Me.SendPropertyChanging
				Me._rangedattackpower = value
				Me.SendPropertyChanged("rangedattackpower")
				Me.OnrangedattackpowerChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_type", DbType:="TinyInt NOT NULL")>  _
	Public Property type() As Byte
		Get
			Return Me._type
		End Get
		Set
			If ((Me._type = value)  _
						= false) Then
				Me.OntypeChanging(value)
				Me.SendPropertyChanging
				Me._type = value
				Me.SendPropertyChanged("type")
				Me.OntypeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_type_flags", DbType:="Int NOT NULL")>  _
	Public Property type_flags() As Integer
		Get
			Return Me._type_flags
		End Get
		Set
			If ((Me._type_flags = value)  _
						= false) Then
				Me.Ontype_flagsChanging(value)
				Me.SendPropertyChanging
				Me._type_flags = value
				Me.SendPropertyChanged("type_flags")
				Me.Ontype_flagsChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_lootid", DbType:="Int NOT NULL")>  _
	Public Property lootid() As Integer
		Get
			Return Me._lootid
		End Get
		Set
			If ((Me._lootid = value)  _
						= false) Then
				Me.OnlootidChanging(value)
				Me.SendPropertyChanging
				Me._lootid = value
				Me.SendPropertyChanged("lootid")
				Me.OnlootidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_pickpocketloot", DbType:="Int NOT NULL")>  _
	Public Property pickpocketloot() As Integer
		Get
			Return Me._pickpocketloot
		End Get
		Set
			If ((Me._pickpocketloot = value)  _
						= false) Then
				Me.OnpickpocketlootChanging(value)
				Me.SendPropertyChanging
				Me._pickpocketloot = value
				Me.SendPropertyChanged("pickpocketloot")
				Me.OnpickpocketlootChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_skinloot", DbType:="Int NOT NULL")>  _
	Public Property skinloot() As Integer
		Get
			Return Me._skinloot
		End Get
		Set
			If ((Me._skinloot = value)  _
						= false) Then
				Me.OnskinlootChanging(value)
				Me.SendPropertyChanging
				Me._skinloot = value
				Me.SendPropertyChanged("skinloot")
				Me.OnskinlootChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_resistance1", DbType:="SmallInt NOT NULL")>  _
	Public Property resistance1() As Short
		Get
			Return Me._resistance1
		End Get
		Set
			If ((Me._resistance1 = value)  _
						= false) Then
				Me.Onresistance1Changing(value)
				Me.SendPropertyChanging
				Me._resistance1 = value
				Me.SendPropertyChanged("resistance1")
				Me.Onresistance1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_resistance2", DbType:="SmallInt NOT NULL")>  _
	Public Property resistance2() As Short
		Get
			Return Me._resistance2
		End Get
		Set
			If ((Me._resistance2 = value)  _
						= false) Then
				Me.Onresistance2Changing(value)
				Me.SendPropertyChanging
				Me._resistance2 = value
				Me.SendPropertyChanged("resistance2")
				Me.Onresistance2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_resistance3", DbType:="SmallInt NOT NULL")>  _
	Public Property resistance3() As Short
		Get
			Return Me._resistance3
		End Get
		Set
			If ((Me._resistance3 = value)  _
						= false) Then
				Me.Onresistance3Changing(value)
				Me.SendPropertyChanging
				Me._resistance3 = value
				Me.SendPropertyChanged("resistance3")
				Me.Onresistance3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_resistance4", DbType:="SmallInt NOT NULL")>  _
	Public Property resistance4() As Short
		Get
			Return Me._resistance4
		End Get
		Set
			If ((Me._resistance4 = value)  _
						= false) Then
				Me.Onresistance4Changing(value)
				Me.SendPropertyChanging
				Me._resistance4 = value
				Me.SendPropertyChanged("resistance4")
				Me.Onresistance4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_resistance5", DbType:="SmallInt NOT NULL")>  _
	Public Property resistance5() As Short
		Get
			Return Me._resistance5
		End Get
		Set
			If ((Me._resistance5 = value)  _
						= false) Then
				Me.Onresistance5Changing(value)
				Me.SendPropertyChanging
				Me._resistance5 = value
				Me.SendPropertyChanged("resistance5")
				Me.Onresistance5Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_resistance6", DbType:="SmallInt NOT NULL")>  _
	Public Property resistance6() As Short
		Get
			Return Me._resistance6
		End Get
		Set
			If ((Me._resistance6 = value)  _
						= false) Then
				Me.Onresistance6Changing(value)
				Me.SendPropertyChanging
				Me._resistance6 = value
				Me.SendPropertyChanged("resistance6")
				Me.Onresistance6Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spell1", DbType:="Int NOT NULL")>  _
	Public Property spell1() As Integer
		Get
			Return Me._spell1
		End Get
		Set
			If ((Me._spell1 = value)  _
						= false) Then
				Me.Onspell1Changing(value)
				Me.SendPropertyChanging
				Me._spell1 = value
				Me.SendPropertyChanged("spell1")
				Me.Onspell1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spell2", DbType:="Int NOT NULL")>  _
	Public Property spell2() As Integer
		Get
			Return Me._spell2
		End Get
		Set
			If ((Me._spell2 = value)  _
						= false) Then
				Me.Onspell2Changing(value)
				Me.SendPropertyChanging
				Me._spell2 = value
				Me.SendPropertyChanged("spell2")
				Me.Onspell2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spell3", DbType:="Int NOT NULL")>  _
	Public Property spell3() As Integer
		Get
			Return Me._spell3
		End Get
		Set
			If ((Me._spell3 = value)  _
						= false) Then
				Me.Onspell3Changing(value)
				Me.SendPropertyChanging
				Me._spell3 = value
				Me.SendPropertyChanged("spell3")
				Me.Onspell3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spell4", DbType:="Int NOT NULL")>  _
	Public Property spell4() As Integer
		Get
			Return Me._spell4
		End Get
		Set
			If ((Me._spell4 = value)  _
						= false) Then
				Me.Onspell4Changing(value)
				Me.SendPropertyChanging
				Me._spell4 = value
				Me.SendPropertyChanged("spell4")
				Me.Onspell4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_PetSpellDataId", DbType:="Int NOT NULL")>  _
	Public Property PetSpellDataId() As Integer
		Get
			Return Me._PetSpellDataId
		End Get
		Set
			If ((Me._PetSpellDataId = value)  _
						= false) Then
				Me.OnPetSpellDataIdChanging(value)
				Me.SendPropertyChanging
				Me._PetSpellDataId = value
				Me.SendPropertyChanged("PetSpellDataId")
				Me.OnPetSpellDataIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_mingold", DbType:="Int NOT NULL")>  _
	Public Property mingold() As Integer
		Get
			Return Me._mingold
		End Get
		Set
			If ((Me._mingold = value)  _
						= false) Then
				Me.OnmingoldChanging(value)
				Me.SendPropertyChanging
				Me._mingold = value
				Me.SendPropertyChanged("mingold")
				Me.OnmingoldChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_maxgold", DbType:="Int NOT NULL")>  _
	Public Property maxgold() As Integer
		Get
			Return Me._maxgold
		End Get
		Set
			If ((Me._maxgold = value)  _
						= false) Then
				Me.OnmaxgoldChanging(value)
				Me.SendPropertyChanging
				Me._maxgold = value
				Me.SendPropertyChanged("maxgold")
				Me.OnmaxgoldChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_AIName", DbType:="Char(64) NOT NULL", CanBeNull:=false)>  _
	Public Property AIName() As String
		Get
			Return Me._AIName
		End Get
		Set
			If (String.Equals(Me._AIName, value) = false) Then
				Me.OnAINameChanging(value)
				Me.SendPropertyChanging
				Me._AIName = value
				Me.SendPropertyChanged("AIName")
				Me.OnAINameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_MovementType", DbType:="TinyInt NOT NULL")>  _
	Public Property MovementType() As Byte
		Get
			Return Me._MovementType
		End Get
		Set
			If ((Me._MovementType = value)  _
						= false) Then
				Me.OnMovementTypeChanging(value)
				Me.SendPropertyChanging
				Me._MovementType = value
				Me.SendPropertyChanged("MovementType")
				Me.OnMovementTypeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_InhabitType", DbType:="TinyInt NOT NULL")>  _
	Public Property InhabitType() As Byte
		Get
			Return Me._InhabitType
		End Get
		Set
			If ((Me._InhabitType = value)  _
						= false) Then
				Me.OnInhabitTypeChanging(value)
				Me.SendPropertyChanging
				Me._InhabitType = value
				Me.SendPropertyChanged("InhabitType")
				Me.OnInhabitTypeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_unk16", DbType:="Real NOT NULL")>  _
	Public Property unk16() As Single
		Get
			Return Me._unk16
		End Get
		Set
			If ((Me._unk16 = value)  _
						= false) Then
				Me.Onunk16Changing(value)
				Me.SendPropertyChanging
				Me._unk16 = value
				Me.SendPropertyChanged("unk16")
				Me.Onunk16Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_unk17", DbType:="Real NOT NULL")>  _
	Public Property unk17() As Single
		Get
			Return Me._unk17
		End Get
		Set
			If ((Me._unk17 = value)  _
						= false) Then
				Me.Onunk17Changing(value)
				Me.SendPropertyChanging
				Me._unk17 = value
				Me.SendPropertyChanged("unk17")
				Me.Onunk17Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_RacialLeader", DbType:="TinyInt NOT NULL")>  _
	Public Property RacialLeader() As Byte
		Get
			Return Me._RacialLeader
		End Get
		Set
			If ((Me._RacialLeader = value)  _
						= false) Then
				Me.OnRacialLeaderChanging(value)
				Me.SendPropertyChanging
				Me._RacialLeader = value
				Me.SendPropertyChanged("RacialLeader")
				Me.OnRacialLeaderChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_questItem1", DbType:="Int NOT NULL")>  _
	Public Property questItem1() As Integer
		Get
			Return Me._questItem1
		End Get
		Set
			If ((Me._questItem1 = value)  _
						= false) Then
				Me.OnquestItem1Changing(value)
				Me.SendPropertyChanging
				Me._questItem1 = value
				Me.SendPropertyChanged("questItem1")
				Me.OnquestItem1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_questItem2", DbType:="Int NOT NULL")>  _
	Public Property questItem2() As Integer
		Get
			Return Me._questItem2
		End Get
		Set
			If ((Me._questItem2 = value)  _
						= false) Then
				Me.OnquestItem2Changing(value)
				Me.SendPropertyChanging
				Me._questItem2 = value
				Me.SendPropertyChanged("questItem2")
				Me.OnquestItem2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_questItem3", DbType:="Int NOT NULL")>  _
	Public Property questItem3() As Integer
		Get
			Return Me._questItem3
		End Get
		Set
			If ((Me._questItem3 = value)  _
						= false) Then
				Me.OnquestItem3Changing(value)
				Me.SendPropertyChanging
				Me._questItem3 = value
				Me.SendPropertyChanged("questItem3")
				Me.OnquestItem3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_questItem4", DbType:="Int NOT NULL")>  _
	Public Property questItem4() As Integer
		Get
			Return Me._questItem4
		End Get
		Set
			If ((Me._questItem4 = value)  _
						= false) Then
				Me.OnquestItem4Changing(value)
				Me.SendPropertyChanging
				Me._questItem4 = value
				Me.SendPropertyChanged("questItem4")
				Me.OnquestItem4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_questItem5", DbType:="Int NOT NULL")>  _
	Public Property questItem5() As Integer
		Get
			Return Me._questItem5
		End Get
		Set
			If ((Me._questItem5 = value)  _
						= false) Then
				Me.OnquestItem5Changing(value)
				Me.SendPropertyChanging
				Me._questItem5 = value
				Me.SendPropertyChanged("questItem5")
				Me.OnquestItem5Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_questItem6", DbType:="Int NOT NULL")>  _
	Public Property questItem6() As Integer
		Get
			Return Me._questItem6
		End Get
		Set
			If ((Me._questItem6 = value)  _
						= false) Then
				Me.OnquestItem6Changing(value)
				Me.SendPropertyChanging
				Me._questItem6 = value
				Me.SendPropertyChanged("questItem6")
				Me.OnquestItem6Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_movementId", DbType:="Int NOT NULL")>  _
	Public Property movementId() As Integer
		Get
			Return Me._movementId
		End Get
		Set
			If ((Me._movementId = value)  _
						= false) Then
				Me.OnmovementIdChanging(value)
				Me.SendPropertyChanging
				Me._movementId = value
				Me.SendPropertyChanged("movementId")
				Me.OnmovementIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RegenHealth", DbType:="TinyInt NOT NULL")>  _
	Public Property RegenHealth() As Byte
		Get
			Return Me._RegenHealth
		End Get
		Set
			If ((Me._RegenHealth = value)  _
						= false) Then
				Me.OnRegenHealthChanging(value)
				Me.SendPropertyChanging
				Me._RegenHealth = value
				Me.SendPropertyChanged("RegenHealth")
				Me.OnRegenHealthChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_equipment_id", DbType:="Int NOT NULL")>  _
	Public Property equipment_id() As Integer
		Get
			Return Me._equipment_id
		End Get
		Set
			If ((Me._equipment_id = value)  _
						= false) Then
				Me.Onequipment_idChanging(value)
				Me.SendPropertyChanging
				Me._equipment_id = value
				Me.SendPropertyChanged("equipment_id")
				Me.Onequipment_idChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_mechanic_immune_mask", DbType:="Int NOT NULL")>  _
	Public Property mechanic_immune_mask() As Integer
		Get
			Return Me._mechanic_immune_mask
		End Get
		Set
			If ((Me._mechanic_immune_mask = value)  _
						= false) Then
				Me.Onmechanic_immune_maskChanging(value)
				Me.SendPropertyChanging
				Me._mechanic_immune_mask = value
				Me.SendPropertyChanged("mechanic_immune_mask")
				Me.Onmechanic_immune_maskChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_flags_extra", DbType:="Int NOT NULL")>  _
	Public Property flags_extra() As Integer
		Get
			Return Me._flags_extra
		End Get
		Set
			If ((Me._flags_extra = value)  _
						= false) Then
				Me.Onflags_extraChanging(value)
				Me.SendPropertyChanging
				Me._flags_extra = value
				Me.SendPropertyChanged("flags_extra")
				Me.Onflags_extraChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ScriptName", DbType:="Char(64) NOT NULL", CanBeNull:=false)>  _
	Public Property ScriptName() As String
		Get
			Return Me._ScriptName
		End Get
		Set
			If (String.Equals(Me._ScriptName, value) = false) Then
				Me.OnScriptNameChanging(value)
				Me.SendPropertyChanging
				Me._ScriptName = value
				Me.SendPropertyChanged("ScriptName")
				Me.OnScriptNameChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.creature")>  _
Partial Public Class creature
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _guid As Integer
	
	Private _id As Integer
	
	Private _map As Short
	
	Private _spawnMask As Byte
	
	Private _phaseMask As Short
	
	Private _modelid As Integer
	
	Private _equipment_id As Integer
	
	Private _position_x As Single
	
	Private _position_y As Single
	
	Private _position_z As Single
	
	Private _orientation As Single
	
	Private _spawntimesecs As Integer
	
	Private _spawndist As Single
	
	Private _currentwaypoint As Integer
	
	Private _curhealth As Integer
	
	Private _curmana As Integer
	
	Private _DeathState As Byte
	
	Private _MovementType As Byte
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnguidChanging(value As Integer)
    End Sub
    Partial Private Sub OnguidChanged()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnmapChanging(value As Short)
    End Sub
    Partial Private Sub OnmapChanged()
    End Sub
    Partial Private Sub OnspawnMaskChanging(value As Byte)
    End Sub
    Partial Private Sub OnspawnMaskChanged()
    End Sub
    Partial Private Sub OnphaseMaskChanging(value As Short)
    End Sub
    Partial Private Sub OnphaseMaskChanged()
    End Sub
    Partial Private Sub OnmodelidChanging(value As Integer)
    End Sub
    Partial Private Sub OnmodelidChanged()
    End Sub
    Partial Private Sub Onequipment_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onequipment_idChanged()
    End Sub
    Partial Private Sub Onposition_xChanging(value As Single)
    End Sub
    Partial Private Sub Onposition_xChanged()
    End Sub
    Partial Private Sub Onposition_yChanging(value As Single)
    End Sub
    Partial Private Sub Onposition_yChanged()
    End Sub
    Partial Private Sub Onposition_zChanging(value As Single)
    End Sub
    Partial Private Sub Onposition_zChanged()
    End Sub
    Partial Private Sub OnorientationChanging(value As Single)
    End Sub
    Partial Private Sub OnorientationChanged()
    End Sub
    Partial Private Sub OnspawntimesecsChanging(value As Integer)
    End Sub
    Partial Private Sub OnspawntimesecsChanged()
    End Sub
    Partial Private Sub OnspawndistChanging(value As Single)
    End Sub
    Partial Private Sub OnspawndistChanged()
    End Sub
    Partial Private Sub OncurrentwaypointChanging(value As Integer)
    End Sub
    Partial Private Sub OncurrentwaypointChanged()
    End Sub
    Partial Private Sub OncurhealthChanging(value As Integer)
    End Sub
    Partial Private Sub OncurhealthChanged()
    End Sub
    Partial Private Sub OncurmanaChanging(value As Integer)
    End Sub
    Partial Private Sub OncurmanaChanged()
    End Sub
    Partial Private Sub OnDeathStateChanging(value As Byte)
    End Sub
    Partial Private Sub OnDeathStateChanged()
    End Sub
    Partial Private Sub OnMovementTypeChanging(value As Byte)
    End Sub
    Partial Private Sub OnMovementTypeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_guid", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property guid() As Integer
		Get
			Return Me._guid
		End Get
		Set
			If ((Me._guid = value)  _
						= false) Then
				Me.OnguidChanging(value)
				Me.SendPropertyChanging
				Me._guid = value
				Me.SendPropertyChanged("guid")
				Me.OnguidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_id", DbType:="Int NOT NULL")>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_map", DbType:="SmallInt NOT NULL")>  _
	Public Property map() As Short
		Get
			Return Me._map
		End Get
		Set
			If ((Me._map = value)  _
						= false) Then
				Me.OnmapChanging(value)
				Me.SendPropertyChanging
				Me._map = value
				Me.SendPropertyChanged("map")
				Me.OnmapChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_spawnMask", DbType:="TinyInt NOT NULL")>  _
	Public Property spawnMask() As Byte
		Get
			Return Me._spawnMask
		End Get
		Set
			If ((Me._spawnMask = value)  _
						= false) Then
				Me.OnspawnMaskChanging(value)
				Me.SendPropertyChanging
				Me._spawnMask = value
				Me.SendPropertyChanged("spawnMask")
				Me.OnspawnMaskChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_phaseMask", DbType:="SmallInt NOT NULL")>  _
	Public Property phaseMask() As Short
		Get
			Return Me._phaseMask
		End Get
		Set
			If ((Me._phaseMask = value)  _
						= false) Then
				Me.OnphaseMaskChanging(value)
				Me.SendPropertyChanging
				Me._phaseMask = value
				Me.SendPropertyChanged("phaseMask")
				Me.OnphaseMaskChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_modelid", DbType:="Int NOT NULL")>  _
	Public Property modelid() As Integer
		Get
			Return Me._modelid
		End Get
		Set
			If ((Me._modelid = value)  _
						= false) Then
				Me.OnmodelidChanging(value)
				Me.SendPropertyChanging
				Me._modelid = value
				Me.SendPropertyChanged("modelid")
				Me.OnmodelidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_equipment_id", DbType:="Int NOT NULL")>  _
	Public Property equipment_id() As Integer
		Get
			Return Me._equipment_id
		End Get
		Set
			If ((Me._equipment_id = value)  _
						= false) Then
				Me.Onequipment_idChanging(value)
				Me.SendPropertyChanging
				Me._equipment_id = value
				Me.SendPropertyChanged("equipment_id")
				Me.Onequipment_idChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_position_x", DbType:="Real NOT NULL")>  _
	Public Property position_x() As Single
		Get
			Return Me._position_x
		End Get
		Set
			If ((Me._position_x = value)  _
						= false) Then
				Me.Onposition_xChanging(value)
				Me.SendPropertyChanging
				Me._position_x = value
				Me.SendPropertyChanged("position_x")
				Me.Onposition_xChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_position_y", DbType:="Real NOT NULL")>  _
	Public Property position_y() As Single
		Get
			Return Me._position_y
		End Get
		Set
			If ((Me._position_y = value)  _
						= false) Then
				Me.Onposition_yChanging(value)
				Me.SendPropertyChanging
				Me._position_y = value
				Me.SendPropertyChanged("position_y")
				Me.Onposition_yChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_position_z", DbType:="Real NOT NULL")>  _
	Public Property position_z() As Single
		Get
			Return Me._position_z
		End Get
		Set
			If ((Me._position_z = value)  _
						= false) Then
				Me.Onposition_zChanging(value)
				Me.SendPropertyChanging
				Me._position_z = value
				Me.SendPropertyChanged("position_z")
				Me.Onposition_zChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_orientation", DbType:="Real NOT NULL")>  _
	Public Property orientation() As Single
		Get
			Return Me._orientation
		End Get
		Set
			If ((Me._orientation = value)  _
						= false) Then
				Me.OnorientationChanging(value)
				Me.SendPropertyChanging
				Me._orientation = value
				Me.SendPropertyChanged("orientation")
				Me.OnorientationChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_spawntimesecs", DbType:="Int NOT NULL")>  _
	Public Property spawntimesecs() As Integer
		Get
			Return Me._spawntimesecs
		End Get
		Set
			If ((Me._spawntimesecs = value)  _
						= false) Then
				Me.OnspawntimesecsChanging(value)
				Me.SendPropertyChanging
				Me._spawntimesecs = value
				Me.SendPropertyChanged("spawntimesecs")
				Me.OnspawntimesecsChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_spawndist", DbType:="Real NOT NULL")>  _
	Public Property spawndist() As Single
		Get
			Return Me._spawndist
		End Get
		Set
			If ((Me._spawndist = value)  _
						= false) Then
				Me.OnspawndistChanging(value)
				Me.SendPropertyChanging
				Me._spawndist = value
				Me.SendPropertyChanged("spawndist")
				Me.OnspawndistChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_currentwaypoint", DbType:="Int NOT NULL")>  _
	Public Property currentwaypoint() As Integer
		Get
			Return Me._currentwaypoint
		End Get
		Set
			If ((Me._currentwaypoint = value)  _
						= false) Then
				Me.OncurrentwaypointChanging(value)
				Me.SendPropertyChanging
				Me._currentwaypoint = value
				Me.SendPropertyChanged("currentwaypoint")
				Me.OncurrentwaypointChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_curhealth", DbType:="Int NOT NULL")>  _
	Public Property curhealth() As Integer
		Get
			Return Me._curhealth
		End Get
		Set
			If ((Me._curhealth = value)  _
						= false) Then
				Me.OncurhealthChanging(value)
				Me.SendPropertyChanging
				Me._curhealth = value
				Me.SendPropertyChanged("curhealth")
				Me.OncurhealthChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_curmana", DbType:="Int NOT NULL")>  _
	Public Property curmana() As Integer
		Get
			Return Me._curmana
		End Get
		Set
			If ((Me._curmana = value)  _
						= false) Then
				Me.OncurmanaChanging(value)
				Me.SendPropertyChanging
				Me._curmana = value
				Me.SendPropertyChanged("curmana")
				Me.OncurmanaChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_DeathState", DbType:="TinyInt NOT NULL")>  _
	Public Property DeathState() As Byte
		Get
			Return Me._DeathState
		End Get
		Set
			If ((Me._DeathState = value)  _
						= false) Then
				Me.OnDeathStateChanging(value)
				Me.SendPropertyChanging
				Me._DeathState = value
				Me.SendPropertyChanged("DeathState")
				Me.OnDeathStateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_MovementType", DbType:="TinyInt NOT NULL")>  _
	Public Property MovementType() As Byte
		Get
			Return Me._MovementType
		End Get
		Set
			If ((Me._MovementType = value)  _
						= false) Then
				Me.OnMovementTypeChanging(value)
				Me.SendPropertyChanging
				Me._MovementType = value
				Me.SendPropertyChanged("MovementType")
				Me.OnMovementTypeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.creature_equip_template")>  _
Partial Public Class creature_equip_template
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _entry As Integer
	
	Private _equipentry1 As Integer
	
	Private _equipentry2 As Integer
	
	Private _equipentry3 As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnentryChanging(value As Integer)
    End Sub
    Partial Private Sub OnentryChanged()
    End Sub
    Partial Private Sub Onequipentry1Changing(value As Integer)
    End Sub
    Partial Private Sub Onequipentry1Changed()
    End Sub
    Partial Private Sub Onequipentry2Changing(value As Integer)
    End Sub
    Partial Private Sub Onequipentry2Changed()
    End Sub
    Partial Private Sub Onequipentry3Changing(value As Integer)
    End Sub
    Partial Private Sub Onequipentry3Changed()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_entry", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property entry() As Integer
		Get
			Return Me._entry
		End Get
		Set
			If ((Me._entry = value)  _
						= false) Then
				Me.OnentryChanging(value)
				Me.SendPropertyChanging
				Me._entry = value
				Me.SendPropertyChanged("entry")
				Me.OnentryChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_equipentry1", DbType:="Int NOT NULL")>  _
	Public Property equipentry1() As Integer
		Get
			Return Me._equipentry1
		End Get
		Set
			If ((Me._equipentry1 = value)  _
						= false) Then
				Me.Onequipentry1Changing(value)
				Me.SendPropertyChanging
				Me._equipentry1 = value
				Me.SendPropertyChanged("equipentry1")
				Me.Onequipentry1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_equipentry2", DbType:="Int NOT NULL")>  _
	Public Property equipentry2() As Integer
		Get
			Return Me._equipentry2
		End Get
		Set
			If ((Me._equipentry2 = value)  _
						= false) Then
				Me.Onequipentry2Changing(value)
				Me.SendPropertyChanging
				Me._equipentry2 = value
				Me.SendPropertyChanged("equipentry2")
				Me.Onequipentry2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_equipentry3", DbType:="Int NOT NULL")>  _
	Public Property equipentry3() As Integer
		Get
			Return Me._equipentry3
		End Get
		Set
			If ((Me._equipentry3 = value)  _
						= false) Then
				Me.Onequipentry3Changing(value)
				Me.SendPropertyChanging
				Me._equipentry3 = value
				Me.SendPropertyChanged("equipentry3")
				Me.Onequipentry3Changed
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.creature_model_info")>  _
Partial Public Class creature_model_info
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _modelid As Integer
	
	Private _bounding_radius As Single
	
	Private _combat_reach As Single
	
	Private _gender As Byte
	
	Private _modelid_other_gender As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnmodelidChanging(value As Integer)
    End Sub
    Partial Private Sub OnmodelidChanged()
    End Sub
    Partial Private Sub Onbounding_radiusChanging(value As Single)
    End Sub
    Partial Private Sub Onbounding_radiusChanged()
    End Sub
    Partial Private Sub Oncombat_reachChanging(value As Single)
    End Sub
    Partial Private Sub Oncombat_reachChanged()
    End Sub
    Partial Private Sub OngenderChanging(value As Byte)
    End Sub
    Partial Private Sub OngenderChanged()
    End Sub
    Partial Private Sub Onmodelid_other_genderChanging(value As Integer)
    End Sub
    Partial Private Sub Onmodelid_other_genderChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_modelid", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property modelid() As Integer
		Get
			Return Me._modelid
		End Get
		Set
			If ((Me._modelid = value)  _
						= false) Then
				Me.OnmodelidChanging(value)
				Me.SendPropertyChanging
				Me._modelid = value
				Me.SendPropertyChanged("modelid")
				Me.OnmodelidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_bounding_radius", DbType:="Real NOT NULL")>  _
	Public Property bounding_radius() As Single
		Get
			Return Me._bounding_radius
		End Get
		Set
			If ((Me._bounding_radius = value)  _
						= false) Then
				Me.Onbounding_radiusChanging(value)
				Me.SendPropertyChanging
				Me._bounding_radius = value
				Me.SendPropertyChanged("bounding_radius")
				Me.Onbounding_radiusChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_combat_reach", DbType:="Real NOT NULL")>  _
	Public Property combat_reach() As Single
		Get
			Return Me._combat_reach
		End Get
		Set
			If ((Me._combat_reach = value)  _
						= false) Then
				Me.Oncombat_reachChanging(value)
				Me.SendPropertyChanging
				Me._combat_reach = value
				Me.SendPropertyChanged("combat_reach")
				Me.Oncombat_reachChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_gender", DbType:="TinyInt NOT NULL")>  _
	Public Property gender() As Byte
		Get
			Return Me._gender
		End Get
		Set
			If ((Me._gender = value)  _
						= false) Then
				Me.OngenderChanging(value)
				Me.SendPropertyChanging
				Me._gender = value
				Me.SendPropertyChanged("gender")
				Me.OngenderChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_modelid_other_gender", DbType:="Int NOT NULL")>  _
	Public Property modelid_other_gender() As Integer
		Get
			Return Me._modelid_other_gender
		End Get
		Set
			If ((Me._modelid_other_gender = value)  _
						= false) Then
				Me.Onmodelid_other_genderChanging(value)
				Me.SendPropertyChanging
				Me._modelid_other_gender = value
				Me.SendPropertyChanged("modelid_other_gender")
				Me.Onmodelid_other_genderChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.creature_template_addon")>  _
Partial Public Class creature_template_addon
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _entry As Integer
	
	Private _mount As Integer
	
	Private _bytes1 As Integer
	
	Private _bytes2 As Integer
	
	Private _emote As Integer
	
	Private _moveflags As Integer
	
	Private _auras As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnentryChanging(value As Integer)
    End Sub
    Partial Private Sub OnentryChanged()
    End Sub
    Partial Private Sub OnmountChanging(value As Integer)
    End Sub
    Partial Private Sub OnmountChanged()
    End Sub
    Partial Private Sub Onbytes1Changing(value As Integer)
    End Sub
    Partial Private Sub Onbytes1Changed()
    End Sub
    Partial Private Sub Onbytes2Changing(value As Integer)
    End Sub
    Partial Private Sub Onbytes2Changed()
    End Sub
    Partial Private Sub OnemoteChanging(value As Integer)
    End Sub
    Partial Private Sub OnemoteChanged()
    End Sub
    Partial Private Sub OnmoveflagsChanging(value As Integer)
    End Sub
    Partial Private Sub OnmoveflagsChanged()
    End Sub
    Partial Private Sub OnaurasChanging(value As String)
    End Sub
    Partial Private Sub OnaurasChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_entry", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property entry() As Integer
		Get
			Return Me._entry
		End Get
		Set
			If ((Me._entry = value)  _
						= false) Then
				Me.OnentryChanging(value)
				Me.SendPropertyChanging
				Me._entry = value
				Me.SendPropertyChanged("entry")
				Me.OnentryChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_mount", DbType:="Int NOT NULL")>  _
	Public Property mount() As Integer
		Get
			Return Me._mount
		End Get
		Set
			If ((Me._mount = value)  _
						= false) Then
				Me.OnmountChanging(value)
				Me.SendPropertyChanging
				Me._mount = value
				Me.SendPropertyChanged("mount")
				Me.OnmountChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_bytes1", DbType:="Int NOT NULL")>  _
	Public Property bytes1() As Integer
		Get
			Return Me._bytes1
		End Get
		Set
			If ((Me._bytes1 = value)  _
						= false) Then
				Me.Onbytes1Changing(value)
				Me.SendPropertyChanging
				Me._bytes1 = value
				Me.SendPropertyChanged("bytes1")
				Me.Onbytes1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_bytes2", DbType:="Int NOT NULL")>  _
	Public Property bytes2() As Integer
		Get
			Return Me._bytes2
		End Get
		Set
			If ((Me._bytes2 = value)  _
						= false) Then
				Me.Onbytes2Changing(value)
				Me.SendPropertyChanging
				Me._bytes2 = value
				Me.SendPropertyChanged("bytes2")
				Me.Onbytes2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_emote", DbType:="Int NOT NULL")>  _
	Public Property emote() As Integer
		Get
			Return Me._emote
		End Get
		Set
			If ((Me._emote = value)  _
						= false) Then
				Me.OnemoteChanging(value)
				Me.SendPropertyChanging
				Me._emote = value
				Me.SendPropertyChanged("emote")
				Me.OnemoteChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_moveflags", DbType:="Int NOT NULL")>  _
	Public Property moveflags() As Integer
		Get
			Return Me._moveflags
		End Get
		Set
			If ((Me._moveflags = value)  _
						= false) Then
				Me.OnmoveflagsChanging(value)
				Me.SendPropertyChanging
				Me._moveflags = value
				Me.SendPropertyChanged("moveflags")
				Me.OnmoveflagsChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_auras", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property auras() As String
		Get
			Return Me._auras
		End Get
		Set
			If (String.Equals(Me._auras, value) = false) Then
				Me.OnaurasChanging(value)
				Me.SendPropertyChanging
				Me._auras = value
				Me.SendPropertyChanged("auras")
				Me.OnaurasChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.gameobject")>  _
Partial Public Class gameobject
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _guid As Integer
	
	Private _id As Integer
	
	Private _map As Short
	
	Private _spawnMask As Byte
	
	Private _phaseMask As Short
	
	Private _position_x As Single
	
	Private _position_y As Single
	
	Private _position_z As Single
	
	Private _orientation As Single
	
	Private _rotation0 As Single
	
	Private _rotation1 As Single
	
	Private _rotation2 As Single
	
	Private _rotation3 As Single
	
	Private _spawntimesecs As Integer
	
	Private _animprogress As Byte
	
	Private _state As Byte
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnguidChanging(value As Integer)
    End Sub
    Partial Private Sub OnguidChanged()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnmapChanging(value As Short)
    End Sub
    Partial Private Sub OnmapChanged()
    End Sub
    Partial Private Sub OnspawnMaskChanging(value As Byte)
    End Sub
    Partial Private Sub OnspawnMaskChanged()
    End Sub
    Partial Private Sub OnphaseMaskChanging(value As Short)
    End Sub
    Partial Private Sub OnphaseMaskChanged()
    End Sub
    Partial Private Sub Onposition_xChanging(value As Single)
    End Sub
    Partial Private Sub Onposition_xChanged()
    End Sub
    Partial Private Sub Onposition_yChanging(value As Single)
    End Sub
    Partial Private Sub Onposition_yChanged()
    End Sub
    Partial Private Sub Onposition_zChanging(value As Single)
    End Sub
    Partial Private Sub Onposition_zChanged()
    End Sub
    Partial Private Sub OnorientationChanging(value As Single)
    End Sub
    Partial Private Sub OnorientationChanged()
    End Sub
    Partial Private Sub Onrotation0Changing(value As Single)
    End Sub
    Partial Private Sub Onrotation0Changed()
    End Sub
    Partial Private Sub Onrotation1Changing(value As Single)
    End Sub
    Partial Private Sub Onrotation1Changed()
    End Sub
    Partial Private Sub Onrotation2Changing(value As Single)
    End Sub
    Partial Private Sub Onrotation2Changed()
    End Sub
    Partial Private Sub Onrotation3Changing(value As Single)
    End Sub
    Partial Private Sub Onrotation3Changed()
    End Sub
    Partial Private Sub OnspawntimesecsChanging(value As Integer)
    End Sub
    Partial Private Sub OnspawntimesecsChanged()
    End Sub
    Partial Private Sub OnanimprogressChanging(value As Byte)
    End Sub
    Partial Private Sub OnanimprogressChanged()
    End Sub
    Partial Private Sub OnstateChanging(value As Byte)
    End Sub
    Partial Private Sub OnstateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_guid", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property guid() As Integer
		Get
			Return Me._guid
		End Get
		Set
			If ((Me._guid = value)  _
						= false) Then
				Me.OnguidChanging(value)
				Me.SendPropertyChanging
				Me._guid = value
				Me.SendPropertyChanged("guid")
				Me.OnguidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_id", DbType:="Int NOT NULL")>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_map", DbType:="SmallInt NOT NULL")>  _
	Public Property map() As Short
		Get
			Return Me._map
		End Get
		Set
			If ((Me._map = value)  _
						= false) Then
				Me.OnmapChanging(value)
				Me.SendPropertyChanging
				Me._map = value
				Me.SendPropertyChanged("map")
				Me.OnmapChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_spawnMask", DbType:="TinyInt NOT NULL")>  _
	Public Property spawnMask() As Byte
		Get
			Return Me._spawnMask
		End Get
		Set
			If ((Me._spawnMask = value)  _
						= false) Then
				Me.OnspawnMaskChanging(value)
				Me.SendPropertyChanging
				Me._spawnMask = value
				Me.SendPropertyChanged("spawnMask")
				Me.OnspawnMaskChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_phaseMask", DbType:="SmallInt NOT NULL")>  _
	Public Property phaseMask() As Short
		Get
			Return Me._phaseMask
		End Get
		Set
			If ((Me._phaseMask = value)  _
						= false) Then
				Me.OnphaseMaskChanging(value)
				Me.SendPropertyChanging
				Me._phaseMask = value
				Me.SendPropertyChanged("phaseMask")
				Me.OnphaseMaskChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_position_x", DbType:="Real NOT NULL")>  _
	Public Property position_x() As Single
		Get
			Return Me._position_x
		End Get
		Set
			If ((Me._position_x = value)  _
						= false) Then
				Me.Onposition_xChanging(value)
				Me.SendPropertyChanging
				Me._position_x = value
				Me.SendPropertyChanged("position_x")
				Me.Onposition_xChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_position_y", DbType:="Real NOT NULL")>  _
	Public Property position_y() As Single
		Get
			Return Me._position_y
		End Get
		Set
			If ((Me._position_y = value)  _
						= false) Then
				Me.Onposition_yChanging(value)
				Me.SendPropertyChanging
				Me._position_y = value
				Me.SendPropertyChanged("position_y")
				Me.Onposition_yChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_position_z", DbType:="Real NOT NULL")>  _
	Public Property position_z() As Single
		Get
			Return Me._position_z
		End Get
		Set
			If ((Me._position_z = value)  _
						= false) Then
				Me.Onposition_zChanging(value)
				Me.SendPropertyChanging
				Me._position_z = value
				Me.SendPropertyChanged("position_z")
				Me.Onposition_zChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_orientation", DbType:="Real NOT NULL")>  _
	Public Property orientation() As Single
		Get
			Return Me._orientation
		End Get
		Set
			If ((Me._orientation = value)  _
						= false) Then
				Me.OnorientationChanging(value)
				Me.SendPropertyChanging
				Me._orientation = value
				Me.SendPropertyChanged("orientation")
				Me.OnorientationChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_rotation0", DbType:="Real NOT NULL")>  _
	Public Property rotation0() As Single
		Get
			Return Me._rotation0
		End Get
		Set
			If ((Me._rotation0 = value)  _
						= false) Then
				Me.Onrotation0Changing(value)
				Me.SendPropertyChanging
				Me._rotation0 = value
				Me.SendPropertyChanged("rotation0")
				Me.Onrotation0Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_rotation1", DbType:="Real NOT NULL")>  _
	Public Property rotation1() As Single
		Get
			Return Me._rotation1
		End Get
		Set
			If ((Me._rotation1 = value)  _
						= false) Then
				Me.Onrotation1Changing(value)
				Me.SendPropertyChanging
				Me._rotation1 = value
				Me.SendPropertyChanged("rotation1")
				Me.Onrotation1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_rotation2", DbType:="Real NOT NULL")>  _
	Public Property rotation2() As Single
		Get
			Return Me._rotation2
		End Get
		Set
			If ((Me._rotation2 = value)  _
						= false) Then
				Me.Onrotation2Changing(value)
				Me.SendPropertyChanging
				Me._rotation2 = value
				Me.SendPropertyChanged("rotation2")
				Me.Onrotation2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_rotation3", DbType:="Real NOT NULL")>  _
	Public Property rotation3() As Single
		Get
			Return Me._rotation3
		End Get
		Set
			If ((Me._rotation3 = value)  _
						= false) Then
				Me.Onrotation3Changing(value)
				Me.SendPropertyChanging
				Me._rotation3 = value
				Me.SendPropertyChanged("rotation3")
				Me.Onrotation3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spawntimesecs", DbType:="Int NOT NULL")>  _
	Public Property spawntimesecs() As Integer
		Get
			Return Me._spawntimesecs
		End Get
		Set
			If ((Me._spawntimesecs = value)  _
						= false) Then
				Me.OnspawntimesecsChanging(value)
				Me.SendPropertyChanging
				Me._spawntimesecs = value
				Me.SendPropertyChanged("spawntimesecs")
				Me.OnspawntimesecsChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_animprogress", DbType:="TinyInt NOT NULL")>  _
	Public Property animprogress() As Byte
		Get
			Return Me._animprogress
		End Get
		Set
			If ((Me._animprogress = value)  _
						= false) Then
				Me.OnanimprogressChanging(value)
				Me.SendPropertyChanging
				Me._animprogress = value
				Me.SendPropertyChanged("animprogress")
				Me.OnanimprogressChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_state", DbType:="TinyInt NOT NULL")>  _
	Public Property state() As Byte
		Get
			Return Me._state
		End Get
		Set
			If ((Me._state = value)  _
						= false) Then
				Me.OnstateChanging(value)
				Me.SendPropertyChanging
				Me._state = value
				Me.SendPropertyChanged("state")
				Me.OnstateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.gameobject_template")>  _
Partial Public Class gameobject_template
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _entry As Integer
	
	Private _type As Byte
	
	Private _displayId As Integer
	
	Private _name As String
	
	Private _IconName As String
	
	Private _castBarCaption As String
	
	Private _unk1 As String
	
	Private _faction As Short
	
	Private _flags As Integer
	
	Private _size As Single
	
	Private _questItem1 As Integer
	
	Private _questItem2 As Integer
	
	Private _questItem3 As Integer
	
	Private _questItem4 As Integer
	
	Private _questItem5 As Integer
	
	Private _questItem6 As Integer
	
	Private _data0 As Integer
	
	Private _data1 As Integer
	
	Private _data2 As Integer
	
	Private _data3 As Integer
	
	Private _data4 As Integer
	
	Private _data5 As Integer
	
	Private _data6 As Integer
	
	Private _data7 As Integer
	
	Private _data8 As Integer
	
	Private _data9 As Integer
	
	Private _data10 As Integer
	
	Private _data11 As Integer
	
	Private _data12 As Integer
	
	Private _data13 As Integer
	
	Private _data14 As Integer
	
	Private _data15 As Integer
	
	Private _data16 As Integer
	
	Private _data17 As Integer
	
	Private _data18 As Integer
	
	Private _data19 As Integer
	
	Private _data20 As Integer
	
	Private _data21 As Integer
	
	Private _data22 As Integer
	
	Private _data23 As Integer
	
	Private _mingold As Integer
	
	Private _maxgold As Integer
	
	Private _ScriptName As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnentryChanging(value As Integer)
    End Sub
    Partial Private Sub OnentryChanged()
    End Sub
    Partial Private Sub OntypeChanging(value As Byte)
    End Sub
    Partial Private Sub OntypeChanged()
    End Sub
    Partial Private Sub OndisplayIdChanging(value As Integer)
    End Sub
    Partial Private Sub OndisplayIdChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub OnIconNameChanging(value As String)
    End Sub
    Partial Private Sub OnIconNameChanged()
    End Sub
    Partial Private Sub OncastBarCaptionChanging(value As String)
    End Sub
    Partial Private Sub OncastBarCaptionChanged()
    End Sub
    Partial Private Sub Onunk1Changing(value As String)
    End Sub
    Partial Private Sub Onunk1Changed()
    End Sub
    Partial Private Sub OnfactionChanging(value As Short)
    End Sub
    Partial Private Sub OnfactionChanged()
    End Sub
    Partial Private Sub OnflagsChanging(value As Integer)
    End Sub
    Partial Private Sub OnflagsChanged()
    End Sub
    Partial Private Sub OnsizeChanging(value As Single)
    End Sub
    Partial Private Sub OnsizeChanged()
    End Sub
    Partial Private Sub OnquestItem1Changing(value As Integer)
    End Sub
    Partial Private Sub OnquestItem1Changed()
    End Sub
    Partial Private Sub OnquestItem2Changing(value As Integer)
    End Sub
    Partial Private Sub OnquestItem2Changed()
    End Sub
    Partial Private Sub OnquestItem3Changing(value As Integer)
    End Sub
    Partial Private Sub OnquestItem3Changed()
    End Sub
    Partial Private Sub OnquestItem4Changing(value As Integer)
    End Sub
    Partial Private Sub OnquestItem4Changed()
    End Sub
    Partial Private Sub OnquestItem5Changing(value As Integer)
    End Sub
    Partial Private Sub OnquestItem5Changed()
    End Sub
    Partial Private Sub OnquestItem6Changing(value As Integer)
    End Sub
    Partial Private Sub OnquestItem6Changed()
    End Sub
    Partial Private Sub Ondata0Changing(value As Integer)
    End Sub
    Partial Private Sub Ondata0Changed()
    End Sub
    Partial Private Sub Ondata1Changing(value As Integer)
    End Sub
    Partial Private Sub Ondata1Changed()
    End Sub
    Partial Private Sub Ondata2Changing(value As Integer)
    End Sub
    Partial Private Sub Ondata2Changed()
    End Sub
    Partial Private Sub Ondata3Changing(value As Integer)
    End Sub
    Partial Private Sub Ondata3Changed()
    End Sub
    Partial Private Sub Ondata4Changing(value As Integer)
    End Sub
    Partial Private Sub Ondata4Changed()
    End Sub
    Partial Private Sub Ondata5Changing(value As Integer)
    End Sub
    Partial Private Sub Ondata5Changed()
    End Sub
    Partial Private Sub Ondata6Changing(value As Integer)
    End Sub
    Partial Private Sub Ondata6Changed()
    End Sub
    Partial Private Sub Ondata7Changing(value As Integer)
    End Sub
    Partial Private Sub Ondata7Changed()
    End Sub
    Partial Private Sub Ondata8Changing(value As Integer)
    End Sub
    Partial Private Sub Ondata8Changed()
    End Sub
    Partial Private Sub Ondata9Changing(value As Integer)
    End Sub
    Partial Private Sub Ondata9Changed()
    End Sub
    Partial Private Sub Ondata10Changing(value As Integer)
    End Sub
    Partial Private Sub Ondata10Changed()
    End Sub
    Partial Private Sub Ondata11Changing(value As Integer)
    End Sub
    Partial Private Sub Ondata11Changed()
    End Sub
    Partial Private Sub Ondata12Changing(value As Integer)
    End Sub
    Partial Private Sub Ondata12Changed()
    End Sub
    Partial Private Sub Ondata13Changing(value As Integer)
    End Sub
    Partial Private Sub Ondata13Changed()
    End Sub
    Partial Private Sub Ondata14Changing(value As Integer)
    End Sub
    Partial Private Sub Ondata14Changed()
    End Sub
    Partial Private Sub Ondata15Changing(value As Integer)
    End Sub
    Partial Private Sub Ondata15Changed()
    End Sub
    Partial Private Sub Ondata16Changing(value As Integer)
    End Sub
    Partial Private Sub Ondata16Changed()
    End Sub
    Partial Private Sub Ondata17Changing(value As Integer)
    End Sub
    Partial Private Sub Ondata17Changed()
    End Sub
    Partial Private Sub Ondata18Changing(value As Integer)
    End Sub
    Partial Private Sub Ondata18Changed()
    End Sub
    Partial Private Sub Ondata19Changing(value As Integer)
    End Sub
    Partial Private Sub Ondata19Changed()
    End Sub
    Partial Private Sub Ondata20Changing(value As Integer)
    End Sub
    Partial Private Sub Ondata20Changed()
    End Sub
    Partial Private Sub Ondata21Changing(value As Integer)
    End Sub
    Partial Private Sub Ondata21Changed()
    End Sub
    Partial Private Sub Ondata22Changing(value As Integer)
    End Sub
    Partial Private Sub Ondata22Changed()
    End Sub
    Partial Private Sub Ondata23Changing(value As Integer)
    End Sub
    Partial Private Sub Ondata23Changed()
    End Sub
    Partial Private Sub OnmingoldChanging(value As Integer)
    End Sub
    Partial Private Sub OnmingoldChanged()
    End Sub
    Partial Private Sub OnmaxgoldChanging(value As Integer)
    End Sub
    Partial Private Sub OnmaxgoldChanged()
    End Sub
    Partial Private Sub OnScriptNameChanging(value As String)
    End Sub
    Partial Private Sub OnScriptNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_entry", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property entry() As Integer
		Get
			Return Me._entry
		End Get
		Set
			If ((Me._entry = value)  _
						= false) Then
				Me.OnentryChanging(value)
				Me.SendPropertyChanging
				Me._entry = value
				Me.SendPropertyChanged("entry")
				Me.OnentryChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_type", DbType:="TinyInt NOT NULL")>  _
	Public Property type() As Byte
		Get
			Return Me._type
		End Get
		Set
			If ((Me._type = value)  _
						= false) Then
				Me.OntypeChanging(value)
				Me.SendPropertyChanging
				Me._type = value
				Me.SendPropertyChanged("type")
				Me.OntypeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_displayId", DbType:="Int NOT NULL")>  _
	Public Property displayId() As Integer
		Get
			Return Me._displayId
		End Get
		Set
			If ((Me._displayId = value)  _
						= false) Then
				Me.OndisplayIdChanging(value)
				Me.SendPropertyChanging
				Me._displayId = value
				Me.SendPropertyChanged("displayId")
				Me.OndisplayIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_name", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IconName", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property IconName() As String
		Get
			Return Me._IconName
		End Get
		Set
			If (String.Equals(Me._IconName, value) = false) Then
				Me.OnIconNameChanging(value)
				Me.SendPropertyChanging
				Me._IconName = value
				Me.SendPropertyChanged("IconName")
				Me.OnIconNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_castBarCaption", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property castBarCaption() As String
		Get
			Return Me._castBarCaption
		End Get
		Set
			If (String.Equals(Me._castBarCaption, value) = false) Then
				Me.OncastBarCaptionChanging(value)
				Me.SendPropertyChanging
				Me._castBarCaption = value
				Me.SendPropertyChanged("castBarCaption")
				Me.OncastBarCaptionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_unk1", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property unk1() As String
		Get
			Return Me._unk1
		End Get
		Set
			If (String.Equals(Me._unk1, value) = false) Then
				Me.Onunk1Changing(value)
				Me.SendPropertyChanging
				Me._unk1 = value
				Me.SendPropertyChanged("unk1")
				Me.Onunk1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_faction", DbType:="SmallInt NOT NULL")>  _
	Public Property faction() As Short
		Get
			Return Me._faction
		End Get
		Set
			If ((Me._faction = value)  _
						= false) Then
				Me.OnfactionChanging(value)
				Me.SendPropertyChanging
				Me._faction = value
				Me.SendPropertyChanged("faction")
				Me.OnfactionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_flags", DbType:="Int NOT NULL")>  _
	Public Property flags() As Integer
		Get
			Return Me._flags
		End Get
		Set
			If ((Me._flags = value)  _
						= false) Then
				Me.OnflagsChanging(value)
				Me.SendPropertyChanging
				Me._flags = value
				Me.SendPropertyChanged("flags")
				Me.OnflagsChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_size", DbType:="Real NOT NULL")>  _
	Public Property size() As Single
		Get
			Return Me._size
		End Get
		Set
			If ((Me._size = value)  _
						= false) Then
				Me.OnsizeChanging(value)
				Me.SendPropertyChanging
				Me._size = value
				Me.SendPropertyChanged("size")
				Me.OnsizeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_questItem1", DbType:="Int NOT NULL")>  _
	Public Property questItem1() As Integer
		Get
			Return Me._questItem1
		End Get
		Set
			If ((Me._questItem1 = value)  _
						= false) Then
				Me.OnquestItem1Changing(value)
				Me.SendPropertyChanging
				Me._questItem1 = value
				Me.SendPropertyChanged("questItem1")
				Me.OnquestItem1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_questItem2", DbType:="Int NOT NULL")>  _
	Public Property questItem2() As Integer
		Get
			Return Me._questItem2
		End Get
		Set
			If ((Me._questItem2 = value)  _
						= false) Then
				Me.OnquestItem2Changing(value)
				Me.SendPropertyChanging
				Me._questItem2 = value
				Me.SendPropertyChanged("questItem2")
				Me.OnquestItem2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_questItem3", DbType:="Int NOT NULL")>  _
	Public Property questItem3() As Integer
		Get
			Return Me._questItem3
		End Get
		Set
			If ((Me._questItem3 = value)  _
						= false) Then
				Me.OnquestItem3Changing(value)
				Me.SendPropertyChanging
				Me._questItem3 = value
				Me.SendPropertyChanged("questItem3")
				Me.OnquestItem3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_questItem4", DbType:="Int NOT NULL")>  _
	Public Property questItem4() As Integer
		Get
			Return Me._questItem4
		End Get
		Set
			If ((Me._questItem4 = value)  _
						= false) Then
				Me.OnquestItem4Changing(value)
				Me.SendPropertyChanging
				Me._questItem4 = value
				Me.SendPropertyChanged("questItem4")
				Me.OnquestItem4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_questItem5", DbType:="Int NOT NULL")>  _
	Public Property questItem5() As Integer
		Get
			Return Me._questItem5
		End Get
		Set
			If ((Me._questItem5 = value)  _
						= false) Then
				Me.OnquestItem5Changing(value)
				Me.SendPropertyChanging
				Me._questItem5 = value
				Me.SendPropertyChanged("questItem5")
				Me.OnquestItem5Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_questItem6", DbType:="Int NOT NULL")>  _
	Public Property questItem6() As Integer
		Get
			Return Me._questItem6
		End Get
		Set
			If ((Me._questItem6 = value)  _
						= false) Then
				Me.OnquestItem6Changing(value)
				Me.SendPropertyChanging
				Me._questItem6 = value
				Me.SendPropertyChanged("questItem6")
				Me.OnquestItem6Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_data0", DbType:="Int NOT NULL")>  _
	Public Property data0() As Integer
		Get
			Return Me._data0
		End Get
		Set
			If ((Me._data0 = value)  _
						= false) Then
				Me.Ondata0Changing(value)
				Me.SendPropertyChanging
				Me._data0 = value
				Me.SendPropertyChanged("data0")
				Me.Ondata0Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_data1", DbType:="Int NOT NULL")>  _
	Public Property data1() As Integer
		Get
			Return Me._data1
		End Get
		Set
			If ((Me._data1 = value)  _
						= false) Then
				Me.Ondata1Changing(value)
				Me.SendPropertyChanging
				Me._data1 = value
				Me.SendPropertyChanged("data1")
				Me.Ondata1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_data2", DbType:="Int NOT NULL")>  _
	Public Property data2() As Integer
		Get
			Return Me._data2
		End Get
		Set
			If ((Me._data2 = value)  _
						= false) Then
				Me.Ondata2Changing(value)
				Me.SendPropertyChanging
				Me._data2 = value
				Me.SendPropertyChanged("data2")
				Me.Ondata2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_data3", DbType:="Int NOT NULL")>  _
	Public Property data3() As Integer
		Get
			Return Me._data3
		End Get
		Set
			If ((Me._data3 = value)  _
						= false) Then
				Me.Ondata3Changing(value)
				Me.SendPropertyChanging
				Me._data3 = value
				Me.SendPropertyChanged("data3")
				Me.Ondata3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_data4", DbType:="Int NOT NULL")>  _
	Public Property data4() As Integer
		Get
			Return Me._data4
		End Get
		Set
			If ((Me._data4 = value)  _
						= false) Then
				Me.Ondata4Changing(value)
				Me.SendPropertyChanging
				Me._data4 = value
				Me.SendPropertyChanged("data4")
				Me.Ondata4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_data5", DbType:="Int NOT NULL")>  _
	Public Property data5() As Integer
		Get
			Return Me._data5
		End Get
		Set
			If ((Me._data5 = value)  _
						= false) Then
				Me.Ondata5Changing(value)
				Me.SendPropertyChanging
				Me._data5 = value
				Me.SendPropertyChanged("data5")
				Me.Ondata5Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_data6", DbType:="Int NOT NULL")>  _
	Public Property data6() As Integer
		Get
			Return Me._data6
		End Get
		Set
			If ((Me._data6 = value)  _
						= false) Then
				Me.Ondata6Changing(value)
				Me.SendPropertyChanging
				Me._data6 = value
				Me.SendPropertyChanged("data6")
				Me.Ondata6Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_data7", DbType:="Int NOT NULL")>  _
	Public Property data7() As Integer
		Get
			Return Me._data7
		End Get
		Set
			If ((Me._data7 = value)  _
						= false) Then
				Me.Ondata7Changing(value)
				Me.SendPropertyChanging
				Me._data7 = value
				Me.SendPropertyChanged("data7")
				Me.Ondata7Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_data8", DbType:="Int NOT NULL")>  _
	Public Property data8() As Integer
		Get
			Return Me._data8
		End Get
		Set
			If ((Me._data8 = value)  _
						= false) Then
				Me.Ondata8Changing(value)
				Me.SendPropertyChanging
				Me._data8 = value
				Me.SendPropertyChanged("data8")
				Me.Ondata8Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_data9", DbType:="Int NOT NULL")>  _
	Public Property data9() As Integer
		Get
			Return Me._data9
		End Get
		Set
			If ((Me._data9 = value)  _
						= false) Then
				Me.Ondata9Changing(value)
				Me.SendPropertyChanging
				Me._data9 = value
				Me.SendPropertyChanged("data9")
				Me.Ondata9Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_data10", DbType:="Int NOT NULL")>  _
	Public Property data10() As Integer
		Get
			Return Me._data10
		End Get
		Set
			If ((Me._data10 = value)  _
						= false) Then
				Me.Ondata10Changing(value)
				Me.SendPropertyChanging
				Me._data10 = value
				Me.SendPropertyChanged("data10")
				Me.Ondata10Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_data11", DbType:="Int NOT NULL")>  _
	Public Property data11() As Integer
		Get
			Return Me._data11
		End Get
		Set
			If ((Me._data11 = value)  _
						= false) Then
				Me.Ondata11Changing(value)
				Me.SendPropertyChanging
				Me._data11 = value
				Me.SendPropertyChanged("data11")
				Me.Ondata11Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_data12", DbType:="Int NOT NULL")>  _
	Public Property data12() As Integer
		Get
			Return Me._data12
		End Get
		Set
			If ((Me._data12 = value)  _
						= false) Then
				Me.Ondata12Changing(value)
				Me.SendPropertyChanging
				Me._data12 = value
				Me.SendPropertyChanged("data12")
				Me.Ondata12Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_data13", DbType:="Int NOT NULL")>  _
	Public Property data13() As Integer
		Get
			Return Me._data13
		End Get
		Set
			If ((Me._data13 = value)  _
						= false) Then
				Me.Ondata13Changing(value)
				Me.SendPropertyChanging
				Me._data13 = value
				Me.SendPropertyChanged("data13")
				Me.Ondata13Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_data14", DbType:="Int NOT NULL")>  _
	Public Property data14() As Integer
		Get
			Return Me._data14
		End Get
		Set
			If ((Me._data14 = value)  _
						= false) Then
				Me.Ondata14Changing(value)
				Me.SendPropertyChanging
				Me._data14 = value
				Me.SendPropertyChanged("data14")
				Me.Ondata14Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_data15", DbType:="Int NOT NULL")>  _
	Public Property data15() As Integer
		Get
			Return Me._data15
		End Get
		Set
			If ((Me._data15 = value)  _
						= false) Then
				Me.Ondata15Changing(value)
				Me.SendPropertyChanging
				Me._data15 = value
				Me.SendPropertyChanged("data15")
				Me.Ondata15Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_data16", DbType:="Int NOT NULL")>  _
	Public Property data16() As Integer
		Get
			Return Me._data16
		End Get
		Set
			If ((Me._data16 = value)  _
						= false) Then
				Me.Ondata16Changing(value)
				Me.SendPropertyChanging
				Me._data16 = value
				Me.SendPropertyChanged("data16")
				Me.Ondata16Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_data17", DbType:="Int NOT NULL")>  _
	Public Property data17() As Integer
		Get
			Return Me._data17
		End Get
		Set
			If ((Me._data17 = value)  _
						= false) Then
				Me.Ondata17Changing(value)
				Me.SendPropertyChanging
				Me._data17 = value
				Me.SendPropertyChanged("data17")
				Me.Ondata17Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_data18", DbType:="Int NOT NULL")>  _
	Public Property data18() As Integer
		Get
			Return Me._data18
		End Get
		Set
			If ((Me._data18 = value)  _
						= false) Then
				Me.Ondata18Changing(value)
				Me.SendPropertyChanging
				Me._data18 = value
				Me.SendPropertyChanged("data18")
				Me.Ondata18Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_data19", DbType:="Int NOT NULL")>  _
	Public Property data19() As Integer
		Get
			Return Me._data19
		End Get
		Set
			If ((Me._data19 = value)  _
						= false) Then
				Me.Ondata19Changing(value)
				Me.SendPropertyChanging
				Me._data19 = value
				Me.SendPropertyChanged("data19")
				Me.Ondata19Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_data20", DbType:="Int NOT NULL")>  _
	Public Property data20() As Integer
		Get
			Return Me._data20
		End Get
		Set
			If ((Me._data20 = value)  _
						= false) Then
				Me.Ondata20Changing(value)
				Me.SendPropertyChanging
				Me._data20 = value
				Me.SendPropertyChanged("data20")
				Me.Ondata20Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_data21", DbType:="Int NOT NULL")>  _
	Public Property data21() As Integer
		Get
			Return Me._data21
		End Get
		Set
			If ((Me._data21 = value)  _
						= false) Then
				Me.Ondata21Changing(value)
				Me.SendPropertyChanging
				Me._data21 = value
				Me.SendPropertyChanged("data21")
				Me.Ondata21Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_data22", DbType:="Int NOT NULL")>  _
	Public Property data22() As Integer
		Get
			Return Me._data22
		End Get
		Set
			If ((Me._data22 = value)  _
						= false) Then
				Me.Ondata22Changing(value)
				Me.SendPropertyChanging
				Me._data22 = value
				Me.SendPropertyChanged("data22")
				Me.Ondata22Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_data23", DbType:="Int NOT NULL")>  _
	Public Property data23() As Integer
		Get
			Return Me._data23
		End Get
		Set
			If ((Me._data23 = value)  _
						= false) Then
				Me.Ondata23Changing(value)
				Me.SendPropertyChanging
				Me._data23 = value
				Me.SendPropertyChanged("data23")
				Me.Ondata23Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_mingold", DbType:="Int NOT NULL")>  _
	Public Property mingold() As Integer
		Get
			Return Me._mingold
		End Get
		Set
			If ((Me._mingold = value)  _
						= false) Then
				Me.OnmingoldChanging(value)
				Me.SendPropertyChanging
				Me._mingold = value
				Me.SendPropertyChanged("mingold")
				Me.OnmingoldChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_maxgold", DbType:="Int NOT NULL")>  _
	Public Property maxgold() As Integer
		Get
			Return Me._maxgold
		End Get
		Set
			If ((Me._maxgold = value)  _
						= false) Then
				Me.OnmaxgoldChanging(value)
				Me.SendPropertyChanging
				Me._maxgold = value
				Me.SendPropertyChanged("maxgold")
				Me.OnmaxgoldChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ScriptName", DbType:="VarChar(64) NOT NULL", CanBeNull:=false)>  _
	Public Property ScriptName() As String
		Get
			Return Me._ScriptName
		End Get
		Set
			If (String.Equals(Me._ScriptName, value) = false) Then
				Me.OnScriptNameChanging(value)
				Me.SendPropertyChanging
				Me._ScriptName = value
				Me.SendPropertyChanged("ScriptName")
				Me.OnScriptNameChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.item_template")>  _
Partial Public Class item_template
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _entry As Integer
	
	Private _class As Byte
	
	Private _subclass As Byte
	
	Private _unk0 As Integer
	
	Private _name As String
	
	Private _displayid As Integer
	
	Private _Quality As Byte
	
	Private _Flags As Integer
	
	Private _Faction As Integer
	
	Private _BuyCount As Byte
	
	Private _BuyPrice As Integer
	
	Private _SellPrice As Integer
	
	Private _InventoryType As Byte
	
	Private _AllowableClass As Integer
	
	Private _AllowableRace As Integer
	
	Private _ItemLevel As Short
	
	Private _RequiredLevel As Byte
	
	Private _RequiredSkill As Short
	
	Private _RequiredSkillRank As Short
	
	Private _requiredspell As Integer
	
	Private _requiredhonorrank As Integer
	
	Private _RequiredCityRank As Integer
	
	Private _RequiredReputationFaction As Short
	
	Private _RequiredReputationRank As Short
	
	Private _maxcount As Short
	
	Private _stackable As Short
	
	Private _ContainerSlots As Byte
	
	Private _StatsCount As Byte
	
	Private _stat_type1 As Byte
	
	Private _stat_value1 As Short
	
	Private _stat_type2 As Byte
	
	Private _stat_value2 As Short
	
	Private _stat_type3 As Byte
	
	Private _stat_value3 As Short
	
	Private _stat_type4 As Byte
	
	Private _stat_value4 As Short
	
	Private _stat_type5 As Byte
	
	Private _stat_value5 As Short
	
	Private _stat_type6 As Byte
	
	Private _stat_value6 As Short
	
	Private _stat_type7 As Byte
	
	Private _stat_value7 As Short
	
	Private _stat_type8 As Byte
	
	Private _stat_value8 As Short
	
	Private _stat_type9 As Byte
	
	Private _stat_value9 As Short
	
	Private _stat_type10 As Byte
	
	Private _stat_value10 As Short
	
	Private _ScalingStatDistribution As Short
	
	Private _ScalingStatValue As Integer
	
	Private _dmg_min1 As Single
	
	Private _dmg_max1 As Single
	
	Private _dmg_type1 As Byte
	
	Private _dmg_min2 As Single
	
	Private _dmg_max2 As Single
	
	Private _dmg_type2 As Byte
	
	Private _armor As Short
	
	Private _holy_res As Byte
	
	Private _fire_res As Byte
	
	Private _nature_res As Byte
	
	Private _frost_res As Byte
	
	Private _shadow_res As Byte
	
	Private _arcane_res As Byte
	
	Private _delay As Short
	
	Private _ammo_type As Byte
	
	Private _RangedModRange As Single
	
	Private _spellid_1 As Integer
	
	Private _spelltrigger_1 As Byte
	
	Private _spellcharges_1 As Short
	
	Private _spellppmRate_1 As Single
	
	Private _spellcooldown_1 As Integer
	
	Private _spellcategory_1 As Short
	
	Private _spellcategorycooldown_1 As Integer
	
	Private _spellid_2 As Integer
	
	Private _spelltrigger_2 As Byte
	
	Private _spellcharges_2 As Short
	
	Private _spellppmRate_2 As Single
	
	Private _spellcooldown_2 As Integer
	
	Private _spellcategory_2 As Short
	
	Private _spellcategorycooldown_2 As Integer
	
	Private _spellid_3 As Integer
	
	Private _spelltrigger_3 As Byte
	
	Private _spellcharges_3 As Short
	
	Private _spellppmRate_3 As Single
	
	Private _spellcooldown_3 As Integer
	
	Private _spellcategory_3 As Short
	
	Private _spellcategorycooldown_3 As Integer
	
	Private _spellid_4 As Integer
	
	Private _spelltrigger_4 As Byte
	
	Private _spellcharges_4 As Short
	
	Private _spellppmRate_4 As Single
	
	Private _spellcooldown_4 As Integer
	
	Private _spellcategory_4 As Short
	
	Private _spellcategorycooldown_4 As Integer
	
	Private _spellid_5 As Integer
	
	Private _spelltrigger_5 As Byte
	
	Private _spellcharges_5 As Short
	
	Private _spellppmRate_5 As Single
	
	Private _spellcooldown_5 As Integer
	
	Private _spellcategory_5 As Short
	
	Private _spellcategorycooldown_5 As Integer
	
	Private _bonding As Byte
	
	Private _description As String
	
	Private _PageText As Integer
	
	Private _LanguageID As Byte
	
	Private _PageMaterial As Byte
	
	Private _startquest As Integer
	
	Private _lockid As Integer
	
	Private _Material As Short
	
	Private _sheath As Byte
	
	Private _RandomProperty As Integer
	
	Private _RandomSuffix As Integer
	
	Private _block As Integer
	
	Private _itemset As Integer
	
	Private _MaxDurability As Short
	
	Private _area As Integer
	
	Private _Map As Short
	
	Private _BagFamily As Integer
	
	Private _TotemCategory As Integer
	
	Private _socketColor_1 As Short
	
	Private _socketContent_1 As Integer
	
	Private _socketColor_2 As Short
	
	Private _socketContent_2 As Integer
	
	Private _socketColor_3 As Short
	
	Private _socketContent_3 As Integer
	
	Private _socketBonus As Integer
	
	Private _GemProperties As Integer
	
	Private _RequiredDisenchantSkill As Short
	
	Private _ArmorDamageModifier As Single
	
	Private _Duration As Integer
	
	Private _ItemLimitCategory As Short
	
	Private _HolidayId As Integer
	
	Private _ScriptName As String
	
	Private _DisenchantID As Integer
	
	Private _FoodType As Byte
	
	Private _minMoneyLoot As Integer
	
	Private _maxMoneyLoot As Integer
	
	Private _ExtraFlags As Byte
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnentryChanging(value As Integer)
    End Sub
    Partial Private Sub OnentryChanged()
    End Sub
    Partial Private Sub OnclassChanging(value As Byte)
    End Sub
    Partial Private Sub OnclassChanged()
    End Sub
    Partial Private Sub OnsubclassChanging(value As Byte)
    End Sub
    Partial Private Sub OnsubclassChanged()
    End Sub
    Partial Private Sub Onunk0Changing(value As Integer)
    End Sub
    Partial Private Sub Onunk0Changed()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub OndisplayidChanging(value As Integer)
    End Sub
    Partial Private Sub OndisplayidChanged()
    End Sub
    Partial Private Sub OnQualityChanging(value As Byte)
    End Sub
    Partial Private Sub OnQualityChanged()
    End Sub
    Partial Private Sub OnFlagsChanging(value As Integer)
    End Sub
    Partial Private Sub OnFlagsChanged()
    End Sub
    Partial Private Sub OnFactionChanging(value As Integer)
    End Sub
    Partial Private Sub OnFactionChanged()
    End Sub
    Partial Private Sub OnBuyCountChanging(value As Byte)
    End Sub
    Partial Private Sub OnBuyCountChanged()
    End Sub
    Partial Private Sub OnBuyPriceChanging(value As Integer)
    End Sub
    Partial Private Sub OnBuyPriceChanged()
    End Sub
    Partial Private Sub OnSellPriceChanging(value As Integer)
    End Sub
    Partial Private Sub OnSellPriceChanged()
    End Sub
    Partial Private Sub OnInventoryTypeChanging(value As Byte)
    End Sub
    Partial Private Sub OnInventoryTypeChanged()
    End Sub
    Partial Private Sub OnAllowableClassChanging(value As Integer)
    End Sub
    Partial Private Sub OnAllowableClassChanged()
    End Sub
    Partial Private Sub OnAllowableRaceChanging(value As Integer)
    End Sub
    Partial Private Sub OnAllowableRaceChanged()
    End Sub
    Partial Private Sub OnItemLevelChanging(value As Short)
    End Sub
    Partial Private Sub OnItemLevelChanged()
    End Sub
    Partial Private Sub OnRequiredLevelChanging(value As Byte)
    End Sub
    Partial Private Sub OnRequiredLevelChanged()
    End Sub
    Partial Private Sub OnRequiredSkillChanging(value As Short)
    End Sub
    Partial Private Sub OnRequiredSkillChanged()
    End Sub
    Partial Private Sub OnRequiredSkillRankChanging(value As Short)
    End Sub
    Partial Private Sub OnRequiredSkillRankChanged()
    End Sub
    Partial Private Sub OnrequiredspellChanging(value As Integer)
    End Sub
    Partial Private Sub OnrequiredspellChanged()
    End Sub
    Partial Private Sub OnrequiredhonorrankChanging(value As Integer)
    End Sub
    Partial Private Sub OnrequiredhonorrankChanged()
    End Sub
    Partial Private Sub OnRequiredCityRankChanging(value As Integer)
    End Sub
    Partial Private Sub OnRequiredCityRankChanged()
    End Sub
    Partial Private Sub OnRequiredReputationFactionChanging(value As Short)
    End Sub
    Partial Private Sub OnRequiredReputationFactionChanged()
    End Sub
    Partial Private Sub OnRequiredReputationRankChanging(value As Short)
    End Sub
    Partial Private Sub OnRequiredReputationRankChanged()
    End Sub
    Partial Private Sub OnmaxcountChanging(value As Short)
    End Sub
    Partial Private Sub OnmaxcountChanged()
    End Sub
    Partial Private Sub OnstackableChanging(value As Short)
    End Sub
    Partial Private Sub OnstackableChanged()
    End Sub
    Partial Private Sub OnContainerSlotsChanging(value As Byte)
    End Sub
    Partial Private Sub OnContainerSlotsChanged()
    End Sub
    Partial Private Sub OnStatsCountChanging(value As Byte)
    End Sub
    Partial Private Sub OnStatsCountChanged()
    End Sub
    Partial Private Sub Onstat_type1Changing(value As Byte)
    End Sub
    Partial Private Sub Onstat_type1Changed()
    End Sub
    Partial Private Sub Onstat_value1Changing(value As Short)
    End Sub
    Partial Private Sub Onstat_value1Changed()
    End Sub
    Partial Private Sub Onstat_type2Changing(value As Byte)
    End Sub
    Partial Private Sub Onstat_type2Changed()
    End Sub
    Partial Private Sub Onstat_value2Changing(value As Short)
    End Sub
    Partial Private Sub Onstat_value2Changed()
    End Sub
    Partial Private Sub Onstat_type3Changing(value As Byte)
    End Sub
    Partial Private Sub Onstat_type3Changed()
    End Sub
    Partial Private Sub Onstat_value3Changing(value As Short)
    End Sub
    Partial Private Sub Onstat_value3Changed()
    End Sub
    Partial Private Sub Onstat_type4Changing(value As Byte)
    End Sub
    Partial Private Sub Onstat_type4Changed()
    End Sub
    Partial Private Sub Onstat_value4Changing(value As Short)
    End Sub
    Partial Private Sub Onstat_value4Changed()
    End Sub
    Partial Private Sub Onstat_type5Changing(value As Byte)
    End Sub
    Partial Private Sub Onstat_type5Changed()
    End Sub
    Partial Private Sub Onstat_value5Changing(value As Short)
    End Sub
    Partial Private Sub Onstat_value5Changed()
    End Sub
    Partial Private Sub Onstat_type6Changing(value As Byte)
    End Sub
    Partial Private Sub Onstat_type6Changed()
    End Sub
    Partial Private Sub Onstat_value6Changing(value As Short)
    End Sub
    Partial Private Sub Onstat_value6Changed()
    End Sub
    Partial Private Sub Onstat_type7Changing(value As Byte)
    End Sub
    Partial Private Sub Onstat_type7Changed()
    End Sub
    Partial Private Sub Onstat_value7Changing(value As Short)
    End Sub
    Partial Private Sub Onstat_value7Changed()
    End Sub
    Partial Private Sub Onstat_type8Changing(value As Byte)
    End Sub
    Partial Private Sub Onstat_type8Changed()
    End Sub
    Partial Private Sub Onstat_value8Changing(value As Short)
    End Sub
    Partial Private Sub Onstat_value8Changed()
    End Sub
    Partial Private Sub Onstat_type9Changing(value As Byte)
    End Sub
    Partial Private Sub Onstat_type9Changed()
    End Sub
    Partial Private Sub Onstat_value9Changing(value As Short)
    End Sub
    Partial Private Sub Onstat_value9Changed()
    End Sub
    Partial Private Sub Onstat_type10Changing(value As Byte)
    End Sub
    Partial Private Sub Onstat_type10Changed()
    End Sub
    Partial Private Sub Onstat_value10Changing(value As Short)
    End Sub
    Partial Private Sub Onstat_value10Changed()
    End Sub
    Partial Private Sub OnScalingStatDistributionChanging(value As Short)
    End Sub
    Partial Private Sub OnScalingStatDistributionChanged()
    End Sub
    Partial Private Sub OnScalingStatValueChanging(value As Integer)
    End Sub
    Partial Private Sub OnScalingStatValueChanged()
    End Sub
    Partial Private Sub Ondmg_min1Changing(value As Single)
    End Sub
    Partial Private Sub Ondmg_min1Changed()
    End Sub
    Partial Private Sub Ondmg_max1Changing(value As Single)
    End Sub
    Partial Private Sub Ondmg_max1Changed()
    End Sub
    Partial Private Sub Ondmg_type1Changing(value As Byte)
    End Sub
    Partial Private Sub Ondmg_type1Changed()
    End Sub
    Partial Private Sub Ondmg_min2Changing(value As Single)
    End Sub
    Partial Private Sub Ondmg_min2Changed()
    End Sub
    Partial Private Sub Ondmg_max2Changing(value As Single)
    End Sub
    Partial Private Sub Ondmg_max2Changed()
    End Sub
    Partial Private Sub Ondmg_type2Changing(value As Byte)
    End Sub
    Partial Private Sub Ondmg_type2Changed()
    End Sub
    Partial Private Sub OnarmorChanging(value As Short)
    End Sub
    Partial Private Sub OnarmorChanged()
    End Sub
    Partial Private Sub Onholy_resChanging(value As Byte)
    End Sub
    Partial Private Sub Onholy_resChanged()
    End Sub
    Partial Private Sub Onfire_resChanging(value As Byte)
    End Sub
    Partial Private Sub Onfire_resChanged()
    End Sub
    Partial Private Sub Onnature_resChanging(value As Byte)
    End Sub
    Partial Private Sub Onnature_resChanged()
    End Sub
    Partial Private Sub Onfrost_resChanging(value As Byte)
    End Sub
    Partial Private Sub Onfrost_resChanged()
    End Sub
    Partial Private Sub Onshadow_resChanging(value As Byte)
    End Sub
    Partial Private Sub Onshadow_resChanged()
    End Sub
    Partial Private Sub Onarcane_resChanging(value As Byte)
    End Sub
    Partial Private Sub Onarcane_resChanged()
    End Sub
    Partial Private Sub OndelayChanging(value As Short)
    End Sub
    Partial Private Sub OndelayChanged()
    End Sub
    Partial Private Sub Onammo_typeChanging(value As Byte)
    End Sub
    Partial Private Sub Onammo_typeChanged()
    End Sub
    Partial Private Sub OnRangedModRangeChanging(value As Single)
    End Sub
    Partial Private Sub OnRangedModRangeChanged()
    End Sub
    Partial Private Sub Onspellid_1Changing(value As Integer)
    End Sub
    Partial Private Sub Onspellid_1Changed()
    End Sub
    Partial Private Sub Onspelltrigger_1Changing(value As Byte)
    End Sub
    Partial Private Sub Onspelltrigger_1Changed()
    End Sub
    Partial Private Sub Onspellcharges_1Changing(value As Short)
    End Sub
    Partial Private Sub Onspellcharges_1Changed()
    End Sub
    Partial Private Sub OnspellppmRate_1Changing(value As Single)
    End Sub
    Partial Private Sub OnspellppmRate_1Changed()
    End Sub
    Partial Private Sub Onspellcooldown_1Changing(value As Integer)
    End Sub
    Partial Private Sub Onspellcooldown_1Changed()
    End Sub
    Partial Private Sub Onspellcategory_1Changing(value As Short)
    End Sub
    Partial Private Sub Onspellcategory_1Changed()
    End Sub
    Partial Private Sub Onspellcategorycooldown_1Changing(value As Integer)
    End Sub
    Partial Private Sub Onspellcategorycooldown_1Changed()
    End Sub
    Partial Private Sub Onspellid_2Changing(value As Integer)
    End Sub
    Partial Private Sub Onspellid_2Changed()
    End Sub
    Partial Private Sub Onspelltrigger_2Changing(value As Byte)
    End Sub
    Partial Private Sub Onspelltrigger_2Changed()
    End Sub
    Partial Private Sub Onspellcharges_2Changing(value As Short)
    End Sub
    Partial Private Sub Onspellcharges_2Changed()
    End Sub
    Partial Private Sub OnspellppmRate_2Changing(value As Single)
    End Sub
    Partial Private Sub OnspellppmRate_2Changed()
    End Sub
    Partial Private Sub Onspellcooldown_2Changing(value As Integer)
    End Sub
    Partial Private Sub Onspellcooldown_2Changed()
    End Sub
    Partial Private Sub Onspellcategory_2Changing(value As Short)
    End Sub
    Partial Private Sub Onspellcategory_2Changed()
    End Sub
    Partial Private Sub Onspellcategorycooldown_2Changing(value As Integer)
    End Sub
    Partial Private Sub Onspellcategorycooldown_2Changed()
    End Sub
    Partial Private Sub Onspellid_3Changing(value As Integer)
    End Sub
    Partial Private Sub Onspellid_3Changed()
    End Sub
    Partial Private Sub Onspelltrigger_3Changing(value As Byte)
    End Sub
    Partial Private Sub Onspelltrigger_3Changed()
    End Sub
    Partial Private Sub Onspellcharges_3Changing(value As Short)
    End Sub
    Partial Private Sub Onspellcharges_3Changed()
    End Sub
    Partial Private Sub OnspellppmRate_3Changing(value As Single)
    End Sub
    Partial Private Sub OnspellppmRate_3Changed()
    End Sub
    Partial Private Sub Onspellcooldown_3Changing(value As Integer)
    End Sub
    Partial Private Sub Onspellcooldown_3Changed()
    End Sub
    Partial Private Sub Onspellcategory_3Changing(value As Short)
    End Sub
    Partial Private Sub Onspellcategory_3Changed()
    End Sub
    Partial Private Sub Onspellcategorycooldown_3Changing(value As Integer)
    End Sub
    Partial Private Sub Onspellcategorycooldown_3Changed()
    End Sub
    Partial Private Sub Onspellid_4Changing(value As Integer)
    End Sub
    Partial Private Sub Onspellid_4Changed()
    End Sub
    Partial Private Sub Onspelltrigger_4Changing(value As Byte)
    End Sub
    Partial Private Sub Onspelltrigger_4Changed()
    End Sub
    Partial Private Sub Onspellcharges_4Changing(value As Short)
    End Sub
    Partial Private Sub Onspellcharges_4Changed()
    End Sub
    Partial Private Sub OnspellppmRate_4Changing(value As Single)
    End Sub
    Partial Private Sub OnspellppmRate_4Changed()
    End Sub
    Partial Private Sub Onspellcooldown_4Changing(value As Integer)
    End Sub
    Partial Private Sub Onspellcooldown_4Changed()
    End Sub
    Partial Private Sub Onspellcategory_4Changing(value As Short)
    End Sub
    Partial Private Sub Onspellcategory_4Changed()
    End Sub
    Partial Private Sub Onspellcategorycooldown_4Changing(value As Integer)
    End Sub
    Partial Private Sub Onspellcategorycooldown_4Changed()
    End Sub
    Partial Private Sub Onspellid_5Changing(value As Integer)
    End Sub
    Partial Private Sub Onspellid_5Changed()
    End Sub
    Partial Private Sub Onspelltrigger_5Changing(value As Byte)
    End Sub
    Partial Private Sub Onspelltrigger_5Changed()
    End Sub
    Partial Private Sub Onspellcharges_5Changing(value As Short)
    End Sub
    Partial Private Sub Onspellcharges_5Changed()
    End Sub
    Partial Private Sub OnspellppmRate_5Changing(value As Single)
    End Sub
    Partial Private Sub OnspellppmRate_5Changed()
    End Sub
    Partial Private Sub Onspellcooldown_5Changing(value As Integer)
    End Sub
    Partial Private Sub Onspellcooldown_5Changed()
    End Sub
    Partial Private Sub Onspellcategory_5Changing(value As Short)
    End Sub
    Partial Private Sub Onspellcategory_5Changed()
    End Sub
    Partial Private Sub Onspellcategorycooldown_5Changing(value As Integer)
    End Sub
    Partial Private Sub Onspellcategorycooldown_5Changed()
    End Sub
    Partial Private Sub OnbondingChanging(value As Byte)
    End Sub
    Partial Private Sub OnbondingChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    Partial Private Sub OnPageTextChanging(value As Integer)
    End Sub
    Partial Private Sub OnPageTextChanged()
    End Sub
    Partial Private Sub OnLanguageIDChanging(value As Byte)
    End Sub
    Partial Private Sub OnLanguageIDChanged()
    End Sub
    Partial Private Sub OnPageMaterialChanging(value As Byte)
    End Sub
    Partial Private Sub OnPageMaterialChanged()
    End Sub
    Partial Private Sub OnstartquestChanging(value As Integer)
    End Sub
    Partial Private Sub OnstartquestChanged()
    End Sub
    Partial Private Sub OnlockidChanging(value As Integer)
    End Sub
    Partial Private Sub OnlockidChanged()
    End Sub
    Partial Private Sub OnMaterialChanging(value As Short)
    End Sub
    Partial Private Sub OnMaterialChanged()
    End Sub
    Partial Private Sub OnsheathChanging(value As Byte)
    End Sub
    Partial Private Sub OnsheathChanged()
    End Sub
    Partial Private Sub OnRandomPropertyChanging(value As Integer)
    End Sub
    Partial Private Sub OnRandomPropertyChanged()
    End Sub
    Partial Private Sub OnRandomSuffixChanging(value As Integer)
    End Sub
    Partial Private Sub OnRandomSuffixChanged()
    End Sub
    Partial Private Sub OnblockChanging(value As Integer)
    End Sub
    Partial Private Sub OnblockChanged()
    End Sub
    Partial Private Sub OnitemsetChanging(value As Integer)
    End Sub
    Partial Private Sub OnitemsetChanged()
    End Sub
    Partial Private Sub OnMaxDurabilityChanging(value As Short)
    End Sub
    Partial Private Sub OnMaxDurabilityChanged()
    End Sub
    Partial Private Sub OnareaChanging(value As Integer)
    End Sub
    Partial Private Sub OnareaChanged()
    End Sub
    Partial Private Sub OnMapChanging(value As Short)
    End Sub
    Partial Private Sub OnMapChanged()
    End Sub
    Partial Private Sub OnBagFamilyChanging(value As Integer)
    End Sub
    Partial Private Sub OnBagFamilyChanged()
    End Sub
    Partial Private Sub OnTotemCategoryChanging(value As Integer)
    End Sub
    Partial Private Sub OnTotemCategoryChanged()
    End Sub
    Partial Private Sub OnsocketColor_1Changing(value As Short)
    End Sub
    Partial Private Sub OnsocketColor_1Changed()
    End Sub
    Partial Private Sub OnsocketContent_1Changing(value As Integer)
    End Sub
    Partial Private Sub OnsocketContent_1Changed()
    End Sub
    Partial Private Sub OnsocketColor_2Changing(value As Short)
    End Sub
    Partial Private Sub OnsocketColor_2Changed()
    End Sub
    Partial Private Sub OnsocketContent_2Changing(value As Integer)
    End Sub
    Partial Private Sub OnsocketContent_2Changed()
    End Sub
    Partial Private Sub OnsocketColor_3Changing(value As Short)
    End Sub
    Partial Private Sub OnsocketColor_3Changed()
    End Sub
    Partial Private Sub OnsocketContent_3Changing(value As Integer)
    End Sub
    Partial Private Sub OnsocketContent_3Changed()
    End Sub
    Partial Private Sub OnsocketBonusChanging(value As Integer)
    End Sub
    Partial Private Sub OnsocketBonusChanged()
    End Sub
    Partial Private Sub OnGemPropertiesChanging(value As Integer)
    End Sub
    Partial Private Sub OnGemPropertiesChanged()
    End Sub
    Partial Private Sub OnRequiredDisenchantSkillChanging(value As Short)
    End Sub
    Partial Private Sub OnRequiredDisenchantSkillChanged()
    End Sub
    Partial Private Sub OnArmorDamageModifierChanging(value As Single)
    End Sub
    Partial Private Sub OnArmorDamageModifierChanged()
    End Sub
    Partial Private Sub OnDurationChanging(value As Integer)
    End Sub
    Partial Private Sub OnDurationChanged()
    End Sub
    Partial Private Sub OnItemLimitCategoryChanging(value As Short)
    End Sub
    Partial Private Sub OnItemLimitCategoryChanged()
    End Sub
    Partial Private Sub OnHolidayIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnHolidayIdChanged()
    End Sub
    Partial Private Sub OnScriptNameChanging(value As String)
    End Sub
    Partial Private Sub OnScriptNameChanged()
    End Sub
    Partial Private Sub OnDisenchantIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDisenchantIDChanged()
    End Sub
    Partial Private Sub OnFoodTypeChanging(value As Byte)
    End Sub
    Partial Private Sub OnFoodTypeChanged()
    End Sub
    Partial Private Sub OnminMoneyLootChanging(value As Integer)
    End Sub
    Partial Private Sub OnminMoneyLootChanged()
    End Sub
    Partial Private Sub OnmaxMoneyLootChanging(value As Integer)
    End Sub
    Partial Private Sub OnmaxMoneyLootChanged()
    End Sub
    Partial Private Sub OnExtraFlagsChanging(value As Byte)
    End Sub
    Partial Private Sub OnExtraFlagsChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_entry", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property entry() As Integer
		Get
			Return Me._entry
		End Get
		Set
			If ((Me._entry = value)  _
						= false) Then
				Me.OnentryChanging(value)
				Me.SendPropertyChanging
				Me._entry = value
				Me.SendPropertyChanged("entry")
				Me.OnentryChanged
			End If
		End Set
	End Property
	
	<Column(Name:="class", Storage:="_class", DbType:="TinyInt NOT NULL")>  _
	Public Property [class]() As Byte
		Get
			Return Me._class
		End Get
		Set
			If ((Me._class = value)  _
						= false) Then
				Me.OnclassChanging(value)
				Me.SendPropertyChanging
				Me._class = value
				Me.SendPropertyChanged("[class]")
				Me.OnclassChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_subclass", DbType:="TinyInt NOT NULL")>  _
	Public Property subclass() As Byte
		Get
			Return Me._subclass
		End Get
		Set
			If ((Me._subclass = value)  _
						= false) Then
				Me.OnsubclassChanging(value)
				Me.SendPropertyChanging
				Me._subclass = value
				Me.SendPropertyChanged("subclass")
				Me.OnsubclassChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_unk0", DbType:="Int NOT NULL")>  _
	Public Property unk0() As Integer
		Get
			Return Me._unk0
		End Get
		Set
			If ((Me._unk0 = value)  _
						= false) Then
				Me.Onunk0Changing(value)
				Me.SendPropertyChanging
				Me._unk0 = value
				Me.SendPropertyChanged("unk0")
				Me.Onunk0Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_name", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_displayid", DbType:="Int NOT NULL")>  _
	Public Property displayid() As Integer
		Get
			Return Me._displayid
		End Get
		Set
			If ((Me._displayid = value)  _
						= false) Then
				Me.OndisplayidChanging(value)
				Me.SendPropertyChanging
				Me._displayid = value
				Me.SendPropertyChanged("displayid")
				Me.OndisplayidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Quality", DbType:="TinyInt NOT NULL")>  _
	Public Property Quality() As Byte
		Get
			Return Me._Quality
		End Get
		Set
			If ((Me._Quality = value)  _
						= false) Then
				Me.OnQualityChanging(value)
				Me.SendPropertyChanging
				Me._Quality = value
				Me.SendPropertyChanged("Quality")
				Me.OnQualityChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Flags", DbType:="Int NOT NULL")>  _
	Public Property Flags() As Integer
		Get
			Return Me._Flags
		End Get
		Set
			If ((Me._Flags = value)  _
						= false) Then
				Me.OnFlagsChanging(value)
				Me.SendPropertyChanging
				Me._Flags = value
				Me.SendPropertyChanged("Flags")
				Me.OnFlagsChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Faction", DbType:="Int NOT NULL")>  _
	Public Property Faction() As Integer
		Get
			Return Me._Faction
		End Get
		Set
			If ((Me._Faction = value)  _
						= false) Then
				Me.OnFactionChanging(value)
				Me.SendPropertyChanging
				Me._Faction = value
				Me.SendPropertyChanged("Faction")
				Me.OnFactionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_BuyCount", DbType:="TinyInt NOT NULL")>  _
	Public Property BuyCount() As Byte
		Get
			Return Me._BuyCount
		End Get
		Set
			If ((Me._BuyCount = value)  _
						= false) Then
				Me.OnBuyCountChanging(value)
				Me.SendPropertyChanging
				Me._BuyCount = value
				Me.SendPropertyChanged("BuyCount")
				Me.OnBuyCountChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_BuyPrice", DbType:="Int NOT NULL")>  _
	Public Property BuyPrice() As Integer
		Get
			Return Me._BuyPrice
		End Get
		Set
			If ((Me._BuyPrice = value)  _
						= false) Then
				Me.OnBuyPriceChanging(value)
				Me.SendPropertyChanging
				Me._BuyPrice = value
				Me.SendPropertyChanged("BuyPrice")
				Me.OnBuyPriceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_SellPrice", DbType:="Int NOT NULL")>  _
	Public Property SellPrice() As Integer
		Get
			Return Me._SellPrice
		End Get
		Set
			If ((Me._SellPrice = value)  _
						= false) Then
				Me.OnSellPriceChanging(value)
				Me.SendPropertyChanging
				Me._SellPrice = value
				Me.SendPropertyChanged("SellPrice")
				Me.OnSellPriceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_InventoryType", DbType:="TinyInt NOT NULL")>  _
	Public Property InventoryType() As Byte
		Get
			Return Me._InventoryType
		End Get
		Set
			If ((Me._InventoryType = value)  _
						= false) Then
				Me.OnInventoryTypeChanging(value)
				Me.SendPropertyChanging
				Me._InventoryType = value
				Me.SendPropertyChanged("InventoryType")
				Me.OnInventoryTypeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_AllowableClass", DbType:="Int NOT NULL")>  _
	Public Property AllowableClass() As Integer
		Get
			Return Me._AllowableClass
		End Get
		Set
			If ((Me._AllowableClass = value)  _
						= false) Then
				Me.OnAllowableClassChanging(value)
				Me.SendPropertyChanging
				Me._AllowableClass = value
				Me.SendPropertyChanged("AllowableClass")
				Me.OnAllowableClassChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_AllowableRace", DbType:="Int NOT NULL")>  _
	Public Property AllowableRace() As Integer
		Get
			Return Me._AllowableRace
		End Get
		Set
			If ((Me._AllowableRace = value)  _
						= false) Then
				Me.OnAllowableRaceChanging(value)
				Me.SendPropertyChanging
				Me._AllowableRace = value
				Me.SendPropertyChanged("AllowableRace")
				Me.OnAllowableRaceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ItemLevel", DbType:="SmallInt NOT NULL")>  _
	Public Property ItemLevel() As Short
		Get
			Return Me._ItemLevel
		End Get
		Set
			If ((Me._ItemLevel = value)  _
						= false) Then
				Me.OnItemLevelChanging(value)
				Me.SendPropertyChanging
				Me._ItemLevel = value
				Me.SendPropertyChanged("ItemLevel")
				Me.OnItemLevelChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RequiredLevel", DbType:="TinyInt NOT NULL")>  _
	Public Property RequiredLevel() As Byte
		Get
			Return Me._RequiredLevel
		End Get
		Set
			If ((Me._RequiredLevel = value)  _
						= false) Then
				Me.OnRequiredLevelChanging(value)
				Me.SendPropertyChanging
				Me._RequiredLevel = value
				Me.SendPropertyChanged("RequiredLevel")
				Me.OnRequiredLevelChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RequiredSkill", DbType:="SmallInt NOT NULL")>  _
	Public Property RequiredSkill() As Short
		Get
			Return Me._RequiredSkill
		End Get
		Set
			If ((Me._RequiredSkill = value)  _
						= false) Then
				Me.OnRequiredSkillChanging(value)
				Me.SendPropertyChanging
				Me._RequiredSkill = value
				Me.SendPropertyChanged("RequiredSkill")
				Me.OnRequiredSkillChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RequiredSkillRank", DbType:="SmallInt NOT NULL")>  _
	Public Property RequiredSkillRank() As Short
		Get
			Return Me._RequiredSkillRank
		End Get
		Set
			If ((Me._RequiredSkillRank = value)  _
						= false) Then
				Me.OnRequiredSkillRankChanging(value)
				Me.SendPropertyChanging
				Me._RequiredSkillRank = value
				Me.SendPropertyChanged("RequiredSkillRank")
				Me.OnRequiredSkillRankChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_requiredspell", DbType:="Int NOT NULL")>  _
	Public Property requiredspell() As Integer
		Get
			Return Me._requiredspell
		End Get
		Set
			If ((Me._requiredspell = value)  _
						= false) Then
				Me.OnrequiredspellChanging(value)
				Me.SendPropertyChanging
				Me._requiredspell = value
				Me.SendPropertyChanged("requiredspell")
				Me.OnrequiredspellChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_requiredhonorrank", DbType:="Int NOT NULL")>  _
	Public Property requiredhonorrank() As Integer
		Get
			Return Me._requiredhonorrank
		End Get
		Set
			If ((Me._requiredhonorrank = value)  _
						= false) Then
				Me.OnrequiredhonorrankChanging(value)
				Me.SendPropertyChanging
				Me._requiredhonorrank = value
				Me.SendPropertyChanged("requiredhonorrank")
				Me.OnrequiredhonorrankChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RequiredCityRank", DbType:="Int NOT NULL")>  _
	Public Property RequiredCityRank() As Integer
		Get
			Return Me._RequiredCityRank
		End Get
		Set
			If ((Me._RequiredCityRank = value)  _
						= false) Then
				Me.OnRequiredCityRankChanging(value)
				Me.SendPropertyChanging
				Me._RequiredCityRank = value
				Me.SendPropertyChanged("RequiredCityRank")
				Me.OnRequiredCityRankChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RequiredReputationFaction", DbType:="SmallInt NOT NULL")>  _
	Public Property RequiredReputationFaction() As Short
		Get
			Return Me._RequiredReputationFaction
		End Get
		Set
			If ((Me._RequiredReputationFaction = value)  _
						= false) Then
				Me.OnRequiredReputationFactionChanging(value)
				Me.SendPropertyChanging
				Me._RequiredReputationFaction = value
				Me.SendPropertyChanged("RequiredReputationFaction")
				Me.OnRequiredReputationFactionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RequiredReputationRank", DbType:="SmallInt NOT NULL")>  _
	Public Property RequiredReputationRank() As Short
		Get
			Return Me._RequiredReputationRank
		End Get
		Set
			If ((Me._RequiredReputationRank = value)  _
						= false) Then
				Me.OnRequiredReputationRankChanging(value)
				Me.SendPropertyChanging
				Me._RequiredReputationRank = value
				Me.SendPropertyChanged("RequiredReputationRank")
				Me.OnRequiredReputationRankChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_maxcount", DbType:="SmallInt NOT NULL")>  _
	Public Property maxcount() As Short
		Get
			Return Me._maxcount
		End Get
		Set
			If ((Me._maxcount = value)  _
						= false) Then
				Me.OnmaxcountChanging(value)
				Me.SendPropertyChanging
				Me._maxcount = value
				Me.SendPropertyChanged("maxcount")
				Me.OnmaxcountChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_stackable", DbType:="SmallInt NOT NULL")>  _
	Public Property stackable() As Short
		Get
			Return Me._stackable
		End Get
		Set
			If ((Me._stackable = value)  _
						= false) Then
				Me.OnstackableChanging(value)
				Me.SendPropertyChanging
				Me._stackable = value
				Me.SendPropertyChanged("stackable")
				Me.OnstackableChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ContainerSlots", DbType:="TinyInt NOT NULL")>  _
	Public Property ContainerSlots() As Byte
		Get
			Return Me._ContainerSlots
		End Get
		Set
			If ((Me._ContainerSlots = value)  _
						= false) Then
				Me.OnContainerSlotsChanging(value)
				Me.SendPropertyChanging
				Me._ContainerSlots = value
				Me.SendPropertyChanged("ContainerSlots")
				Me.OnContainerSlotsChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_StatsCount", DbType:="TinyInt NOT NULL")>  _
	Public Property StatsCount() As Byte
		Get
			Return Me._StatsCount
		End Get
		Set
			If ((Me._StatsCount = value)  _
						= false) Then
				Me.OnStatsCountChanging(value)
				Me.SendPropertyChanging
				Me._StatsCount = value
				Me.SendPropertyChanged("StatsCount")
				Me.OnStatsCountChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_stat_type1", DbType:="TinyInt NOT NULL")>  _
	Public Property stat_type1() As Byte
		Get
			Return Me._stat_type1
		End Get
		Set
			If ((Me._stat_type1 = value)  _
						= false) Then
				Me.Onstat_type1Changing(value)
				Me.SendPropertyChanging
				Me._stat_type1 = value
				Me.SendPropertyChanged("stat_type1")
				Me.Onstat_type1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_stat_value1", DbType:="SmallInt NOT NULL")>  _
	Public Property stat_value1() As Short
		Get
			Return Me._stat_value1
		End Get
		Set
			If ((Me._stat_value1 = value)  _
						= false) Then
				Me.Onstat_value1Changing(value)
				Me.SendPropertyChanging
				Me._stat_value1 = value
				Me.SendPropertyChanged("stat_value1")
				Me.Onstat_value1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_stat_type2", DbType:="TinyInt NOT NULL")>  _
	Public Property stat_type2() As Byte
		Get
			Return Me._stat_type2
		End Get
		Set
			If ((Me._stat_type2 = value)  _
						= false) Then
				Me.Onstat_type2Changing(value)
				Me.SendPropertyChanging
				Me._stat_type2 = value
				Me.SendPropertyChanged("stat_type2")
				Me.Onstat_type2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_stat_value2", DbType:="SmallInt NOT NULL")>  _
	Public Property stat_value2() As Short
		Get
			Return Me._stat_value2
		End Get
		Set
			If ((Me._stat_value2 = value)  _
						= false) Then
				Me.Onstat_value2Changing(value)
				Me.SendPropertyChanging
				Me._stat_value2 = value
				Me.SendPropertyChanged("stat_value2")
				Me.Onstat_value2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_stat_type3", DbType:="TinyInt NOT NULL")>  _
	Public Property stat_type3() As Byte
		Get
			Return Me._stat_type3
		End Get
		Set
			If ((Me._stat_type3 = value)  _
						= false) Then
				Me.Onstat_type3Changing(value)
				Me.SendPropertyChanging
				Me._stat_type3 = value
				Me.SendPropertyChanged("stat_type3")
				Me.Onstat_type3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_stat_value3", DbType:="SmallInt NOT NULL")>  _
	Public Property stat_value3() As Short
		Get
			Return Me._stat_value3
		End Get
		Set
			If ((Me._stat_value3 = value)  _
						= false) Then
				Me.Onstat_value3Changing(value)
				Me.SendPropertyChanging
				Me._stat_value3 = value
				Me.SendPropertyChanged("stat_value3")
				Me.Onstat_value3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_stat_type4", DbType:="TinyInt NOT NULL")>  _
	Public Property stat_type4() As Byte
		Get
			Return Me._stat_type4
		End Get
		Set
			If ((Me._stat_type4 = value)  _
						= false) Then
				Me.Onstat_type4Changing(value)
				Me.SendPropertyChanging
				Me._stat_type4 = value
				Me.SendPropertyChanged("stat_type4")
				Me.Onstat_type4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_stat_value4", DbType:="SmallInt NOT NULL")>  _
	Public Property stat_value4() As Short
		Get
			Return Me._stat_value4
		End Get
		Set
			If ((Me._stat_value4 = value)  _
						= false) Then
				Me.Onstat_value4Changing(value)
				Me.SendPropertyChanging
				Me._stat_value4 = value
				Me.SendPropertyChanged("stat_value4")
				Me.Onstat_value4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_stat_type5", DbType:="TinyInt NOT NULL")>  _
	Public Property stat_type5() As Byte
		Get
			Return Me._stat_type5
		End Get
		Set
			If ((Me._stat_type5 = value)  _
						= false) Then
				Me.Onstat_type5Changing(value)
				Me.SendPropertyChanging
				Me._stat_type5 = value
				Me.SendPropertyChanged("stat_type5")
				Me.Onstat_type5Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_stat_value5", DbType:="SmallInt NOT NULL")>  _
	Public Property stat_value5() As Short
		Get
			Return Me._stat_value5
		End Get
		Set
			If ((Me._stat_value5 = value)  _
						= false) Then
				Me.Onstat_value5Changing(value)
				Me.SendPropertyChanging
				Me._stat_value5 = value
				Me.SendPropertyChanged("stat_value5")
				Me.Onstat_value5Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_stat_type6", DbType:="TinyInt NOT NULL")>  _
	Public Property stat_type6() As Byte
		Get
			Return Me._stat_type6
		End Get
		Set
			If ((Me._stat_type6 = value)  _
						= false) Then
				Me.Onstat_type6Changing(value)
				Me.SendPropertyChanging
				Me._stat_type6 = value
				Me.SendPropertyChanged("stat_type6")
				Me.Onstat_type6Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_stat_value6", DbType:="SmallInt NOT NULL")>  _
	Public Property stat_value6() As Short
		Get
			Return Me._stat_value6
		End Get
		Set
			If ((Me._stat_value6 = value)  _
						= false) Then
				Me.Onstat_value6Changing(value)
				Me.SendPropertyChanging
				Me._stat_value6 = value
				Me.SendPropertyChanged("stat_value6")
				Me.Onstat_value6Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_stat_type7", DbType:="TinyInt NOT NULL")>  _
	Public Property stat_type7() As Byte
		Get
			Return Me._stat_type7
		End Get
		Set
			If ((Me._stat_type7 = value)  _
						= false) Then
				Me.Onstat_type7Changing(value)
				Me.SendPropertyChanging
				Me._stat_type7 = value
				Me.SendPropertyChanged("stat_type7")
				Me.Onstat_type7Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_stat_value7", DbType:="SmallInt NOT NULL")>  _
	Public Property stat_value7() As Short
		Get
			Return Me._stat_value7
		End Get
		Set
			If ((Me._stat_value7 = value)  _
						= false) Then
				Me.Onstat_value7Changing(value)
				Me.SendPropertyChanging
				Me._stat_value7 = value
				Me.SendPropertyChanged("stat_value7")
				Me.Onstat_value7Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_stat_type8", DbType:="TinyInt NOT NULL")>  _
	Public Property stat_type8() As Byte
		Get
			Return Me._stat_type8
		End Get
		Set
			If ((Me._stat_type8 = value)  _
						= false) Then
				Me.Onstat_type8Changing(value)
				Me.SendPropertyChanging
				Me._stat_type8 = value
				Me.SendPropertyChanged("stat_type8")
				Me.Onstat_type8Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_stat_value8", DbType:="SmallInt NOT NULL")>  _
	Public Property stat_value8() As Short
		Get
			Return Me._stat_value8
		End Get
		Set
			If ((Me._stat_value8 = value)  _
						= false) Then
				Me.Onstat_value8Changing(value)
				Me.SendPropertyChanging
				Me._stat_value8 = value
				Me.SendPropertyChanged("stat_value8")
				Me.Onstat_value8Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_stat_type9", DbType:="TinyInt NOT NULL")>  _
	Public Property stat_type9() As Byte
		Get
			Return Me._stat_type9
		End Get
		Set
			If ((Me._stat_type9 = value)  _
						= false) Then
				Me.Onstat_type9Changing(value)
				Me.SendPropertyChanging
				Me._stat_type9 = value
				Me.SendPropertyChanged("stat_type9")
				Me.Onstat_type9Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_stat_value9", DbType:="SmallInt NOT NULL")>  _
	Public Property stat_value9() As Short
		Get
			Return Me._stat_value9
		End Get
		Set
			If ((Me._stat_value9 = value)  _
						= false) Then
				Me.Onstat_value9Changing(value)
				Me.SendPropertyChanging
				Me._stat_value9 = value
				Me.SendPropertyChanged("stat_value9")
				Me.Onstat_value9Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_stat_type10", DbType:="TinyInt NOT NULL")>  _
	Public Property stat_type10() As Byte
		Get
			Return Me._stat_type10
		End Get
		Set
			If ((Me._stat_type10 = value)  _
						= false) Then
				Me.Onstat_type10Changing(value)
				Me.SendPropertyChanging
				Me._stat_type10 = value
				Me.SendPropertyChanged("stat_type10")
				Me.Onstat_type10Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_stat_value10", DbType:="SmallInt NOT NULL")>  _
	Public Property stat_value10() As Short
		Get
			Return Me._stat_value10
		End Get
		Set
			If ((Me._stat_value10 = value)  _
						= false) Then
				Me.Onstat_value10Changing(value)
				Me.SendPropertyChanging
				Me._stat_value10 = value
				Me.SendPropertyChanged("stat_value10")
				Me.Onstat_value10Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_ScalingStatDistribution", DbType:="SmallInt NOT NULL")>  _
	Public Property ScalingStatDistribution() As Short
		Get
			Return Me._ScalingStatDistribution
		End Get
		Set
			If ((Me._ScalingStatDistribution = value)  _
						= false) Then
				Me.OnScalingStatDistributionChanging(value)
				Me.SendPropertyChanging
				Me._ScalingStatDistribution = value
				Me.SendPropertyChanged("ScalingStatDistribution")
				Me.OnScalingStatDistributionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ScalingStatValue", DbType:="Int NOT NULL")>  _
	Public Property ScalingStatValue() As Integer
		Get
			Return Me._ScalingStatValue
		End Get
		Set
			If ((Me._ScalingStatValue = value)  _
						= false) Then
				Me.OnScalingStatValueChanging(value)
				Me.SendPropertyChanging
				Me._ScalingStatValue = value
				Me.SendPropertyChanged("ScalingStatValue")
				Me.OnScalingStatValueChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_dmg_min1", DbType:="Real NOT NULL")>  _
	Public Property dmg_min1() As Single
		Get
			Return Me._dmg_min1
		End Get
		Set
			If ((Me._dmg_min1 = value)  _
						= false) Then
				Me.Ondmg_min1Changing(value)
				Me.SendPropertyChanging
				Me._dmg_min1 = value
				Me.SendPropertyChanged("dmg_min1")
				Me.Ondmg_min1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_dmg_max1", DbType:="Real NOT NULL")>  _
	Public Property dmg_max1() As Single
		Get
			Return Me._dmg_max1
		End Get
		Set
			If ((Me._dmg_max1 = value)  _
						= false) Then
				Me.Ondmg_max1Changing(value)
				Me.SendPropertyChanging
				Me._dmg_max1 = value
				Me.SendPropertyChanged("dmg_max1")
				Me.Ondmg_max1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_dmg_type1", DbType:="TinyInt NOT NULL")>  _
	Public Property dmg_type1() As Byte
		Get
			Return Me._dmg_type1
		End Get
		Set
			If ((Me._dmg_type1 = value)  _
						= false) Then
				Me.Ondmg_type1Changing(value)
				Me.SendPropertyChanging
				Me._dmg_type1 = value
				Me.SendPropertyChanged("dmg_type1")
				Me.Ondmg_type1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_dmg_min2", DbType:="Real NOT NULL")>  _
	Public Property dmg_min2() As Single
		Get
			Return Me._dmg_min2
		End Get
		Set
			If ((Me._dmg_min2 = value)  _
						= false) Then
				Me.Ondmg_min2Changing(value)
				Me.SendPropertyChanging
				Me._dmg_min2 = value
				Me.SendPropertyChanged("dmg_min2")
				Me.Ondmg_min2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_dmg_max2", DbType:="Real NOT NULL")>  _
	Public Property dmg_max2() As Single
		Get
			Return Me._dmg_max2
		End Get
		Set
			If ((Me._dmg_max2 = value)  _
						= false) Then
				Me.Ondmg_max2Changing(value)
				Me.SendPropertyChanging
				Me._dmg_max2 = value
				Me.SendPropertyChanged("dmg_max2")
				Me.Ondmg_max2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_dmg_type2", DbType:="TinyInt NOT NULL")>  _
	Public Property dmg_type2() As Byte
		Get
			Return Me._dmg_type2
		End Get
		Set
			If ((Me._dmg_type2 = value)  _
						= false) Then
				Me.Ondmg_type2Changing(value)
				Me.SendPropertyChanging
				Me._dmg_type2 = value
				Me.SendPropertyChanged("dmg_type2")
				Me.Ondmg_type2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_armor", DbType:="SmallInt NOT NULL")>  _
	Public Property armor() As Short
		Get
			Return Me._armor
		End Get
		Set
			If ((Me._armor = value)  _
						= false) Then
				Me.OnarmorChanging(value)
				Me.SendPropertyChanging
				Me._armor = value
				Me.SendPropertyChanged("armor")
				Me.OnarmorChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_holy_res", DbType:="TinyInt NOT NULL")>  _
	Public Property holy_res() As Byte
		Get
			Return Me._holy_res
		End Get
		Set
			If ((Me._holy_res = value)  _
						= false) Then
				Me.Onholy_resChanging(value)
				Me.SendPropertyChanging
				Me._holy_res = value
				Me.SendPropertyChanged("holy_res")
				Me.Onholy_resChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_fire_res", DbType:="TinyInt NOT NULL")>  _
	Public Property fire_res() As Byte
		Get
			Return Me._fire_res
		End Get
		Set
			If ((Me._fire_res = value)  _
						= false) Then
				Me.Onfire_resChanging(value)
				Me.SendPropertyChanging
				Me._fire_res = value
				Me.SendPropertyChanged("fire_res")
				Me.Onfire_resChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_nature_res", DbType:="TinyInt NOT NULL")>  _
	Public Property nature_res() As Byte
		Get
			Return Me._nature_res
		End Get
		Set
			If ((Me._nature_res = value)  _
						= false) Then
				Me.Onnature_resChanging(value)
				Me.SendPropertyChanging
				Me._nature_res = value
				Me.SendPropertyChanged("nature_res")
				Me.Onnature_resChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_frost_res", DbType:="TinyInt NOT NULL")>  _
	Public Property frost_res() As Byte
		Get
			Return Me._frost_res
		End Get
		Set
			If ((Me._frost_res = value)  _
						= false) Then
				Me.Onfrost_resChanging(value)
				Me.SendPropertyChanging
				Me._frost_res = value
				Me.SendPropertyChanged("frost_res")
				Me.Onfrost_resChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_shadow_res", DbType:="TinyInt NOT NULL")>  _
	Public Property shadow_res() As Byte
		Get
			Return Me._shadow_res
		End Get
		Set
			If ((Me._shadow_res = value)  _
						= false) Then
				Me.Onshadow_resChanging(value)
				Me.SendPropertyChanging
				Me._shadow_res = value
				Me.SendPropertyChanged("shadow_res")
				Me.Onshadow_resChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_arcane_res", DbType:="TinyInt NOT NULL")>  _
	Public Property arcane_res() As Byte
		Get
			Return Me._arcane_res
		End Get
		Set
			If ((Me._arcane_res = value)  _
						= false) Then
				Me.Onarcane_resChanging(value)
				Me.SendPropertyChanging
				Me._arcane_res = value
				Me.SendPropertyChanged("arcane_res")
				Me.Onarcane_resChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_delay", DbType:="SmallInt NOT NULL")>  _
	Public Property delay() As Short
		Get
			Return Me._delay
		End Get
		Set
			If ((Me._delay = value)  _
						= false) Then
				Me.OndelayChanging(value)
				Me.SendPropertyChanging
				Me._delay = value
				Me.SendPropertyChanged("delay")
				Me.OndelayChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ammo_type", DbType:="TinyInt NOT NULL")>  _
	Public Property ammo_type() As Byte
		Get
			Return Me._ammo_type
		End Get
		Set
			If ((Me._ammo_type = value)  _
						= false) Then
				Me.Onammo_typeChanging(value)
				Me.SendPropertyChanging
				Me._ammo_type = value
				Me.SendPropertyChanged("ammo_type")
				Me.Onammo_typeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RangedModRange", DbType:="Real NOT NULL")>  _
	Public Property RangedModRange() As Single
		Get
			Return Me._RangedModRange
		End Get
		Set
			If ((Me._RangedModRange = value)  _
						= false) Then
				Me.OnRangedModRangeChanging(value)
				Me.SendPropertyChanging
				Me._RangedModRange = value
				Me.SendPropertyChanged("RangedModRange")
				Me.OnRangedModRangeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_spellid_1", DbType:="Int NOT NULL")>  _
	Public Property spellid_1() As Integer
		Get
			Return Me._spellid_1
		End Get
		Set
			If ((Me._spellid_1 = value)  _
						= false) Then
				Me.Onspellid_1Changing(value)
				Me.SendPropertyChanging
				Me._spellid_1 = value
				Me.SendPropertyChanged("spellid_1")
				Me.Onspellid_1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spelltrigger_1", DbType:="TinyInt NOT NULL")>  _
	Public Property spelltrigger_1() As Byte
		Get
			Return Me._spelltrigger_1
		End Get
		Set
			If ((Me._spelltrigger_1 = value)  _
						= false) Then
				Me.Onspelltrigger_1Changing(value)
				Me.SendPropertyChanging
				Me._spelltrigger_1 = value
				Me.SendPropertyChanged("spelltrigger_1")
				Me.Onspelltrigger_1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spellcharges_1", DbType:="SmallInt NOT NULL")>  _
	Public Property spellcharges_1() As Short
		Get
			Return Me._spellcharges_1
		End Get
		Set
			If ((Me._spellcharges_1 = value)  _
						= false) Then
				Me.Onspellcharges_1Changing(value)
				Me.SendPropertyChanging
				Me._spellcharges_1 = value
				Me.SendPropertyChanged("spellcharges_1")
				Me.Onspellcharges_1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spellppmRate_1", DbType:="Real NOT NULL")>  _
	Public Property spellppmRate_1() As Single
		Get
			Return Me._spellppmRate_1
		End Get
		Set
			If ((Me._spellppmRate_1 = value)  _
						= false) Then
				Me.OnspellppmRate_1Changing(value)
				Me.SendPropertyChanging
				Me._spellppmRate_1 = value
				Me.SendPropertyChanged("spellppmRate_1")
				Me.OnspellppmRate_1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spellcooldown_1", DbType:="Int NOT NULL")>  _
	Public Property spellcooldown_1() As Integer
		Get
			Return Me._spellcooldown_1
		End Get
		Set
			If ((Me._spellcooldown_1 = value)  _
						= false) Then
				Me.Onspellcooldown_1Changing(value)
				Me.SendPropertyChanging
				Me._spellcooldown_1 = value
				Me.SendPropertyChanged("spellcooldown_1")
				Me.Onspellcooldown_1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spellcategory_1", DbType:="SmallInt NOT NULL")>  _
	Public Property spellcategory_1() As Short
		Get
			Return Me._spellcategory_1
		End Get
		Set
			If ((Me._spellcategory_1 = value)  _
						= false) Then
				Me.Onspellcategory_1Changing(value)
				Me.SendPropertyChanging
				Me._spellcategory_1 = value
				Me.SendPropertyChanged("spellcategory_1")
				Me.Onspellcategory_1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spellcategorycooldown_1", DbType:="Int NOT NULL")>  _
	Public Property spellcategorycooldown_1() As Integer
		Get
			Return Me._spellcategorycooldown_1
		End Get
		Set
			If ((Me._spellcategorycooldown_1 = value)  _
						= false) Then
				Me.Onspellcategorycooldown_1Changing(value)
				Me.SendPropertyChanging
				Me._spellcategorycooldown_1 = value
				Me.SendPropertyChanged("spellcategorycooldown_1")
				Me.Onspellcategorycooldown_1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spellid_2", DbType:="Int NOT NULL")>  _
	Public Property spellid_2() As Integer
		Get
			Return Me._spellid_2
		End Get
		Set
			If ((Me._spellid_2 = value)  _
						= false) Then
				Me.Onspellid_2Changing(value)
				Me.SendPropertyChanging
				Me._spellid_2 = value
				Me.SendPropertyChanged("spellid_2")
				Me.Onspellid_2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spelltrigger_2", DbType:="TinyInt NOT NULL")>  _
	Public Property spelltrigger_2() As Byte
		Get
			Return Me._spelltrigger_2
		End Get
		Set
			If ((Me._spelltrigger_2 = value)  _
						= false) Then
				Me.Onspelltrigger_2Changing(value)
				Me.SendPropertyChanging
				Me._spelltrigger_2 = value
				Me.SendPropertyChanged("spelltrigger_2")
				Me.Onspelltrigger_2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spellcharges_2", DbType:="SmallInt NOT NULL")>  _
	Public Property spellcharges_2() As Short
		Get
			Return Me._spellcharges_2
		End Get
		Set
			If ((Me._spellcharges_2 = value)  _
						= false) Then
				Me.Onspellcharges_2Changing(value)
				Me.SendPropertyChanging
				Me._spellcharges_2 = value
				Me.SendPropertyChanged("spellcharges_2")
				Me.Onspellcharges_2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spellppmRate_2", DbType:="Real NOT NULL")>  _
	Public Property spellppmRate_2() As Single
		Get
			Return Me._spellppmRate_2
		End Get
		Set
			If ((Me._spellppmRate_2 = value)  _
						= false) Then
				Me.OnspellppmRate_2Changing(value)
				Me.SendPropertyChanging
				Me._spellppmRate_2 = value
				Me.SendPropertyChanged("spellppmRate_2")
				Me.OnspellppmRate_2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spellcooldown_2", DbType:="Int NOT NULL")>  _
	Public Property spellcooldown_2() As Integer
		Get
			Return Me._spellcooldown_2
		End Get
		Set
			If ((Me._spellcooldown_2 = value)  _
						= false) Then
				Me.Onspellcooldown_2Changing(value)
				Me.SendPropertyChanging
				Me._spellcooldown_2 = value
				Me.SendPropertyChanged("spellcooldown_2")
				Me.Onspellcooldown_2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spellcategory_2", DbType:="SmallInt NOT NULL")>  _
	Public Property spellcategory_2() As Short
		Get
			Return Me._spellcategory_2
		End Get
		Set
			If ((Me._spellcategory_2 = value)  _
						= false) Then
				Me.Onspellcategory_2Changing(value)
				Me.SendPropertyChanging
				Me._spellcategory_2 = value
				Me.SendPropertyChanged("spellcategory_2")
				Me.Onspellcategory_2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spellcategorycooldown_2", DbType:="Int NOT NULL")>  _
	Public Property spellcategorycooldown_2() As Integer
		Get
			Return Me._spellcategorycooldown_2
		End Get
		Set
			If ((Me._spellcategorycooldown_2 = value)  _
						= false) Then
				Me.Onspellcategorycooldown_2Changing(value)
				Me.SendPropertyChanging
				Me._spellcategorycooldown_2 = value
				Me.SendPropertyChanged("spellcategorycooldown_2")
				Me.Onspellcategorycooldown_2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spellid_3", DbType:="Int NOT NULL")>  _
	Public Property spellid_3() As Integer
		Get
			Return Me._spellid_3
		End Get
		Set
			If ((Me._spellid_3 = value)  _
						= false) Then
				Me.Onspellid_3Changing(value)
				Me.SendPropertyChanging
				Me._spellid_3 = value
				Me.SendPropertyChanged("spellid_3")
				Me.Onspellid_3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spelltrigger_3", DbType:="TinyInt NOT NULL")>  _
	Public Property spelltrigger_3() As Byte
		Get
			Return Me._spelltrigger_3
		End Get
		Set
			If ((Me._spelltrigger_3 = value)  _
						= false) Then
				Me.Onspelltrigger_3Changing(value)
				Me.SendPropertyChanging
				Me._spelltrigger_3 = value
				Me.SendPropertyChanged("spelltrigger_3")
				Me.Onspelltrigger_3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spellcharges_3", DbType:="SmallInt NOT NULL")>  _
	Public Property spellcharges_3() As Short
		Get
			Return Me._spellcharges_3
		End Get
		Set
			If ((Me._spellcharges_3 = value)  _
						= false) Then
				Me.Onspellcharges_3Changing(value)
				Me.SendPropertyChanging
				Me._spellcharges_3 = value
				Me.SendPropertyChanged("spellcharges_3")
				Me.Onspellcharges_3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spellppmRate_3", DbType:="Real NOT NULL")>  _
	Public Property spellppmRate_3() As Single
		Get
			Return Me._spellppmRate_3
		End Get
		Set
			If ((Me._spellppmRate_3 = value)  _
						= false) Then
				Me.OnspellppmRate_3Changing(value)
				Me.SendPropertyChanging
				Me._spellppmRate_3 = value
				Me.SendPropertyChanged("spellppmRate_3")
				Me.OnspellppmRate_3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spellcooldown_3", DbType:="Int NOT NULL")>  _
	Public Property spellcooldown_3() As Integer
		Get
			Return Me._spellcooldown_3
		End Get
		Set
			If ((Me._spellcooldown_3 = value)  _
						= false) Then
				Me.Onspellcooldown_3Changing(value)
				Me.SendPropertyChanging
				Me._spellcooldown_3 = value
				Me.SendPropertyChanged("spellcooldown_3")
				Me.Onspellcooldown_3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spellcategory_3", DbType:="SmallInt NOT NULL")>  _
	Public Property spellcategory_3() As Short
		Get
			Return Me._spellcategory_3
		End Get
		Set
			If ((Me._spellcategory_3 = value)  _
						= false) Then
				Me.Onspellcategory_3Changing(value)
				Me.SendPropertyChanging
				Me._spellcategory_3 = value
				Me.SendPropertyChanged("spellcategory_3")
				Me.Onspellcategory_3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spellcategorycooldown_3", DbType:="Int NOT NULL")>  _
	Public Property spellcategorycooldown_3() As Integer
		Get
			Return Me._spellcategorycooldown_3
		End Get
		Set
			If ((Me._spellcategorycooldown_3 = value)  _
						= false) Then
				Me.Onspellcategorycooldown_3Changing(value)
				Me.SendPropertyChanging
				Me._spellcategorycooldown_3 = value
				Me.SendPropertyChanged("spellcategorycooldown_3")
				Me.Onspellcategorycooldown_3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spellid_4", DbType:="Int NOT NULL")>  _
	Public Property spellid_4() As Integer
		Get
			Return Me._spellid_4
		End Get
		Set
			If ((Me._spellid_4 = value)  _
						= false) Then
				Me.Onspellid_4Changing(value)
				Me.SendPropertyChanging
				Me._spellid_4 = value
				Me.SendPropertyChanged("spellid_4")
				Me.Onspellid_4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spelltrigger_4", DbType:="TinyInt NOT NULL")>  _
	Public Property spelltrigger_4() As Byte
		Get
			Return Me._spelltrigger_4
		End Get
		Set
			If ((Me._spelltrigger_4 = value)  _
						= false) Then
				Me.Onspelltrigger_4Changing(value)
				Me.SendPropertyChanging
				Me._spelltrigger_4 = value
				Me.SendPropertyChanged("spelltrigger_4")
				Me.Onspelltrigger_4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spellcharges_4", DbType:="SmallInt NOT NULL")>  _
	Public Property spellcharges_4() As Short
		Get
			Return Me._spellcharges_4
		End Get
		Set
			If ((Me._spellcharges_4 = value)  _
						= false) Then
				Me.Onspellcharges_4Changing(value)
				Me.SendPropertyChanging
				Me._spellcharges_4 = value
				Me.SendPropertyChanged("spellcharges_4")
				Me.Onspellcharges_4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spellppmRate_4", DbType:="Real NOT NULL")>  _
	Public Property spellppmRate_4() As Single
		Get
			Return Me._spellppmRate_4
		End Get
		Set
			If ((Me._spellppmRate_4 = value)  _
						= false) Then
				Me.OnspellppmRate_4Changing(value)
				Me.SendPropertyChanging
				Me._spellppmRate_4 = value
				Me.SendPropertyChanged("spellppmRate_4")
				Me.OnspellppmRate_4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spellcooldown_4", DbType:="Int NOT NULL")>  _
	Public Property spellcooldown_4() As Integer
		Get
			Return Me._spellcooldown_4
		End Get
		Set
			If ((Me._spellcooldown_4 = value)  _
						= false) Then
				Me.Onspellcooldown_4Changing(value)
				Me.SendPropertyChanging
				Me._spellcooldown_4 = value
				Me.SendPropertyChanged("spellcooldown_4")
				Me.Onspellcooldown_4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spellcategory_4", DbType:="SmallInt NOT NULL")>  _
	Public Property spellcategory_4() As Short
		Get
			Return Me._spellcategory_4
		End Get
		Set
			If ((Me._spellcategory_4 = value)  _
						= false) Then
				Me.Onspellcategory_4Changing(value)
				Me.SendPropertyChanging
				Me._spellcategory_4 = value
				Me.SendPropertyChanged("spellcategory_4")
				Me.Onspellcategory_4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spellcategorycooldown_4", DbType:="Int NOT NULL")>  _
	Public Property spellcategorycooldown_4() As Integer
		Get
			Return Me._spellcategorycooldown_4
		End Get
		Set
			If ((Me._spellcategorycooldown_4 = value)  _
						= false) Then
				Me.Onspellcategorycooldown_4Changing(value)
				Me.SendPropertyChanging
				Me._spellcategorycooldown_4 = value
				Me.SendPropertyChanged("spellcategorycooldown_4")
				Me.Onspellcategorycooldown_4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spellid_5", DbType:="Int NOT NULL")>  _
	Public Property spellid_5() As Integer
		Get
			Return Me._spellid_5
		End Get
		Set
			If ((Me._spellid_5 = value)  _
						= false) Then
				Me.Onspellid_5Changing(value)
				Me.SendPropertyChanging
				Me._spellid_5 = value
				Me.SendPropertyChanged("spellid_5")
				Me.Onspellid_5Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spelltrigger_5", DbType:="TinyInt NOT NULL")>  _
	Public Property spelltrigger_5() As Byte
		Get
			Return Me._spelltrigger_5
		End Get
		Set
			If ((Me._spelltrigger_5 = value)  _
						= false) Then
				Me.Onspelltrigger_5Changing(value)
				Me.SendPropertyChanging
				Me._spelltrigger_5 = value
				Me.SendPropertyChanged("spelltrigger_5")
				Me.Onspelltrigger_5Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spellcharges_5", DbType:="SmallInt NOT NULL")>  _
	Public Property spellcharges_5() As Short
		Get
			Return Me._spellcharges_5
		End Get
		Set
			If ((Me._spellcharges_5 = value)  _
						= false) Then
				Me.Onspellcharges_5Changing(value)
				Me.SendPropertyChanging
				Me._spellcharges_5 = value
				Me.SendPropertyChanged("spellcharges_5")
				Me.Onspellcharges_5Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spellppmRate_5", DbType:="Real NOT NULL")>  _
	Public Property spellppmRate_5() As Single
		Get
			Return Me._spellppmRate_5
		End Get
		Set
			If ((Me._spellppmRate_5 = value)  _
						= false) Then
				Me.OnspellppmRate_5Changing(value)
				Me.SendPropertyChanging
				Me._spellppmRate_5 = value
				Me.SendPropertyChanged("spellppmRate_5")
				Me.OnspellppmRate_5Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spellcooldown_5", DbType:="Int NOT NULL")>  _
	Public Property spellcooldown_5() As Integer
		Get
			Return Me._spellcooldown_5
		End Get
		Set
			If ((Me._spellcooldown_5 = value)  _
						= false) Then
				Me.Onspellcooldown_5Changing(value)
				Me.SendPropertyChanging
				Me._spellcooldown_5 = value
				Me.SendPropertyChanged("spellcooldown_5")
				Me.Onspellcooldown_5Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spellcategory_5", DbType:="SmallInt NOT NULL")>  _
	Public Property spellcategory_5() As Short
		Get
			Return Me._spellcategory_5
		End Get
		Set
			If ((Me._spellcategory_5 = value)  _
						= false) Then
				Me.Onspellcategory_5Changing(value)
				Me.SendPropertyChanging
				Me._spellcategory_5 = value
				Me.SendPropertyChanged("spellcategory_5")
				Me.Onspellcategory_5Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spellcategorycooldown_5", DbType:="Int NOT NULL")>  _
	Public Property spellcategorycooldown_5() As Integer
		Get
			Return Me._spellcategorycooldown_5
		End Get
		Set
			If ((Me._spellcategorycooldown_5 = value)  _
						= false) Then
				Me.Onspellcategorycooldown_5Changing(value)
				Me.SendPropertyChanging
				Me._spellcategorycooldown_5 = value
				Me.SendPropertyChanged("spellcategorycooldown_5")
				Me.Onspellcategorycooldown_5Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_bonding", DbType:="TinyInt NOT NULL")>  _
	Public Property bonding() As Byte
		Get
			Return Me._bonding
		End Get
		Set
			If ((Me._bonding = value)  _
						= false) Then
				Me.OnbondingChanging(value)
				Me.SendPropertyChanging
				Me._bonding = value
				Me.SendPropertyChanged("bonding")
				Me.OnbondingChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_description", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me.OndescriptionChanging(value)
				Me.SendPropertyChanging
				Me._description = value
				Me.SendPropertyChanged("description")
				Me.OndescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_PageText", DbType:="Int NOT NULL")>  _
	Public Property PageText() As Integer
		Get
			Return Me._PageText
		End Get
		Set
			If ((Me._PageText = value)  _
						= false) Then
				Me.OnPageTextChanging(value)
				Me.SendPropertyChanging
				Me._PageText = value
				Me.SendPropertyChanged("PageText")
				Me.OnPageTextChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_LanguageID", DbType:="TinyInt NOT NULL")>  _
	Public Property LanguageID() As Byte
		Get
			Return Me._LanguageID
		End Get
		Set
			If ((Me._LanguageID = value)  _
						= false) Then
				Me.OnLanguageIDChanging(value)
				Me.SendPropertyChanging
				Me._LanguageID = value
				Me.SendPropertyChanged("LanguageID")
				Me.OnLanguageIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_PageMaterial", DbType:="TinyInt NOT NULL")>  _
	Public Property PageMaterial() As Byte
		Get
			Return Me._PageMaterial
		End Get
		Set
			If ((Me._PageMaterial = value)  _
						= false) Then
				Me.OnPageMaterialChanging(value)
				Me.SendPropertyChanging
				Me._PageMaterial = value
				Me.SendPropertyChanged("PageMaterial")
				Me.OnPageMaterialChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_startquest", DbType:="Int NOT NULL")>  _
	Public Property startquest() As Integer
		Get
			Return Me._startquest
		End Get
		Set
			If ((Me._startquest = value)  _
						= false) Then
				Me.OnstartquestChanging(value)
				Me.SendPropertyChanging
				Me._startquest = value
				Me.SendPropertyChanged("startquest")
				Me.OnstartquestChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_lockid", DbType:="Int NOT NULL")>  _
	Public Property lockid() As Integer
		Get
			Return Me._lockid
		End Get
		Set
			If ((Me._lockid = value)  _
						= false) Then
				Me.OnlockidChanging(value)
				Me.SendPropertyChanging
				Me._lockid = value
				Me.SendPropertyChanged("lockid")
				Me.OnlockidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Material", DbType:="SmallInt NOT NULL")>  _
	Public Property Material() As Short
		Get
			Return Me._Material
		End Get
		Set
			If ((Me._Material = value)  _
						= false) Then
				Me.OnMaterialChanging(value)
				Me.SendPropertyChanging
				Me._Material = value
				Me.SendPropertyChanged("Material")
				Me.OnMaterialChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_sheath", DbType:="TinyInt NOT NULL")>  _
	Public Property sheath() As Byte
		Get
			Return Me._sheath
		End Get
		Set
			If ((Me._sheath = value)  _
						= false) Then
				Me.OnsheathChanging(value)
				Me.SendPropertyChanging
				Me._sheath = value
				Me.SendPropertyChanged("sheath")
				Me.OnsheathChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RandomProperty", DbType:="Int NOT NULL")>  _
	Public Property RandomProperty() As Integer
		Get
			Return Me._RandomProperty
		End Get
		Set
			If ((Me._RandomProperty = value)  _
						= false) Then
				Me.OnRandomPropertyChanging(value)
				Me.SendPropertyChanging
				Me._RandomProperty = value
				Me.SendPropertyChanged("RandomProperty")
				Me.OnRandomPropertyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RandomSuffix", DbType:="Int NOT NULL")>  _
	Public Property RandomSuffix() As Integer
		Get
			Return Me._RandomSuffix
		End Get
		Set
			If ((Me._RandomSuffix = value)  _
						= false) Then
				Me.OnRandomSuffixChanging(value)
				Me.SendPropertyChanging
				Me._RandomSuffix = value
				Me.SendPropertyChanged("RandomSuffix")
				Me.OnRandomSuffixChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_block", DbType:="Int NOT NULL")>  _
	Public Property block() As Integer
		Get
			Return Me._block
		End Get
		Set
			If ((Me._block = value)  _
						= false) Then
				Me.OnblockChanging(value)
				Me.SendPropertyChanging
				Me._block = value
				Me.SendPropertyChanged("block")
				Me.OnblockChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_itemset", DbType:="Int NOT NULL")>  _
	Public Property itemset() As Integer
		Get
			Return Me._itemset
		End Get
		Set
			If ((Me._itemset = value)  _
						= false) Then
				Me.OnitemsetChanging(value)
				Me.SendPropertyChanging
				Me._itemset = value
				Me.SendPropertyChanged("itemset")
				Me.OnitemsetChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_MaxDurability", DbType:="SmallInt NOT NULL")>  _
	Public Property MaxDurability() As Short
		Get
			Return Me._MaxDurability
		End Get
		Set
			If ((Me._MaxDurability = value)  _
						= false) Then
				Me.OnMaxDurabilityChanging(value)
				Me.SendPropertyChanging
				Me._MaxDurability = value
				Me.SendPropertyChanged("MaxDurability")
				Me.OnMaxDurabilityChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_area", DbType:="Int NOT NULL")>  _
	Public Property area() As Integer
		Get
			Return Me._area
		End Get
		Set
			If ((Me._area = value)  _
						= false) Then
				Me.OnareaChanging(value)
				Me.SendPropertyChanging
				Me._area = value
				Me.SendPropertyChanged("area")
				Me.OnareaChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Map", DbType:="SmallInt NOT NULL")>  _
	Public Property Map() As Short
		Get
			Return Me._Map
		End Get
		Set
			If ((Me._Map = value)  _
						= false) Then
				Me.OnMapChanging(value)
				Me.SendPropertyChanging
				Me._Map = value
				Me.SendPropertyChanged("Map")
				Me.OnMapChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_BagFamily", DbType:="Int NOT NULL")>  _
	Public Property BagFamily() As Integer
		Get
			Return Me._BagFamily
		End Get
		Set
			If ((Me._BagFamily = value)  _
						= false) Then
				Me.OnBagFamilyChanging(value)
				Me.SendPropertyChanging
				Me._BagFamily = value
				Me.SendPropertyChanged("BagFamily")
				Me.OnBagFamilyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_TotemCategory", DbType:="Int NOT NULL")>  _
	Public Property TotemCategory() As Integer
		Get
			Return Me._TotemCategory
		End Get
		Set
			If ((Me._TotemCategory = value)  _
						= false) Then
				Me.OnTotemCategoryChanging(value)
				Me.SendPropertyChanging
				Me._TotemCategory = value
				Me.SendPropertyChanged("TotemCategory")
				Me.OnTotemCategoryChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_socketColor_1", DbType:="SmallInt NOT NULL")>  _
	Public Property socketColor_1() As Short
		Get
			Return Me._socketColor_1
		End Get
		Set
			If ((Me._socketColor_1 = value)  _
						= false) Then
				Me.OnsocketColor_1Changing(value)
				Me.SendPropertyChanging
				Me._socketColor_1 = value
				Me.SendPropertyChanged("socketColor_1")
				Me.OnsocketColor_1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_socketContent_1", DbType:="Int NOT NULL")>  _
	Public Property socketContent_1() As Integer
		Get
			Return Me._socketContent_1
		End Get
		Set
			If ((Me._socketContent_1 = value)  _
						= false) Then
				Me.OnsocketContent_1Changing(value)
				Me.SendPropertyChanging
				Me._socketContent_1 = value
				Me.SendPropertyChanged("socketContent_1")
				Me.OnsocketContent_1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_socketColor_2", DbType:="SmallInt NOT NULL")>  _
	Public Property socketColor_2() As Short
		Get
			Return Me._socketColor_2
		End Get
		Set
			If ((Me._socketColor_2 = value)  _
						= false) Then
				Me.OnsocketColor_2Changing(value)
				Me.SendPropertyChanging
				Me._socketColor_2 = value
				Me.SendPropertyChanged("socketColor_2")
				Me.OnsocketColor_2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_socketContent_2", DbType:="Int NOT NULL")>  _
	Public Property socketContent_2() As Integer
		Get
			Return Me._socketContent_2
		End Get
		Set
			If ((Me._socketContent_2 = value)  _
						= false) Then
				Me.OnsocketContent_2Changing(value)
				Me.SendPropertyChanging
				Me._socketContent_2 = value
				Me.SendPropertyChanged("socketContent_2")
				Me.OnsocketContent_2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_socketColor_3", DbType:="SmallInt NOT NULL")>  _
	Public Property socketColor_3() As Short
		Get
			Return Me._socketColor_3
		End Get
		Set
			If ((Me._socketColor_3 = value)  _
						= false) Then
				Me.OnsocketColor_3Changing(value)
				Me.SendPropertyChanging
				Me._socketColor_3 = value
				Me.SendPropertyChanged("socketColor_3")
				Me.OnsocketColor_3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_socketContent_3", DbType:="Int NOT NULL")>  _
	Public Property socketContent_3() As Integer
		Get
			Return Me._socketContent_3
		End Get
		Set
			If ((Me._socketContent_3 = value)  _
						= false) Then
				Me.OnsocketContent_3Changing(value)
				Me.SendPropertyChanging
				Me._socketContent_3 = value
				Me.SendPropertyChanged("socketContent_3")
				Me.OnsocketContent_3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_socketBonus", DbType:="Int NOT NULL")>  _
	Public Property socketBonus() As Integer
		Get
			Return Me._socketBonus
		End Get
		Set
			If ((Me._socketBonus = value)  _
						= false) Then
				Me.OnsocketBonusChanging(value)
				Me.SendPropertyChanging
				Me._socketBonus = value
				Me.SendPropertyChanged("socketBonus")
				Me.OnsocketBonusChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_GemProperties", DbType:="Int NOT NULL")>  _
	Public Property GemProperties() As Integer
		Get
			Return Me._GemProperties
		End Get
		Set
			If ((Me._GemProperties = value)  _
						= false) Then
				Me.OnGemPropertiesChanging(value)
				Me.SendPropertyChanging
				Me._GemProperties = value
				Me.SendPropertyChanged("GemProperties")
				Me.OnGemPropertiesChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RequiredDisenchantSkill", DbType:="SmallInt NOT NULL")>  _
	Public Property RequiredDisenchantSkill() As Short
		Get
			Return Me._RequiredDisenchantSkill
		End Get
		Set
			If ((Me._RequiredDisenchantSkill = value)  _
						= false) Then
				Me.OnRequiredDisenchantSkillChanging(value)
				Me.SendPropertyChanging
				Me._RequiredDisenchantSkill = value
				Me.SendPropertyChanged("RequiredDisenchantSkill")
				Me.OnRequiredDisenchantSkillChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ArmorDamageModifier", DbType:="Real NOT NULL")>  _
	Public Property ArmorDamageModifier() As Single
		Get
			Return Me._ArmorDamageModifier
		End Get
		Set
			If ((Me._ArmorDamageModifier = value)  _
						= false) Then
				Me.OnArmorDamageModifierChanging(value)
				Me.SendPropertyChanging
				Me._ArmorDamageModifier = value
				Me.SendPropertyChanged("ArmorDamageModifier")
				Me.OnArmorDamageModifierChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Duration", DbType:="Int NOT NULL")>  _
	Public Property Duration() As Integer
		Get
			Return Me._Duration
		End Get
		Set
			If ((Me._Duration = value)  _
						= false) Then
				Me.OnDurationChanging(value)
				Me.SendPropertyChanging
				Me._Duration = value
				Me.SendPropertyChanged("Duration")
				Me.OnDurationChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ItemLimitCategory", DbType:="SmallInt NOT NULL")>  _
	Public Property ItemLimitCategory() As Short
		Get
			Return Me._ItemLimitCategory
		End Get
		Set
			If ((Me._ItemLimitCategory = value)  _
						= false) Then
				Me.OnItemLimitCategoryChanging(value)
				Me.SendPropertyChanging
				Me._ItemLimitCategory = value
				Me.SendPropertyChanged("ItemLimitCategory")
				Me.OnItemLimitCategoryChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_HolidayId", DbType:="Int NOT NULL")>  _
	Public Property HolidayId() As Integer
		Get
			Return Me._HolidayId
		End Get
		Set
			If ((Me._HolidayId = value)  _
						= false) Then
				Me.OnHolidayIdChanging(value)
				Me.SendPropertyChanging
				Me._HolidayId = value
				Me.SendPropertyChanged("HolidayId")
				Me.OnHolidayIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ScriptName", DbType:="VarChar(64) NOT NULL", CanBeNull:=false)>  _
	Public Property ScriptName() As String
		Get
			Return Me._ScriptName
		End Get
		Set
			If (String.Equals(Me._ScriptName, value) = false) Then
				Me.OnScriptNameChanging(value)
				Me.SendPropertyChanging
				Me._ScriptName = value
				Me.SendPropertyChanged("ScriptName")
				Me.OnScriptNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_DisenchantID", DbType:="Int NOT NULL")>  _
	Public Property DisenchantID() As Integer
		Get
			Return Me._DisenchantID
		End Get
		Set
			If ((Me._DisenchantID = value)  _
						= false) Then
				Me.OnDisenchantIDChanging(value)
				Me.SendPropertyChanging
				Me._DisenchantID = value
				Me.SendPropertyChanged("DisenchantID")
				Me.OnDisenchantIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_FoodType", DbType:="TinyInt NOT NULL")>  _
	Public Property FoodType() As Byte
		Get
			Return Me._FoodType
		End Get
		Set
			If ((Me._FoodType = value)  _
						= false) Then
				Me.OnFoodTypeChanging(value)
				Me.SendPropertyChanging
				Me._FoodType = value
				Me.SendPropertyChanged("FoodType")
				Me.OnFoodTypeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_minMoneyLoot", DbType:="Int NOT NULL")>  _
	Public Property minMoneyLoot() As Integer
		Get
			Return Me._minMoneyLoot
		End Get
		Set
			If ((Me._minMoneyLoot = value)  _
						= false) Then
				Me.OnminMoneyLootChanging(value)
				Me.SendPropertyChanging
				Me._minMoneyLoot = value
				Me.SendPropertyChanged("minMoneyLoot")
				Me.OnminMoneyLootChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_maxMoneyLoot", DbType:="Int NOT NULL")>  _
	Public Property maxMoneyLoot() As Integer
		Get
			Return Me._maxMoneyLoot
		End Get
		Set
			If ((Me._maxMoneyLoot = value)  _
						= false) Then
				Me.OnmaxMoneyLootChanging(value)
				Me.SendPropertyChanging
				Me._maxMoneyLoot = value
				Me.SendPropertyChanged("maxMoneyLoot")
				Me.OnmaxMoneyLootChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ExtraFlags", DbType:="TinyInt NOT NULL")>  _
	Public Property ExtraFlags() As Byte
		Get
			Return Me._ExtraFlags
		End Get
		Set
			If ((Me._ExtraFlags = value)  _
						= false) Then
				Me.OnExtraFlagsChanging(value)
				Me.SendPropertyChanging
				Me._ExtraFlags = value
				Me.SendPropertyChanged("ExtraFlags")
				Me.OnExtraFlagsChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.quest_template")>  _
Partial Public Class quest_template
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _entry As Integer
	
	Private _Method As Byte
	
	Private _ZoneOrSort As Short
	
	Private _SkillOrClass As Short
	
	Private _MinLevel As Byte
	
	Private _QuestLevel As Short
	
	Private _Type As Short
	
	Private _RequiredRaces As Short
	
	Private _RequiredSkillValue As Short
	
	Private _RepObjectiveFaction As Short
	
	Private _RepObjectiveValue As Integer
	
	Private _RequiredMinRepFaction As Short
	
	Private _RequiredMinRepValue As Integer
	
	Private _RequiredMaxRepFaction As Short
	
	Private _RequiredMaxRepValue As Integer
	
	Private _SuggestedPlayers As Byte
	
	Private _LimitTime As Integer
	
	Private _QuestFlags As Integer
	
	Private _SpecialFlags As Byte
	
	Private _CharTitleId As Byte
	
	Private _PlayersSlain As Byte
	
	Private _BonusTalents As Byte
	
	Private _PrevQuestId As Integer
	
	Private _NextQuestId As Integer
	
	Private _ExclusiveGroup As Integer
	
	Private _NextQuestInChain As Integer
	
	Private _RewXPId As Byte
	
	Private _SrcItemId As Integer
	
	Private _SrcItemCount As Byte
	
	Private _SrcSpell As Integer
	
	Private _Title As String
	
	Private _Details As String
	
	Private _Objectives As String
	
	Private _OfferRewardText As String
	
	Private _RequestItemsText As String
	
	Private _EndText As String
	
	Private _CompletedText As String
	
	Private _ObjectiveText1 As String
	
	Private _ObjectiveText2 As String
	
	Private _ObjectiveText3 As String
	
	Private _ObjectiveText4 As String
	
	Private _ReqItemId1 As Integer
	
	Private _ReqItemId2 As Integer
	
	Private _ReqItemId3 As Integer
	
	Private _ReqItemId4 As Integer
	
	Private _ReqItemId5 As Integer
	
	Private _ReqItemId6 As Integer
	
	Private _ReqItemCount1 As Short
	
	Private _ReqItemCount2 As Short
	
	Private _ReqItemCount3 As Short
	
	Private _ReqItemCount4 As Short
	
	Private _ReqItemCount5 As Short
	
	Private _ReqItemCount6 As Short
	
	Private _ReqSourceId1 As Integer
	
	Private _ReqSourceId2 As Integer
	
	Private _ReqSourceId3 As Integer
	
	Private _ReqSourceId4 As Integer
	
	Private _ReqSourceCount1 As Short
	
	Private _ReqSourceCount2 As Short
	
	Private _ReqSourceCount3 As Short
	
	Private _ReqSourceCount4 As Short
	
	Private _ReqCreatureOrGOId1 As Integer
	
	Private _ReqCreatureOrGOId2 As Integer
	
	Private _ReqCreatureOrGOId3 As Integer
	
	Private _ReqCreatureOrGOId4 As Integer
	
	Private _ReqCreatureOrGOCount1 As Short
	
	Private _ReqCreatureOrGOCount2 As Short
	
	Private _ReqCreatureOrGOCount3 As Short
	
	Private _ReqCreatureOrGOCount4 As Short
	
	Private _ReqSpellCast1 As Integer
	
	Private _ReqSpellCast2 As Integer
	
	Private _ReqSpellCast3 As Integer
	
	Private _ReqSpellCast4 As Integer
	
	Private _RewChoiceItemId1 As Integer
	
	Private _RewChoiceItemId2 As Integer
	
	Private _RewChoiceItemId3 As Integer
	
	Private _RewChoiceItemId4 As Integer
	
	Private _RewChoiceItemId5 As Integer
	
	Private _RewChoiceItemId6 As Integer
	
	Private _RewChoiceItemCount1 As Short
	
	Private _RewChoiceItemCount2 As Short
	
	Private _RewChoiceItemCount3 As Short
	
	Private _RewChoiceItemCount4 As Short
	
	Private _RewChoiceItemCount5 As Short
	
	Private _RewChoiceItemCount6 As Short
	
	Private _RewItemId1 As Integer
	
	Private _RewItemId2 As Integer
	
	Private _RewItemId3 As Integer
	
	Private _RewItemId4 As Integer
	
	Private _RewItemCount1 As Short
	
	Private _RewItemCount2 As Short
	
	Private _RewItemCount3 As Short
	
	Private _RewItemCount4 As Short
	
	Private _RewRepFaction1 As Short
	
	Private _RewRepFaction2 As Short
	
	Private _RewRepFaction3 As Short
	
	Private _RewRepFaction4 As Short
	
	Private _RewRepFaction5 As Short
	
	Private _RewRepValueId1 As Short
	
	Private _RewRepValueId2 As Short
	
	Private _RewRepValueId3 As Short
	
	Private _RewRepValueId4 As Short
	
	Private _RewRepValueId5 As Short
	
	Private _RewRepValue1 As Integer
	
	Private _RewRepValue2 As Integer
	
	Private _RewRepValue3 As Integer
	
	Private _RewRepValue4 As Integer
	
	Private _RewRepValue5 As Integer
	
	Private _RewHonorAddition As Integer
	
	Private _RewHonorMultiplier As Single
	
	Private _RewOrReqMoney As Integer
	
	Private _RewMoneyMaxLevel As Integer
	
	Private _RewSpell As Integer
	
	Private _RewSpellCast As Integer
	
	Private _RewMailTemplateId As Integer
	
	Private _RewMailDelaySecs As Integer
	
	Private _PointMapId As Short
	
	Private _PointX As Single
	
	Private _PointY As Single
	
	Private _PointOpt As Integer
	
	Private _DetailsEmote1 As Short
	
	Private _DetailsEmote2 As Short
	
	Private _DetailsEmote3 As Short
	
	Private _DetailsEmote4 As Short
	
	Private _DetailsEmoteDelay1 As Integer
	
	Private _DetailsEmoteDelay2 As Integer
	
	Private _DetailsEmoteDelay3 As Integer
	
	Private _DetailsEmoteDelay4 As Integer
	
	Private _IncompleteEmote As Short
	
	Private _CompleteEmote As Short
	
	Private _OfferRewardEmote1 As Short
	
	Private _OfferRewardEmote2 As Short
	
	Private _OfferRewardEmote3 As Short
	
	Private _OfferRewardEmote4 As Short
	
	Private _OfferRewardEmoteDelay1 As Integer
	
	Private _OfferRewardEmoteDelay2 As Integer
	
	Private _OfferRewardEmoteDelay3 As Integer
	
	Private _OfferRewardEmoteDelay4 As Integer
	
	Private _StartScript As Integer
	
	Private _CompleteScript As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnentryChanging(value As Integer)
    End Sub
    Partial Private Sub OnentryChanged()
    End Sub
    Partial Private Sub OnMethodChanging(value As Byte)
    End Sub
    Partial Private Sub OnMethodChanged()
    End Sub
    Partial Private Sub OnZoneOrSortChanging(value As Short)
    End Sub
    Partial Private Sub OnZoneOrSortChanged()
    End Sub
    Partial Private Sub OnSkillOrClassChanging(value As Short)
    End Sub
    Partial Private Sub OnSkillOrClassChanged()
    End Sub
    Partial Private Sub OnMinLevelChanging(value As Byte)
    End Sub
    Partial Private Sub OnMinLevelChanged()
    End Sub
    Partial Private Sub OnQuestLevelChanging(value As Short)
    End Sub
    Partial Private Sub OnQuestLevelChanged()
    End Sub
    Partial Private Sub OnTypeChanging(value As Short)
    End Sub
    Partial Private Sub OnTypeChanged()
    End Sub
    Partial Private Sub OnRequiredRacesChanging(value As Short)
    End Sub
    Partial Private Sub OnRequiredRacesChanged()
    End Sub
    Partial Private Sub OnRequiredSkillValueChanging(value As Short)
    End Sub
    Partial Private Sub OnRequiredSkillValueChanged()
    End Sub
    Partial Private Sub OnRepObjectiveFactionChanging(value As Short)
    End Sub
    Partial Private Sub OnRepObjectiveFactionChanged()
    End Sub
    Partial Private Sub OnRepObjectiveValueChanging(value As Integer)
    End Sub
    Partial Private Sub OnRepObjectiveValueChanged()
    End Sub
    Partial Private Sub OnRequiredMinRepFactionChanging(value As Short)
    End Sub
    Partial Private Sub OnRequiredMinRepFactionChanged()
    End Sub
    Partial Private Sub OnRequiredMinRepValueChanging(value As Integer)
    End Sub
    Partial Private Sub OnRequiredMinRepValueChanged()
    End Sub
    Partial Private Sub OnRequiredMaxRepFactionChanging(value As Short)
    End Sub
    Partial Private Sub OnRequiredMaxRepFactionChanged()
    End Sub
    Partial Private Sub OnRequiredMaxRepValueChanging(value As Integer)
    End Sub
    Partial Private Sub OnRequiredMaxRepValueChanged()
    End Sub
    Partial Private Sub OnSuggestedPlayersChanging(value As Byte)
    End Sub
    Partial Private Sub OnSuggestedPlayersChanged()
    End Sub
    Partial Private Sub OnLimitTimeChanging(value As Integer)
    End Sub
    Partial Private Sub OnLimitTimeChanged()
    End Sub
    Partial Private Sub OnQuestFlagsChanging(value As Integer)
    End Sub
    Partial Private Sub OnQuestFlagsChanged()
    End Sub
    Partial Private Sub OnSpecialFlagsChanging(value As Byte)
    End Sub
    Partial Private Sub OnSpecialFlagsChanged()
    End Sub
    Partial Private Sub OnCharTitleIdChanging(value As Byte)
    End Sub
    Partial Private Sub OnCharTitleIdChanged()
    End Sub
    Partial Private Sub OnPlayersSlainChanging(value As Byte)
    End Sub
    Partial Private Sub OnPlayersSlainChanged()
    End Sub
    Partial Private Sub OnBonusTalentsChanging(value As Byte)
    End Sub
    Partial Private Sub OnBonusTalentsChanged()
    End Sub
    Partial Private Sub OnPrevQuestIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnPrevQuestIdChanged()
    End Sub
    Partial Private Sub OnNextQuestIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnNextQuestIdChanged()
    End Sub
    Partial Private Sub OnExclusiveGroupChanging(value As Integer)
    End Sub
    Partial Private Sub OnExclusiveGroupChanged()
    End Sub
    Partial Private Sub OnNextQuestInChainChanging(value As Integer)
    End Sub
    Partial Private Sub OnNextQuestInChainChanged()
    End Sub
    Partial Private Sub OnRewXPIdChanging(value As Byte)
    End Sub
    Partial Private Sub OnRewXPIdChanged()
    End Sub
    Partial Private Sub OnSrcItemIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnSrcItemIdChanged()
    End Sub
    Partial Private Sub OnSrcItemCountChanging(value As Byte)
    End Sub
    Partial Private Sub OnSrcItemCountChanged()
    End Sub
    Partial Private Sub OnSrcSpellChanging(value As Integer)
    End Sub
    Partial Private Sub OnSrcSpellChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnDetailsChanging(value As String)
    End Sub
    Partial Private Sub OnDetailsChanged()
    End Sub
    Partial Private Sub OnObjectivesChanging(value As String)
    End Sub
    Partial Private Sub OnObjectivesChanged()
    End Sub
    Partial Private Sub OnOfferRewardTextChanging(value As String)
    End Sub
    Partial Private Sub OnOfferRewardTextChanged()
    End Sub
    Partial Private Sub OnRequestItemsTextChanging(value As String)
    End Sub
    Partial Private Sub OnRequestItemsTextChanged()
    End Sub
    Partial Private Sub OnEndTextChanging(value As String)
    End Sub
    Partial Private Sub OnEndTextChanged()
    End Sub
    Partial Private Sub OnCompletedTextChanging(value As String)
    End Sub
    Partial Private Sub OnCompletedTextChanged()
    End Sub
    Partial Private Sub OnObjectiveText1Changing(value As String)
    End Sub
    Partial Private Sub OnObjectiveText1Changed()
    End Sub
    Partial Private Sub OnObjectiveText2Changing(value As String)
    End Sub
    Partial Private Sub OnObjectiveText2Changed()
    End Sub
    Partial Private Sub OnObjectiveText3Changing(value As String)
    End Sub
    Partial Private Sub OnObjectiveText3Changed()
    End Sub
    Partial Private Sub OnObjectiveText4Changing(value As String)
    End Sub
    Partial Private Sub OnObjectiveText4Changed()
    End Sub
    Partial Private Sub OnReqItemId1Changing(value As Integer)
    End Sub
    Partial Private Sub OnReqItemId1Changed()
    End Sub
    Partial Private Sub OnReqItemId2Changing(value As Integer)
    End Sub
    Partial Private Sub OnReqItemId2Changed()
    End Sub
    Partial Private Sub OnReqItemId3Changing(value As Integer)
    End Sub
    Partial Private Sub OnReqItemId3Changed()
    End Sub
    Partial Private Sub OnReqItemId4Changing(value As Integer)
    End Sub
    Partial Private Sub OnReqItemId4Changed()
    End Sub
    Partial Private Sub OnReqItemId5Changing(value As Integer)
    End Sub
    Partial Private Sub OnReqItemId5Changed()
    End Sub
    Partial Private Sub OnReqItemId6Changing(value As Integer)
    End Sub
    Partial Private Sub OnReqItemId6Changed()
    End Sub
    Partial Private Sub OnReqItemCount1Changing(value As Short)
    End Sub
    Partial Private Sub OnReqItemCount1Changed()
    End Sub
    Partial Private Sub OnReqItemCount2Changing(value As Short)
    End Sub
    Partial Private Sub OnReqItemCount2Changed()
    End Sub
    Partial Private Sub OnReqItemCount3Changing(value As Short)
    End Sub
    Partial Private Sub OnReqItemCount3Changed()
    End Sub
    Partial Private Sub OnReqItemCount4Changing(value As Short)
    End Sub
    Partial Private Sub OnReqItemCount4Changed()
    End Sub
    Partial Private Sub OnReqItemCount5Changing(value As Short)
    End Sub
    Partial Private Sub OnReqItemCount5Changed()
    End Sub
    Partial Private Sub OnReqItemCount6Changing(value As Short)
    End Sub
    Partial Private Sub OnReqItemCount6Changed()
    End Sub
    Partial Private Sub OnReqSourceId1Changing(value As Integer)
    End Sub
    Partial Private Sub OnReqSourceId1Changed()
    End Sub
    Partial Private Sub OnReqSourceId2Changing(value As Integer)
    End Sub
    Partial Private Sub OnReqSourceId2Changed()
    End Sub
    Partial Private Sub OnReqSourceId3Changing(value As Integer)
    End Sub
    Partial Private Sub OnReqSourceId3Changed()
    End Sub
    Partial Private Sub OnReqSourceId4Changing(value As Integer)
    End Sub
    Partial Private Sub OnReqSourceId4Changed()
    End Sub
    Partial Private Sub OnReqSourceCount1Changing(value As Short)
    End Sub
    Partial Private Sub OnReqSourceCount1Changed()
    End Sub
    Partial Private Sub OnReqSourceCount2Changing(value As Short)
    End Sub
    Partial Private Sub OnReqSourceCount2Changed()
    End Sub
    Partial Private Sub OnReqSourceCount3Changing(value As Short)
    End Sub
    Partial Private Sub OnReqSourceCount3Changed()
    End Sub
    Partial Private Sub OnReqSourceCount4Changing(value As Short)
    End Sub
    Partial Private Sub OnReqSourceCount4Changed()
    End Sub
    Partial Private Sub OnReqCreatureOrGOId1Changing(value As Integer)
    End Sub
    Partial Private Sub OnReqCreatureOrGOId1Changed()
    End Sub
    Partial Private Sub OnReqCreatureOrGOId2Changing(value As Integer)
    End Sub
    Partial Private Sub OnReqCreatureOrGOId2Changed()
    End Sub
    Partial Private Sub OnReqCreatureOrGOId3Changing(value As Integer)
    End Sub
    Partial Private Sub OnReqCreatureOrGOId3Changed()
    End Sub
    Partial Private Sub OnReqCreatureOrGOId4Changing(value As Integer)
    End Sub
    Partial Private Sub OnReqCreatureOrGOId4Changed()
    End Sub
    Partial Private Sub OnReqCreatureOrGOCount1Changing(value As Short)
    End Sub
    Partial Private Sub OnReqCreatureOrGOCount1Changed()
    End Sub
    Partial Private Sub OnReqCreatureOrGOCount2Changing(value As Short)
    End Sub
    Partial Private Sub OnReqCreatureOrGOCount2Changed()
    End Sub
    Partial Private Sub OnReqCreatureOrGOCount3Changing(value As Short)
    End Sub
    Partial Private Sub OnReqCreatureOrGOCount3Changed()
    End Sub
    Partial Private Sub OnReqCreatureOrGOCount4Changing(value As Short)
    End Sub
    Partial Private Sub OnReqCreatureOrGOCount4Changed()
    End Sub
    Partial Private Sub OnReqSpellCast1Changing(value As Integer)
    End Sub
    Partial Private Sub OnReqSpellCast1Changed()
    End Sub
    Partial Private Sub OnReqSpellCast2Changing(value As Integer)
    End Sub
    Partial Private Sub OnReqSpellCast2Changed()
    End Sub
    Partial Private Sub OnReqSpellCast3Changing(value As Integer)
    End Sub
    Partial Private Sub OnReqSpellCast3Changed()
    End Sub
    Partial Private Sub OnReqSpellCast4Changing(value As Integer)
    End Sub
    Partial Private Sub OnReqSpellCast4Changed()
    End Sub
    Partial Private Sub OnRewChoiceItemId1Changing(value As Integer)
    End Sub
    Partial Private Sub OnRewChoiceItemId1Changed()
    End Sub
    Partial Private Sub OnRewChoiceItemId2Changing(value As Integer)
    End Sub
    Partial Private Sub OnRewChoiceItemId2Changed()
    End Sub
    Partial Private Sub OnRewChoiceItemId3Changing(value As Integer)
    End Sub
    Partial Private Sub OnRewChoiceItemId3Changed()
    End Sub
    Partial Private Sub OnRewChoiceItemId4Changing(value As Integer)
    End Sub
    Partial Private Sub OnRewChoiceItemId4Changed()
    End Sub
    Partial Private Sub OnRewChoiceItemId5Changing(value As Integer)
    End Sub
    Partial Private Sub OnRewChoiceItemId5Changed()
    End Sub
    Partial Private Sub OnRewChoiceItemId6Changing(value As Integer)
    End Sub
    Partial Private Sub OnRewChoiceItemId6Changed()
    End Sub
    Partial Private Sub OnRewChoiceItemCount1Changing(value As Short)
    End Sub
    Partial Private Sub OnRewChoiceItemCount1Changed()
    End Sub
    Partial Private Sub OnRewChoiceItemCount2Changing(value As Short)
    End Sub
    Partial Private Sub OnRewChoiceItemCount2Changed()
    End Sub
    Partial Private Sub OnRewChoiceItemCount3Changing(value As Short)
    End Sub
    Partial Private Sub OnRewChoiceItemCount3Changed()
    End Sub
    Partial Private Sub OnRewChoiceItemCount4Changing(value As Short)
    End Sub
    Partial Private Sub OnRewChoiceItemCount4Changed()
    End Sub
    Partial Private Sub OnRewChoiceItemCount5Changing(value As Short)
    End Sub
    Partial Private Sub OnRewChoiceItemCount5Changed()
    End Sub
    Partial Private Sub OnRewChoiceItemCount6Changing(value As Short)
    End Sub
    Partial Private Sub OnRewChoiceItemCount6Changed()
    End Sub
    Partial Private Sub OnRewItemId1Changing(value As Integer)
    End Sub
    Partial Private Sub OnRewItemId1Changed()
    End Sub
    Partial Private Sub OnRewItemId2Changing(value As Integer)
    End Sub
    Partial Private Sub OnRewItemId2Changed()
    End Sub
    Partial Private Sub OnRewItemId3Changing(value As Integer)
    End Sub
    Partial Private Sub OnRewItemId3Changed()
    End Sub
    Partial Private Sub OnRewItemId4Changing(value As Integer)
    End Sub
    Partial Private Sub OnRewItemId4Changed()
    End Sub
    Partial Private Sub OnRewItemCount1Changing(value As Short)
    End Sub
    Partial Private Sub OnRewItemCount1Changed()
    End Sub
    Partial Private Sub OnRewItemCount2Changing(value As Short)
    End Sub
    Partial Private Sub OnRewItemCount2Changed()
    End Sub
    Partial Private Sub OnRewItemCount3Changing(value As Short)
    End Sub
    Partial Private Sub OnRewItemCount3Changed()
    End Sub
    Partial Private Sub OnRewItemCount4Changing(value As Short)
    End Sub
    Partial Private Sub OnRewItemCount4Changed()
    End Sub
    Partial Private Sub OnRewRepFaction1Changing(value As Short)
    End Sub
    Partial Private Sub OnRewRepFaction1Changed()
    End Sub
    Partial Private Sub OnRewRepFaction2Changing(value As Short)
    End Sub
    Partial Private Sub OnRewRepFaction2Changed()
    End Sub
    Partial Private Sub OnRewRepFaction3Changing(value As Short)
    End Sub
    Partial Private Sub OnRewRepFaction3Changed()
    End Sub
    Partial Private Sub OnRewRepFaction4Changing(value As Short)
    End Sub
    Partial Private Sub OnRewRepFaction4Changed()
    End Sub
    Partial Private Sub OnRewRepFaction5Changing(value As Short)
    End Sub
    Partial Private Sub OnRewRepFaction5Changed()
    End Sub
    Partial Private Sub OnRewRepValueId1Changing(value As Short)
    End Sub
    Partial Private Sub OnRewRepValueId1Changed()
    End Sub
    Partial Private Sub OnRewRepValueId2Changing(value As Short)
    End Sub
    Partial Private Sub OnRewRepValueId2Changed()
    End Sub
    Partial Private Sub OnRewRepValueId3Changing(value As Short)
    End Sub
    Partial Private Sub OnRewRepValueId3Changed()
    End Sub
    Partial Private Sub OnRewRepValueId4Changing(value As Short)
    End Sub
    Partial Private Sub OnRewRepValueId4Changed()
    End Sub
    Partial Private Sub OnRewRepValueId5Changing(value As Short)
    End Sub
    Partial Private Sub OnRewRepValueId5Changed()
    End Sub
    Partial Private Sub OnRewRepValue1Changing(value As Integer)
    End Sub
    Partial Private Sub OnRewRepValue1Changed()
    End Sub
    Partial Private Sub OnRewRepValue2Changing(value As Integer)
    End Sub
    Partial Private Sub OnRewRepValue2Changed()
    End Sub
    Partial Private Sub OnRewRepValue3Changing(value As Integer)
    End Sub
    Partial Private Sub OnRewRepValue3Changed()
    End Sub
    Partial Private Sub OnRewRepValue4Changing(value As Integer)
    End Sub
    Partial Private Sub OnRewRepValue4Changed()
    End Sub
    Partial Private Sub OnRewRepValue5Changing(value As Integer)
    End Sub
    Partial Private Sub OnRewRepValue5Changed()
    End Sub
    Partial Private Sub OnRewHonorAdditionChanging(value As Integer)
    End Sub
    Partial Private Sub OnRewHonorAdditionChanged()
    End Sub
    Partial Private Sub OnRewHonorMultiplierChanging(value As Single)
    End Sub
    Partial Private Sub OnRewHonorMultiplierChanged()
    End Sub
    Partial Private Sub OnRewOrReqMoneyChanging(value As Integer)
    End Sub
    Partial Private Sub OnRewOrReqMoneyChanged()
    End Sub
    Partial Private Sub OnRewMoneyMaxLevelChanging(value As Integer)
    End Sub
    Partial Private Sub OnRewMoneyMaxLevelChanged()
    End Sub
    Partial Private Sub OnRewSpellChanging(value As Integer)
    End Sub
    Partial Private Sub OnRewSpellChanged()
    End Sub
    Partial Private Sub OnRewSpellCastChanging(value As Integer)
    End Sub
    Partial Private Sub OnRewSpellCastChanged()
    End Sub
    Partial Private Sub OnRewMailTemplateIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnRewMailTemplateIdChanged()
    End Sub
    Partial Private Sub OnRewMailDelaySecsChanging(value As Integer)
    End Sub
    Partial Private Sub OnRewMailDelaySecsChanged()
    End Sub
    Partial Private Sub OnPointMapIdChanging(value As Short)
    End Sub
    Partial Private Sub OnPointMapIdChanged()
    End Sub
    Partial Private Sub OnPointXChanging(value As Single)
    End Sub
    Partial Private Sub OnPointXChanged()
    End Sub
    Partial Private Sub OnPointYChanging(value As Single)
    End Sub
    Partial Private Sub OnPointYChanged()
    End Sub
    Partial Private Sub OnPointOptChanging(value As Integer)
    End Sub
    Partial Private Sub OnPointOptChanged()
    End Sub
    Partial Private Sub OnDetailsEmote1Changing(value As Short)
    End Sub
    Partial Private Sub OnDetailsEmote1Changed()
    End Sub
    Partial Private Sub OnDetailsEmote2Changing(value As Short)
    End Sub
    Partial Private Sub OnDetailsEmote2Changed()
    End Sub
    Partial Private Sub OnDetailsEmote3Changing(value As Short)
    End Sub
    Partial Private Sub OnDetailsEmote3Changed()
    End Sub
    Partial Private Sub OnDetailsEmote4Changing(value As Short)
    End Sub
    Partial Private Sub OnDetailsEmote4Changed()
    End Sub
    Partial Private Sub OnDetailsEmoteDelay1Changing(value As Integer)
    End Sub
    Partial Private Sub OnDetailsEmoteDelay1Changed()
    End Sub
    Partial Private Sub OnDetailsEmoteDelay2Changing(value As Integer)
    End Sub
    Partial Private Sub OnDetailsEmoteDelay2Changed()
    End Sub
    Partial Private Sub OnDetailsEmoteDelay3Changing(value As Integer)
    End Sub
    Partial Private Sub OnDetailsEmoteDelay3Changed()
    End Sub
    Partial Private Sub OnDetailsEmoteDelay4Changing(value As Integer)
    End Sub
    Partial Private Sub OnDetailsEmoteDelay4Changed()
    End Sub
    Partial Private Sub OnIncompleteEmoteChanging(value As Short)
    End Sub
    Partial Private Sub OnIncompleteEmoteChanged()
    End Sub
    Partial Private Sub OnCompleteEmoteChanging(value As Short)
    End Sub
    Partial Private Sub OnCompleteEmoteChanged()
    End Sub
    Partial Private Sub OnOfferRewardEmote1Changing(value As Short)
    End Sub
    Partial Private Sub OnOfferRewardEmote1Changed()
    End Sub
    Partial Private Sub OnOfferRewardEmote2Changing(value As Short)
    End Sub
    Partial Private Sub OnOfferRewardEmote2Changed()
    End Sub
    Partial Private Sub OnOfferRewardEmote3Changing(value As Short)
    End Sub
    Partial Private Sub OnOfferRewardEmote3Changed()
    End Sub
    Partial Private Sub OnOfferRewardEmote4Changing(value As Short)
    End Sub
    Partial Private Sub OnOfferRewardEmote4Changed()
    End Sub
    Partial Private Sub OnOfferRewardEmoteDelay1Changing(value As Integer)
    End Sub
    Partial Private Sub OnOfferRewardEmoteDelay1Changed()
    End Sub
    Partial Private Sub OnOfferRewardEmoteDelay2Changing(value As Integer)
    End Sub
    Partial Private Sub OnOfferRewardEmoteDelay2Changed()
    End Sub
    Partial Private Sub OnOfferRewardEmoteDelay3Changing(value As Integer)
    End Sub
    Partial Private Sub OnOfferRewardEmoteDelay3Changed()
    End Sub
    Partial Private Sub OnOfferRewardEmoteDelay4Changing(value As Integer)
    End Sub
    Partial Private Sub OnOfferRewardEmoteDelay4Changed()
    End Sub
    Partial Private Sub OnStartScriptChanging(value As Integer)
    End Sub
    Partial Private Sub OnStartScriptChanged()
    End Sub
    Partial Private Sub OnCompleteScriptChanging(value As Integer)
    End Sub
    Partial Private Sub OnCompleteScriptChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_entry", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property entry() As Integer
		Get
			Return Me._entry
		End Get
		Set
			If ((Me._entry = value)  _
						= false) Then
				Me.OnentryChanging(value)
				Me.SendPropertyChanging
				Me._entry = value
				Me.SendPropertyChanged("entry")
				Me.OnentryChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Method", DbType:="TinyInt NOT NULL")>  _
	Public Property Method() As Byte
		Get
			Return Me._Method
		End Get
		Set
			If ((Me._Method = value)  _
						= false) Then
				Me.OnMethodChanging(value)
				Me.SendPropertyChanging
				Me._Method = value
				Me.SendPropertyChanged("Method")
				Me.OnMethodChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ZoneOrSort", DbType:="SmallInt NOT NULL")>  _
	Public Property ZoneOrSort() As Short
		Get
			Return Me._ZoneOrSort
		End Get
		Set
			If ((Me._ZoneOrSort = value)  _
						= false) Then
				Me.OnZoneOrSortChanging(value)
				Me.SendPropertyChanging
				Me._ZoneOrSort = value
				Me.SendPropertyChanged("ZoneOrSort")
				Me.OnZoneOrSortChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_SkillOrClass", DbType:="SmallInt NOT NULL")>  _
	Public Property SkillOrClass() As Short
		Get
			Return Me._SkillOrClass
		End Get
		Set
			If ((Me._SkillOrClass = value)  _
						= false) Then
				Me.OnSkillOrClassChanging(value)
				Me.SendPropertyChanging
				Me._SkillOrClass = value
				Me.SendPropertyChanged("SkillOrClass")
				Me.OnSkillOrClassChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_MinLevel", DbType:="TinyInt NOT NULL")>  _
	Public Property MinLevel() As Byte
		Get
			Return Me._MinLevel
		End Get
		Set
			If ((Me._MinLevel = value)  _
						= false) Then
				Me.OnMinLevelChanging(value)
				Me.SendPropertyChanging
				Me._MinLevel = value
				Me.SendPropertyChanged("MinLevel")
				Me.OnMinLevelChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_QuestLevel", DbType:="SmallInt NOT NULL")>  _
	Public Property QuestLevel() As Short
		Get
			Return Me._QuestLevel
		End Get
		Set
			If ((Me._QuestLevel = value)  _
						= false) Then
				Me.OnQuestLevelChanging(value)
				Me.SendPropertyChanging
				Me._QuestLevel = value
				Me.SendPropertyChanged("QuestLevel")
				Me.OnQuestLevelChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Type", DbType:="SmallInt NOT NULL")>  _
	Public Property Type() As Short
		Get
			Return Me._Type
		End Get
		Set
			If ((Me._Type = value)  _
						= false) Then
				Me.OnTypeChanging(value)
				Me.SendPropertyChanging
				Me._Type = value
				Me.SendPropertyChanged("Type")
				Me.OnTypeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RequiredRaces", DbType:="SmallInt NOT NULL")>  _
	Public Property RequiredRaces() As Short
		Get
			Return Me._RequiredRaces
		End Get
		Set
			If ((Me._RequiredRaces = value)  _
						= false) Then
				Me.OnRequiredRacesChanging(value)
				Me.SendPropertyChanging
				Me._RequiredRaces = value
				Me.SendPropertyChanged("RequiredRaces")
				Me.OnRequiredRacesChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RequiredSkillValue", DbType:="SmallInt NOT NULL")>  _
	Public Property RequiredSkillValue() As Short
		Get
			Return Me._RequiredSkillValue
		End Get
		Set
			If ((Me._RequiredSkillValue = value)  _
						= false) Then
				Me.OnRequiredSkillValueChanging(value)
				Me.SendPropertyChanging
				Me._RequiredSkillValue = value
				Me.SendPropertyChanged("RequiredSkillValue")
				Me.OnRequiredSkillValueChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RepObjectiveFaction", DbType:="SmallInt NOT NULL")>  _
	Public Property RepObjectiveFaction() As Short
		Get
			Return Me._RepObjectiveFaction
		End Get
		Set
			If ((Me._RepObjectiveFaction = value)  _
						= false) Then
				Me.OnRepObjectiveFactionChanging(value)
				Me.SendPropertyChanging
				Me._RepObjectiveFaction = value
				Me.SendPropertyChanged("RepObjectiveFaction")
				Me.OnRepObjectiveFactionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RepObjectiveValue", DbType:="Int NOT NULL")>  _
	Public Property RepObjectiveValue() As Integer
		Get
			Return Me._RepObjectiveValue
		End Get
		Set
			If ((Me._RepObjectiveValue = value)  _
						= false) Then
				Me.OnRepObjectiveValueChanging(value)
				Me.SendPropertyChanging
				Me._RepObjectiveValue = value
				Me.SendPropertyChanged("RepObjectiveValue")
				Me.OnRepObjectiveValueChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RequiredMinRepFaction", DbType:="SmallInt NOT NULL")>  _
	Public Property RequiredMinRepFaction() As Short
		Get
			Return Me._RequiredMinRepFaction
		End Get
		Set
			If ((Me._RequiredMinRepFaction = value)  _
						= false) Then
				Me.OnRequiredMinRepFactionChanging(value)
				Me.SendPropertyChanging
				Me._RequiredMinRepFaction = value
				Me.SendPropertyChanged("RequiredMinRepFaction")
				Me.OnRequiredMinRepFactionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RequiredMinRepValue", DbType:="Int NOT NULL")>  _
	Public Property RequiredMinRepValue() As Integer
		Get
			Return Me._RequiredMinRepValue
		End Get
		Set
			If ((Me._RequiredMinRepValue = value)  _
						= false) Then
				Me.OnRequiredMinRepValueChanging(value)
				Me.SendPropertyChanging
				Me._RequiredMinRepValue = value
				Me.SendPropertyChanged("RequiredMinRepValue")
				Me.OnRequiredMinRepValueChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RequiredMaxRepFaction", DbType:="SmallInt NOT NULL")>  _
	Public Property RequiredMaxRepFaction() As Short
		Get
			Return Me._RequiredMaxRepFaction
		End Get
		Set
			If ((Me._RequiredMaxRepFaction = value)  _
						= false) Then
				Me.OnRequiredMaxRepFactionChanging(value)
				Me.SendPropertyChanging
				Me._RequiredMaxRepFaction = value
				Me.SendPropertyChanged("RequiredMaxRepFaction")
				Me.OnRequiredMaxRepFactionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RequiredMaxRepValue", DbType:="Int NOT NULL")>  _
	Public Property RequiredMaxRepValue() As Integer
		Get
			Return Me._RequiredMaxRepValue
		End Get
		Set
			If ((Me._RequiredMaxRepValue = value)  _
						= false) Then
				Me.OnRequiredMaxRepValueChanging(value)
				Me.SendPropertyChanging
				Me._RequiredMaxRepValue = value
				Me.SendPropertyChanged("RequiredMaxRepValue")
				Me.OnRequiredMaxRepValueChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_SuggestedPlayers", DbType:="TinyInt NOT NULL")>  _
	Public Property SuggestedPlayers() As Byte
		Get
			Return Me._SuggestedPlayers
		End Get
		Set
			If ((Me._SuggestedPlayers = value)  _
						= false) Then
				Me.OnSuggestedPlayersChanging(value)
				Me.SendPropertyChanging
				Me._SuggestedPlayers = value
				Me.SendPropertyChanged("SuggestedPlayers")
				Me.OnSuggestedPlayersChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_LimitTime", DbType:="Int NOT NULL")>  _
	Public Property LimitTime() As Integer
		Get
			Return Me._LimitTime
		End Get
		Set
			If ((Me._LimitTime = value)  _
						= false) Then
				Me.OnLimitTimeChanging(value)
				Me.SendPropertyChanging
				Me._LimitTime = value
				Me.SendPropertyChanged("LimitTime")
				Me.OnLimitTimeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_QuestFlags", DbType:="Int NOT NULL")>  _
	Public Property QuestFlags() As Integer
		Get
			Return Me._QuestFlags
		End Get
		Set
			If ((Me._QuestFlags = value)  _
						= false) Then
				Me.OnQuestFlagsChanging(value)
				Me.SendPropertyChanging
				Me._QuestFlags = value
				Me.SendPropertyChanged("QuestFlags")
				Me.OnQuestFlagsChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_SpecialFlags", DbType:="TinyInt NOT NULL")>  _
	Public Property SpecialFlags() As Byte
		Get
			Return Me._SpecialFlags
		End Get
		Set
			If ((Me._SpecialFlags = value)  _
						= false) Then
				Me.OnSpecialFlagsChanging(value)
				Me.SendPropertyChanging
				Me._SpecialFlags = value
				Me.SendPropertyChanged("SpecialFlags")
				Me.OnSpecialFlagsChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CharTitleId", DbType:="TinyInt NOT NULL")>  _
	Public Property CharTitleId() As Byte
		Get
			Return Me._CharTitleId
		End Get
		Set
			If ((Me._CharTitleId = value)  _
						= false) Then
				Me.OnCharTitleIdChanging(value)
				Me.SendPropertyChanging
				Me._CharTitleId = value
				Me.SendPropertyChanged("CharTitleId")
				Me.OnCharTitleIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_PlayersSlain", DbType:="TinyInt NOT NULL")>  _
	Public Property PlayersSlain() As Byte
		Get
			Return Me._PlayersSlain
		End Get
		Set
			If ((Me._PlayersSlain = value)  _
						= false) Then
				Me.OnPlayersSlainChanging(value)
				Me.SendPropertyChanging
				Me._PlayersSlain = value
				Me.SendPropertyChanged("PlayersSlain")
				Me.OnPlayersSlainChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_BonusTalents", DbType:="TinyInt NOT NULL")>  _
	Public Property BonusTalents() As Byte
		Get
			Return Me._BonusTalents
		End Get
		Set
			If ((Me._BonusTalents = value)  _
						= false) Then
				Me.OnBonusTalentsChanging(value)
				Me.SendPropertyChanging
				Me._BonusTalents = value
				Me.SendPropertyChanged("BonusTalents")
				Me.OnBonusTalentsChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_PrevQuestId", DbType:="Int NOT NULL")>  _
	Public Property PrevQuestId() As Integer
		Get
			Return Me._PrevQuestId
		End Get
		Set
			If ((Me._PrevQuestId = value)  _
						= false) Then
				Me.OnPrevQuestIdChanging(value)
				Me.SendPropertyChanging
				Me._PrevQuestId = value
				Me.SendPropertyChanged("PrevQuestId")
				Me.OnPrevQuestIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_NextQuestId", DbType:="Int NOT NULL")>  _
	Public Property NextQuestId() As Integer
		Get
			Return Me._NextQuestId
		End Get
		Set
			If ((Me._NextQuestId = value)  _
						= false) Then
				Me.OnNextQuestIdChanging(value)
				Me.SendPropertyChanging
				Me._NextQuestId = value
				Me.SendPropertyChanged("NextQuestId")
				Me.OnNextQuestIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ExclusiveGroup", DbType:="Int NOT NULL")>  _
	Public Property ExclusiveGroup() As Integer
		Get
			Return Me._ExclusiveGroup
		End Get
		Set
			If ((Me._ExclusiveGroup = value)  _
						= false) Then
				Me.OnExclusiveGroupChanging(value)
				Me.SendPropertyChanging
				Me._ExclusiveGroup = value
				Me.SendPropertyChanged("ExclusiveGroup")
				Me.OnExclusiveGroupChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_NextQuestInChain", DbType:="Int NOT NULL")>  _
	Public Property NextQuestInChain() As Integer
		Get
			Return Me._NextQuestInChain
		End Get
		Set
			If ((Me._NextQuestInChain = value)  _
						= false) Then
				Me.OnNextQuestInChainChanging(value)
				Me.SendPropertyChanging
				Me._NextQuestInChain = value
				Me.SendPropertyChanged("NextQuestInChain")
				Me.OnNextQuestInChainChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RewXPId", DbType:="TinyInt NOT NULL")>  _
	Public Property RewXPId() As Byte
		Get
			Return Me._RewXPId
		End Get
		Set
			If ((Me._RewXPId = value)  _
						= false) Then
				Me.OnRewXPIdChanging(value)
				Me.SendPropertyChanging
				Me._RewXPId = value
				Me.SendPropertyChanged("RewXPId")
				Me.OnRewXPIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_SrcItemId", DbType:="Int NOT NULL")>  _
	Public Property SrcItemId() As Integer
		Get
			Return Me._SrcItemId
		End Get
		Set
			If ((Me._SrcItemId = value)  _
						= false) Then
				Me.OnSrcItemIdChanging(value)
				Me.SendPropertyChanging
				Me._SrcItemId = value
				Me.SendPropertyChanged("SrcItemId")
				Me.OnSrcItemIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_SrcItemCount", DbType:="TinyInt NOT NULL")>  _
	Public Property SrcItemCount() As Byte
		Get
			Return Me._SrcItemCount
		End Get
		Set
			If ((Me._SrcItemCount = value)  _
						= false) Then
				Me.OnSrcItemCountChanging(value)
				Me.SendPropertyChanging
				Me._SrcItemCount = value
				Me.SendPropertyChanged("SrcItemCount")
				Me.OnSrcItemCountChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_SrcSpell", DbType:="Int NOT NULL")>  _
	Public Property SrcSpell() As Integer
		Get
			Return Me._SrcSpell
		End Get
		Set
			If ((Me._SrcSpell = value)  _
						= false) Then
				Me.OnSrcSpellChanging(value)
				Me.SendPropertyChanging
				Me._SrcSpell = value
				Me.SendPropertyChanged("SrcSpell")
				Me.OnSrcSpellChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Title", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Details", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Details() As String
		Get
			Return Me._Details
		End Get
		Set
			If (String.Equals(Me._Details, value) = false) Then
				Me.OnDetailsChanging(value)
				Me.SendPropertyChanging
				Me._Details = value
				Me.SendPropertyChanged("Details")
				Me.OnDetailsChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Objectives", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Objectives() As String
		Get
			Return Me._Objectives
		End Get
		Set
			If (String.Equals(Me._Objectives, value) = false) Then
				Me.OnObjectivesChanging(value)
				Me.SendPropertyChanging
				Me._Objectives = value
				Me.SendPropertyChanged("Objectives")
				Me.OnObjectivesChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_OfferRewardText", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property OfferRewardText() As String
		Get
			Return Me._OfferRewardText
		End Get
		Set
			If (String.Equals(Me._OfferRewardText, value) = false) Then
				Me.OnOfferRewardTextChanging(value)
				Me.SendPropertyChanging
				Me._OfferRewardText = value
				Me.SendPropertyChanged("OfferRewardText")
				Me.OnOfferRewardTextChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RequestItemsText", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property RequestItemsText() As String
		Get
			Return Me._RequestItemsText
		End Get
		Set
			If (String.Equals(Me._RequestItemsText, value) = false) Then
				Me.OnRequestItemsTextChanging(value)
				Me.SendPropertyChanging
				Me._RequestItemsText = value
				Me.SendPropertyChanged("RequestItemsText")
				Me.OnRequestItemsTextChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_EndText", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property EndText() As String
		Get
			Return Me._EndText
		End Get
		Set
			If (String.Equals(Me._EndText, value) = false) Then
				Me.OnEndTextChanging(value)
				Me.SendPropertyChanging
				Me._EndText = value
				Me.SendPropertyChanged("EndText")
				Me.OnEndTextChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CompletedText", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CompletedText() As String
		Get
			Return Me._CompletedText
		End Get
		Set
			If (String.Equals(Me._CompletedText, value) = false) Then
				Me.OnCompletedTextChanging(value)
				Me.SendPropertyChanging
				Me._CompletedText = value
				Me.SendPropertyChanged("CompletedText")
				Me.OnCompletedTextChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ObjectiveText1", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ObjectiveText1() As String
		Get
			Return Me._ObjectiveText1
		End Get
		Set
			If (String.Equals(Me._ObjectiveText1, value) = false) Then
				Me.OnObjectiveText1Changing(value)
				Me.SendPropertyChanging
				Me._ObjectiveText1 = value
				Me.SendPropertyChanged("ObjectiveText1")
				Me.OnObjectiveText1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_ObjectiveText2", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ObjectiveText2() As String
		Get
			Return Me._ObjectiveText2
		End Get
		Set
			If (String.Equals(Me._ObjectiveText2, value) = false) Then
				Me.OnObjectiveText2Changing(value)
				Me.SendPropertyChanging
				Me._ObjectiveText2 = value
				Me.SendPropertyChanged("ObjectiveText2")
				Me.OnObjectiveText2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_ObjectiveText3", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ObjectiveText3() As String
		Get
			Return Me._ObjectiveText3
		End Get
		Set
			If (String.Equals(Me._ObjectiveText3, value) = false) Then
				Me.OnObjectiveText3Changing(value)
				Me.SendPropertyChanging
				Me._ObjectiveText3 = value
				Me.SendPropertyChanged("ObjectiveText3")
				Me.OnObjectiveText3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_ObjectiveText4", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ObjectiveText4() As String
		Get
			Return Me._ObjectiveText4
		End Get
		Set
			If (String.Equals(Me._ObjectiveText4, value) = false) Then
				Me.OnObjectiveText4Changing(value)
				Me.SendPropertyChanging
				Me._ObjectiveText4 = value
				Me.SendPropertyChanged("ObjectiveText4")
				Me.OnObjectiveText4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_ReqItemId1", DbType:="Int NOT NULL")>  _
	Public Property ReqItemId1() As Integer
		Get
			Return Me._ReqItemId1
		End Get
		Set
			If ((Me._ReqItemId1 = value)  _
						= false) Then
				Me.OnReqItemId1Changing(value)
				Me.SendPropertyChanging
				Me._ReqItemId1 = value
				Me.SendPropertyChanged("ReqItemId1")
				Me.OnReqItemId1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_ReqItemId2", DbType:="Int NOT NULL")>  _
	Public Property ReqItemId2() As Integer
		Get
			Return Me._ReqItemId2
		End Get
		Set
			If ((Me._ReqItemId2 = value)  _
						= false) Then
				Me.OnReqItemId2Changing(value)
				Me.SendPropertyChanging
				Me._ReqItemId2 = value
				Me.SendPropertyChanged("ReqItemId2")
				Me.OnReqItemId2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_ReqItemId3", DbType:="Int NOT NULL")>  _
	Public Property ReqItemId3() As Integer
		Get
			Return Me._ReqItemId3
		End Get
		Set
			If ((Me._ReqItemId3 = value)  _
						= false) Then
				Me.OnReqItemId3Changing(value)
				Me.SendPropertyChanging
				Me._ReqItemId3 = value
				Me.SendPropertyChanged("ReqItemId3")
				Me.OnReqItemId3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_ReqItemId4", DbType:="Int NOT NULL")>  _
	Public Property ReqItemId4() As Integer
		Get
			Return Me._ReqItemId4
		End Get
		Set
			If ((Me._ReqItemId4 = value)  _
						= false) Then
				Me.OnReqItemId4Changing(value)
				Me.SendPropertyChanging
				Me._ReqItemId4 = value
				Me.SendPropertyChanged("ReqItemId4")
				Me.OnReqItemId4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_ReqItemId5", DbType:="Int NOT NULL")>  _
	Public Property ReqItemId5() As Integer
		Get
			Return Me._ReqItemId5
		End Get
		Set
			If ((Me._ReqItemId5 = value)  _
						= false) Then
				Me.OnReqItemId5Changing(value)
				Me.SendPropertyChanging
				Me._ReqItemId5 = value
				Me.SendPropertyChanged("ReqItemId5")
				Me.OnReqItemId5Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_ReqItemId6", DbType:="Int NOT NULL")>  _
	Public Property ReqItemId6() As Integer
		Get
			Return Me._ReqItemId6
		End Get
		Set
			If ((Me._ReqItemId6 = value)  _
						= false) Then
				Me.OnReqItemId6Changing(value)
				Me.SendPropertyChanging
				Me._ReqItemId6 = value
				Me.SendPropertyChanged("ReqItemId6")
				Me.OnReqItemId6Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_ReqItemCount1", DbType:="SmallInt NOT NULL")>  _
	Public Property ReqItemCount1() As Short
		Get
			Return Me._ReqItemCount1
		End Get
		Set
			If ((Me._ReqItemCount1 = value)  _
						= false) Then
				Me.OnReqItemCount1Changing(value)
				Me.SendPropertyChanging
				Me._ReqItemCount1 = value
				Me.SendPropertyChanged("ReqItemCount1")
				Me.OnReqItemCount1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_ReqItemCount2", DbType:="SmallInt NOT NULL")>  _
	Public Property ReqItemCount2() As Short
		Get
			Return Me._ReqItemCount2
		End Get
		Set
			If ((Me._ReqItemCount2 = value)  _
						= false) Then
				Me.OnReqItemCount2Changing(value)
				Me.SendPropertyChanging
				Me._ReqItemCount2 = value
				Me.SendPropertyChanged("ReqItemCount2")
				Me.OnReqItemCount2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_ReqItemCount3", DbType:="SmallInt NOT NULL")>  _
	Public Property ReqItemCount3() As Short
		Get
			Return Me._ReqItemCount3
		End Get
		Set
			If ((Me._ReqItemCount3 = value)  _
						= false) Then
				Me.OnReqItemCount3Changing(value)
				Me.SendPropertyChanging
				Me._ReqItemCount3 = value
				Me.SendPropertyChanged("ReqItemCount3")
				Me.OnReqItemCount3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_ReqItemCount4", DbType:="SmallInt NOT NULL")>  _
	Public Property ReqItemCount4() As Short
		Get
			Return Me._ReqItemCount4
		End Get
		Set
			If ((Me._ReqItemCount4 = value)  _
						= false) Then
				Me.OnReqItemCount4Changing(value)
				Me.SendPropertyChanging
				Me._ReqItemCount4 = value
				Me.SendPropertyChanged("ReqItemCount4")
				Me.OnReqItemCount4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_ReqItemCount5", DbType:="SmallInt NOT NULL")>  _
	Public Property ReqItemCount5() As Short
		Get
			Return Me._ReqItemCount5
		End Get
		Set
			If ((Me._ReqItemCount5 = value)  _
						= false) Then
				Me.OnReqItemCount5Changing(value)
				Me.SendPropertyChanging
				Me._ReqItemCount5 = value
				Me.SendPropertyChanged("ReqItemCount5")
				Me.OnReqItemCount5Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_ReqItemCount6", DbType:="SmallInt NOT NULL")>  _
	Public Property ReqItemCount6() As Short
		Get
			Return Me._ReqItemCount6
		End Get
		Set
			If ((Me._ReqItemCount6 = value)  _
						= false) Then
				Me.OnReqItemCount6Changing(value)
				Me.SendPropertyChanging
				Me._ReqItemCount6 = value
				Me.SendPropertyChanged("ReqItemCount6")
				Me.OnReqItemCount6Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_ReqSourceId1", DbType:="Int NOT NULL")>  _
	Public Property ReqSourceId1() As Integer
		Get
			Return Me._ReqSourceId1
		End Get
		Set
			If ((Me._ReqSourceId1 = value)  _
						= false) Then
				Me.OnReqSourceId1Changing(value)
				Me.SendPropertyChanging
				Me._ReqSourceId1 = value
				Me.SendPropertyChanged("ReqSourceId1")
				Me.OnReqSourceId1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_ReqSourceId2", DbType:="Int NOT NULL")>  _
	Public Property ReqSourceId2() As Integer
		Get
			Return Me._ReqSourceId2
		End Get
		Set
			If ((Me._ReqSourceId2 = value)  _
						= false) Then
				Me.OnReqSourceId2Changing(value)
				Me.SendPropertyChanging
				Me._ReqSourceId2 = value
				Me.SendPropertyChanged("ReqSourceId2")
				Me.OnReqSourceId2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_ReqSourceId3", DbType:="Int NOT NULL")>  _
	Public Property ReqSourceId3() As Integer
		Get
			Return Me._ReqSourceId3
		End Get
		Set
			If ((Me._ReqSourceId3 = value)  _
						= false) Then
				Me.OnReqSourceId3Changing(value)
				Me.SendPropertyChanging
				Me._ReqSourceId3 = value
				Me.SendPropertyChanged("ReqSourceId3")
				Me.OnReqSourceId3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_ReqSourceId4", DbType:="Int NOT NULL")>  _
	Public Property ReqSourceId4() As Integer
		Get
			Return Me._ReqSourceId4
		End Get
		Set
			If ((Me._ReqSourceId4 = value)  _
						= false) Then
				Me.OnReqSourceId4Changing(value)
				Me.SendPropertyChanging
				Me._ReqSourceId4 = value
				Me.SendPropertyChanged("ReqSourceId4")
				Me.OnReqSourceId4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_ReqSourceCount1", DbType:="SmallInt NOT NULL")>  _
	Public Property ReqSourceCount1() As Short
		Get
			Return Me._ReqSourceCount1
		End Get
		Set
			If ((Me._ReqSourceCount1 = value)  _
						= false) Then
				Me.OnReqSourceCount1Changing(value)
				Me.SendPropertyChanging
				Me._ReqSourceCount1 = value
				Me.SendPropertyChanged("ReqSourceCount1")
				Me.OnReqSourceCount1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_ReqSourceCount2", DbType:="SmallInt NOT NULL")>  _
	Public Property ReqSourceCount2() As Short
		Get
			Return Me._ReqSourceCount2
		End Get
		Set
			If ((Me._ReqSourceCount2 = value)  _
						= false) Then
				Me.OnReqSourceCount2Changing(value)
				Me.SendPropertyChanging
				Me._ReqSourceCount2 = value
				Me.SendPropertyChanged("ReqSourceCount2")
				Me.OnReqSourceCount2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_ReqSourceCount3", DbType:="SmallInt NOT NULL")>  _
	Public Property ReqSourceCount3() As Short
		Get
			Return Me._ReqSourceCount3
		End Get
		Set
			If ((Me._ReqSourceCount3 = value)  _
						= false) Then
				Me.OnReqSourceCount3Changing(value)
				Me.SendPropertyChanging
				Me._ReqSourceCount3 = value
				Me.SendPropertyChanged("ReqSourceCount3")
				Me.OnReqSourceCount3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_ReqSourceCount4", DbType:="SmallInt NOT NULL")>  _
	Public Property ReqSourceCount4() As Short
		Get
			Return Me._ReqSourceCount4
		End Get
		Set
			If ((Me._ReqSourceCount4 = value)  _
						= false) Then
				Me.OnReqSourceCount4Changing(value)
				Me.SendPropertyChanging
				Me._ReqSourceCount4 = value
				Me.SendPropertyChanged("ReqSourceCount4")
				Me.OnReqSourceCount4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_ReqCreatureOrGOId1", DbType:="Int NOT NULL")>  _
	Public Property ReqCreatureOrGOId1() As Integer
		Get
			Return Me._ReqCreatureOrGOId1
		End Get
		Set
			If ((Me._ReqCreatureOrGOId1 = value)  _
						= false) Then
				Me.OnReqCreatureOrGOId1Changing(value)
				Me.SendPropertyChanging
				Me._ReqCreatureOrGOId1 = value
				Me.SendPropertyChanged("ReqCreatureOrGOId1")
				Me.OnReqCreatureOrGOId1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_ReqCreatureOrGOId2", DbType:="Int NOT NULL")>  _
	Public Property ReqCreatureOrGOId2() As Integer
		Get
			Return Me._ReqCreatureOrGOId2
		End Get
		Set
			If ((Me._ReqCreatureOrGOId2 = value)  _
						= false) Then
				Me.OnReqCreatureOrGOId2Changing(value)
				Me.SendPropertyChanging
				Me._ReqCreatureOrGOId2 = value
				Me.SendPropertyChanged("ReqCreatureOrGOId2")
				Me.OnReqCreatureOrGOId2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_ReqCreatureOrGOId3", DbType:="Int NOT NULL")>  _
	Public Property ReqCreatureOrGOId3() As Integer
		Get
			Return Me._ReqCreatureOrGOId3
		End Get
		Set
			If ((Me._ReqCreatureOrGOId3 = value)  _
						= false) Then
				Me.OnReqCreatureOrGOId3Changing(value)
				Me.SendPropertyChanging
				Me._ReqCreatureOrGOId3 = value
				Me.SendPropertyChanged("ReqCreatureOrGOId3")
				Me.OnReqCreatureOrGOId3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_ReqCreatureOrGOId4", DbType:="Int NOT NULL")>  _
	Public Property ReqCreatureOrGOId4() As Integer
		Get
			Return Me._ReqCreatureOrGOId4
		End Get
		Set
			If ((Me._ReqCreatureOrGOId4 = value)  _
						= false) Then
				Me.OnReqCreatureOrGOId4Changing(value)
				Me.SendPropertyChanging
				Me._ReqCreatureOrGOId4 = value
				Me.SendPropertyChanged("ReqCreatureOrGOId4")
				Me.OnReqCreatureOrGOId4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_ReqCreatureOrGOCount1", DbType:="SmallInt NOT NULL")>  _
	Public Property ReqCreatureOrGOCount1() As Short
		Get
			Return Me._ReqCreatureOrGOCount1
		End Get
		Set
			If ((Me._ReqCreatureOrGOCount1 = value)  _
						= false) Then
				Me.OnReqCreatureOrGOCount1Changing(value)
				Me.SendPropertyChanging
				Me._ReqCreatureOrGOCount1 = value
				Me.SendPropertyChanged("ReqCreatureOrGOCount1")
				Me.OnReqCreatureOrGOCount1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_ReqCreatureOrGOCount2", DbType:="SmallInt NOT NULL")>  _
	Public Property ReqCreatureOrGOCount2() As Short
		Get
			Return Me._ReqCreatureOrGOCount2
		End Get
		Set
			If ((Me._ReqCreatureOrGOCount2 = value)  _
						= false) Then
				Me.OnReqCreatureOrGOCount2Changing(value)
				Me.SendPropertyChanging
				Me._ReqCreatureOrGOCount2 = value
				Me.SendPropertyChanged("ReqCreatureOrGOCount2")
				Me.OnReqCreatureOrGOCount2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_ReqCreatureOrGOCount3", DbType:="SmallInt NOT NULL")>  _
	Public Property ReqCreatureOrGOCount3() As Short
		Get
			Return Me._ReqCreatureOrGOCount3
		End Get
		Set
			If ((Me._ReqCreatureOrGOCount3 = value)  _
						= false) Then
				Me.OnReqCreatureOrGOCount3Changing(value)
				Me.SendPropertyChanging
				Me._ReqCreatureOrGOCount3 = value
				Me.SendPropertyChanged("ReqCreatureOrGOCount3")
				Me.OnReqCreatureOrGOCount3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_ReqCreatureOrGOCount4", DbType:="SmallInt NOT NULL")>  _
	Public Property ReqCreatureOrGOCount4() As Short
		Get
			Return Me._ReqCreatureOrGOCount4
		End Get
		Set
			If ((Me._ReqCreatureOrGOCount4 = value)  _
						= false) Then
				Me.OnReqCreatureOrGOCount4Changing(value)
				Me.SendPropertyChanging
				Me._ReqCreatureOrGOCount4 = value
				Me.SendPropertyChanged("ReqCreatureOrGOCount4")
				Me.OnReqCreatureOrGOCount4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_ReqSpellCast1", DbType:="Int NOT NULL")>  _
	Public Property ReqSpellCast1() As Integer
		Get
			Return Me._ReqSpellCast1
		End Get
		Set
			If ((Me._ReqSpellCast1 = value)  _
						= false) Then
				Me.OnReqSpellCast1Changing(value)
				Me.SendPropertyChanging
				Me._ReqSpellCast1 = value
				Me.SendPropertyChanged("ReqSpellCast1")
				Me.OnReqSpellCast1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_ReqSpellCast2", DbType:="Int NOT NULL")>  _
	Public Property ReqSpellCast2() As Integer
		Get
			Return Me._ReqSpellCast2
		End Get
		Set
			If ((Me._ReqSpellCast2 = value)  _
						= false) Then
				Me.OnReqSpellCast2Changing(value)
				Me.SendPropertyChanging
				Me._ReqSpellCast2 = value
				Me.SendPropertyChanged("ReqSpellCast2")
				Me.OnReqSpellCast2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_ReqSpellCast3", DbType:="Int NOT NULL")>  _
	Public Property ReqSpellCast3() As Integer
		Get
			Return Me._ReqSpellCast3
		End Get
		Set
			If ((Me._ReqSpellCast3 = value)  _
						= false) Then
				Me.OnReqSpellCast3Changing(value)
				Me.SendPropertyChanging
				Me._ReqSpellCast3 = value
				Me.SendPropertyChanged("ReqSpellCast3")
				Me.OnReqSpellCast3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_ReqSpellCast4", DbType:="Int NOT NULL")>  _
	Public Property ReqSpellCast4() As Integer
		Get
			Return Me._ReqSpellCast4
		End Get
		Set
			If ((Me._ReqSpellCast4 = value)  _
						= false) Then
				Me.OnReqSpellCast4Changing(value)
				Me.SendPropertyChanging
				Me._ReqSpellCast4 = value
				Me.SendPropertyChanged("ReqSpellCast4")
				Me.OnReqSpellCast4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_RewChoiceItemId1", DbType:="Int NOT NULL")>  _
	Public Property RewChoiceItemId1() As Integer
		Get
			Return Me._RewChoiceItemId1
		End Get
		Set
			If ((Me._RewChoiceItemId1 = value)  _
						= false) Then
				Me.OnRewChoiceItemId1Changing(value)
				Me.SendPropertyChanging
				Me._RewChoiceItemId1 = value
				Me.SendPropertyChanged("RewChoiceItemId1")
				Me.OnRewChoiceItemId1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_RewChoiceItemId2", DbType:="Int NOT NULL")>  _
	Public Property RewChoiceItemId2() As Integer
		Get
			Return Me._RewChoiceItemId2
		End Get
		Set
			If ((Me._RewChoiceItemId2 = value)  _
						= false) Then
				Me.OnRewChoiceItemId2Changing(value)
				Me.SendPropertyChanging
				Me._RewChoiceItemId2 = value
				Me.SendPropertyChanged("RewChoiceItemId2")
				Me.OnRewChoiceItemId2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_RewChoiceItemId3", DbType:="Int NOT NULL")>  _
	Public Property RewChoiceItemId3() As Integer
		Get
			Return Me._RewChoiceItemId3
		End Get
		Set
			If ((Me._RewChoiceItemId3 = value)  _
						= false) Then
				Me.OnRewChoiceItemId3Changing(value)
				Me.SendPropertyChanging
				Me._RewChoiceItemId3 = value
				Me.SendPropertyChanged("RewChoiceItemId3")
				Me.OnRewChoiceItemId3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_RewChoiceItemId4", DbType:="Int NOT NULL")>  _
	Public Property RewChoiceItemId4() As Integer
		Get
			Return Me._RewChoiceItemId4
		End Get
		Set
			If ((Me._RewChoiceItemId4 = value)  _
						= false) Then
				Me.OnRewChoiceItemId4Changing(value)
				Me.SendPropertyChanging
				Me._RewChoiceItemId4 = value
				Me.SendPropertyChanged("RewChoiceItemId4")
				Me.OnRewChoiceItemId4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_RewChoiceItemId5", DbType:="Int NOT NULL")>  _
	Public Property RewChoiceItemId5() As Integer
		Get
			Return Me._RewChoiceItemId5
		End Get
		Set
			If ((Me._RewChoiceItemId5 = value)  _
						= false) Then
				Me.OnRewChoiceItemId5Changing(value)
				Me.SendPropertyChanging
				Me._RewChoiceItemId5 = value
				Me.SendPropertyChanged("RewChoiceItemId5")
				Me.OnRewChoiceItemId5Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_RewChoiceItemId6", DbType:="Int NOT NULL")>  _
	Public Property RewChoiceItemId6() As Integer
		Get
			Return Me._RewChoiceItemId6
		End Get
		Set
			If ((Me._RewChoiceItemId6 = value)  _
						= false) Then
				Me.OnRewChoiceItemId6Changing(value)
				Me.SendPropertyChanging
				Me._RewChoiceItemId6 = value
				Me.SendPropertyChanged("RewChoiceItemId6")
				Me.OnRewChoiceItemId6Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_RewChoiceItemCount1", DbType:="SmallInt NOT NULL")>  _
	Public Property RewChoiceItemCount1() As Short
		Get
			Return Me._RewChoiceItemCount1
		End Get
		Set
			If ((Me._RewChoiceItemCount1 = value)  _
						= false) Then
				Me.OnRewChoiceItemCount1Changing(value)
				Me.SendPropertyChanging
				Me._RewChoiceItemCount1 = value
				Me.SendPropertyChanged("RewChoiceItemCount1")
				Me.OnRewChoiceItemCount1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_RewChoiceItemCount2", DbType:="SmallInt NOT NULL")>  _
	Public Property RewChoiceItemCount2() As Short
		Get
			Return Me._RewChoiceItemCount2
		End Get
		Set
			If ((Me._RewChoiceItemCount2 = value)  _
						= false) Then
				Me.OnRewChoiceItemCount2Changing(value)
				Me.SendPropertyChanging
				Me._RewChoiceItemCount2 = value
				Me.SendPropertyChanged("RewChoiceItemCount2")
				Me.OnRewChoiceItemCount2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_RewChoiceItemCount3", DbType:="SmallInt NOT NULL")>  _
	Public Property RewChoiceItemCount3() As Short
		Get
			Return Me._RewChoiceItemCount3
		End Get
		Set
			If ((Me._RewChoiceItemCount3 = value)  _
						= false) Then
				Me.OnRewChoiceItemCount3Changing(value)
				Me.SendPropertyChanging
				Me._RewChoiceItemCount3 = value
				Me.SendPropertyChanged("RewChoiceItemCount3")
				Me.OnRewChoiceItemCount3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_RewChoiceItemCount4", DbType:="SmallInt NOT NULL")>  _
	Public Property RewChoiceItemCount4() As Short
		Get
			Return Me._RewChoiceItemCount4
		End Get
		Set
			If ((Me._RewChoiceItemCount4 = value)  _
						= false) Then
				Me.OnRewChoiceItemCount4Changing(value)
				Me.SendPropertyChanging
				Me._RewChoiceItemCount4 = value
				Me.SendPropertyChanged("RewChoiceItemCount4")
				Me.OnRewChoiceItemCount4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_RewChoiceItemCount5", DbType:="SmallInt NOT NULL")>  _
	Public Property RewChoiceItemCount5() As Short
		Get
			Return Me._RewChoiceItemCount5
		End Get
		Set
			If ((Me._RewChoiceItemCount5 = value)  _
						= false) Then
				Me.OnRewChoiceItemCount5Changing(value)
				Me.SendPropertyChanging
				Me._RewChoiceItemCount5 = value
				Me.SendPropertyChanged("RewChoiceItemCount5")
				Me.OnRewChoiceItemCount5Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_RewChoiceItemCount6", DbType:="SmallInt NOT NULL")>  _
	Public Property RewChoiceItemCount6() As Short
		Get
			Return Me._RewChoiceItemCount6
		End Get
		Set
			If ((Me._RewChoiceItemCount6 = value)  _
						= false) Then
				Me.OnRewChoiceItemCount6Changing(value)
				Me.SendPropertyChanging
				Me._RewChoiceItemCount6 = value
				Me.SendPropertyChanged("RewChoiceItemCount6")
				Me.OnRewChoiceItemCount6Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_RewItemId1", DbType:="Int NOT NULL")>  _
	Public Property RewItemId1() As Integer
		Get
			Return Me._RewItemId1
		End Get
		Set
			If ((Me._RewItemId1 = value)  _
						= false) Then
				Me.OnRewItemId1Changing(value)
				Me.SendPropertyChanging
				Me._RewItemId1 = value
				Me.SendPropertyChanged("RewItemId1")
				Me.OnRewItemId1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_RewItemId2", DbType:="Int NOT NULL")>  _
	Public Property RewItemId2() As Integer
		Get
			Return Me._RewItemId2
		End Get
		Set
			If ((Me._RewItemId2 = value)  _
						= false) Then
				Me.OnRewItemId2Changing(value)
				Me.SendPropertyChanging
				Me._RewItemId2 = value
				Me.SendPropertyChanged("RewItemId2")
				Me.OnRewItemId2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_RewItemId3", DbType:="Int NOT NULL")>  _
	Public Property RewItemId3() As Integer
		Get
			Return Me._RewItemId3
		End Get
		Set
			If ((Me._RewItemId3 = value)  _
						= false) Then
				Me.OnRewItemId3Changing(value)
				Me.SendPropertyChanging
				Me._RewItemId3 = value
				Me.SendPropertyChanged("RewItemId3")
				Me.OnRewItemId3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_RewItemId4", DbType:="Int NOT NULL")>  _
	Public Property RewItemId4() As Integer
		Get
			Return Me._RewItemId4
		End Get
		Set
			If ((Me._RewItemId4 = value)  _
						= false) Then
				Me.OnRewItemId4Changing(value)
				Me.SendPropertyChanging
				Me._RewItemId4 = value
				Me.SendPropertyChanged("RewItemId4")
				Me.OnRewItemId4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_RewItemCount1", DbType:="SmallInt NOT NULL")>  _
	Public Property RewItemCount1() As Short
		Get
			Return Me._RewItemCount1
		End Get
		Set
			If ((Me._RewItemCount1 = value)  _
						= false) Then
				Me.OnRewItemCount1Changing(value)
				Me.SendPropertyChanging
				Me._RewItemCount1 = value
				Me.SendPropertyChanged("RewItemCount1")
				Me.OnRewItemCount1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_RewItemCount2", DbType:="SmallInt NOT NULL")>  _
	Public Property RewItemCount2() As Short
		Get
			Return Me._RewItemCount2
		End Get
		Set
			If ((Me._RewItemCount2 = value)  _
						= false) Then
				Me.OnRewItemCount2Changing(value)
				Me.SendPropertyChanging
				Me._RewItemCount2 = value
				Me.SendPropertyChanged("RewItemCount2")
				Me.OnRewItemCount2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_RewItemCount3", DbType:="SmallInt NOT NULL")>  _
	Public Property RewItemCount3() As Short
		Get
			Return Me._RewItemCount3
		End Get
		Set
			If ((Me._RewItemCount3 = value)  _
						= false) Then
				Me.OnRewItemCount3Changing(value)
				Me.SendPropertyChanging
				Me._RewItemCount3 = value
				Me.SendPropertyChanged("RewItemCount3")
				Me.OnRewItemCount3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_RewItemCount4", DbType:="SmallInt NOT NULL")>  _
	Public Property RewItemCount4() As Short
		Get
			Return Me._RewItemCount4
		End Get
		Set
			If ((Me._RewItemCount4 = value)  _
						= false) Then
				Me.OnRewItemCount4Changing(value)
				Me.SendPropertyChanging
				Me._RewItemCount4 = value
				Me.SendPropertyChanged("RewItemCount4")
				Me.OnRewItemCount4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_RewRepFaction1", DbType:="SmallInt NOT NULL")>  _
	Public Property RewRepFaction1() As Short
		Get
			Return Me._RewRepFaction1
		End Get
		Set
			If ((Me._RewRepFaction1 = value)  _
						= false) Then
				Me.OnRewRepFaction1Changing(value)
				Me.SendPropertyChanging
				Me._RewRepFaction1 = value
				Me.SendPropertyChanged("RewRepFaction1")
				Me.OnRewRepFaction1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_RewRepFaction2", DbType:="SmallInt NOT NULL")>  _
	Public Property RewRepFaction2() As Short
		Get
			Return Me._RewRepFaction2
		End Get
		Set
			If ((Me._RewRepFaction2 = value)  _
						= false) Then
				Me.OnRewRepFaction2Changing(value)
				Me.SendPropertyChanging
				Me._RewRepFaction2 = value
				Me.SendPropertyChanged("RewRepFaction2")
				Me.OnRewRepFaction2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_RewRepFaction3", DbType:="SmallInt NOT NULL")>  _
	Public Property RewRepFaction3() As Short
		Get
			Return Me._RewRepFaction3
		End Get
		Set
			If ((Me._RewRepFaction3 = value)  _
						= false) Then
				Me.OnRewRepFaction3Changing(value)
				Me.SendPropertyChanging
				Me._RewRepFaction3 = value
				Me.SendPropertyChanged("RewRepFaction3")
				Me.OnRewRepFaction3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_RewRepFaction4", DbType:="SmallInt NOT NULL")>  _
	Public Property RewRepFaction4() As Short
		Get
			Return Me._RewRepFaction4
		End Get
		Set
			If ((Me._RewRepFaction4 = value)  _
						= false) Then
				Me.OnRewRepFaction4Changing(value)
				Me.SendPropertyChanging
				Me._RewRepFaction4 = value
				Me.SendPropertyChanged("RewRepFaction4")
				Me.OnRewRepFaction4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_RewRepFaction5", DbType:="SmallInt NOT NULL")>  _
	Public Property RewRepFaction5() As Short
		Get
			Return Me._RewRepFaction5
		End Get
		Set
			If ((Me._RewRepFaction5 = value)  _
						= false) Then
				Me.OnRewRepFaction5Changing(value)
				Me.SendPropertyChanging
				Me._RewRepFaction5 = value
				Me.SendPropertyChanged("RewRepFaction5")
				Me.OnRewRepFaction5Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_RewRepValueId1", DbType:="SmallInt NOT NULL")>  _
	Public Property RewRepValueId1() As Short
		Get
			Return Me._RewRepValueId1
		End Get
		Set
			If ((Me._RewRepValueId1 = value)  _
						= false) Then
				Me.OnRewRepValueId1Changing(value)
				Me.SendPropertyChanging
				Me._RewRepValueId1 = value
				Me.SendPropertyChanged("RewRepValueId1")
				Me.OnRewRepValueId1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_RewRepValueId2", DbType:="SmallInt NOT NULL")>  _
	Public Property RewRepValueId2() As Short
		Get
			Return Me._RewRepValueId2
		End Get
		Set
			If ((Me._RewRepValueId2 = value)  _
						= false) Then
				Me.OnRewRepValueId2Changing(value)
				Me.SendPropertyChanging
				Me._RewRepValueId2 = value
				Me.SendPropertyChanged("RewRepValueId2")
				Me.OnRewRepValueId2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_RewRepValueId3", DbType:="SmallInt NOT NULL")>  _
	Public Property RewRepValueId3() As Short
		Get
			Return Me._RewRepValueId3
		End Get
		Set
			If ((Me._RewRepValueId3 = value)  _
						= false) Then
				Me.OnRewRepValueId3Changing(value)
				Me.SendPropertyChanging
				Me._RewRepValueId3 = value
				Me.SendPropertyChanged("RewRepValueId3")
				Me.OnRewRepValueId3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_RewRepValueId4", DbType:="SmallInt NOT NULL")>  _
	Public Property RewRepValueId4() As Short
		Get
			Return Me._RewRepValueId4
		End Get
		Set
			If ((Me._RewRepValueId4 = value)  _
						= false) Then
				Me.OnRewRepValueId4Changing(value)
				Me.SendPropertyChanging
				Me._RewRepValueId4 = value
				Me.SendPropertyChanged("RewRepValueId4")
				Me.OnRewRepValueId4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_RewRepValueId5", DbType:="SmallInt NOT NULL")>  _
	Public Property RewRepValueId5() As Short
		Get
			Return Me._RewRepValueId5
		End Get
		Set
			If ((Me._RewRepValueId5 = value)  _
						= false) Then
				Me.OnRewRepValueId5Changing(value)
				Me.SendPropertyChanging
				Me._RewRepValueId5 = value
				Me.SendPropertyChanged("RewRepValueId5")
				Me.OnRewRepValueId5Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_RewRepValue1", DbType:="Int NOT NULL")>  _
	Public Property RewRepValue1() As Integer
		Get
			Return Me._RewRepValue1
		End Get
		Set
			If ((Me._RewRepValue1 = value)  _
						= false) Then
				Me.OnRewRepValue1Changing(value)
				Me.SendPropertyChanging
				Me._RewRepValue1 = value
				Me.SendPropertyChanged("RewRepValue1")
				Me.OnRewRepValue1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_RewRepValue2", DbType:="Int NOT NULL")>  _
	Public Property RewRepValue2() As Integer
		Get
			Return Me._RewRepValue2
		End Get
		Set
			If ((Me._RewRepValue2 = value)  _
						= false) Then
				Me.OnRewRepValue2Changing(value)
				Me.SendPropertyChanging
				Me._RewRepValue2 = value
				Me.SendPropertyChanged("RewRepValue2")
				Me.OnRewRepValue2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_RewRepValue3", DbType:="Int NOT NULL")>  _
	Public Property RewRepValue3() As Integer
		Get
			Return Me._RewRepValue3
		End Get
		Set
			If ((Me._RewRepValue3 = value)  _
						= false) Then
				Me.OnRewRepValue3Changing(value)
				Me.SendPropertyChanging
				Me._RewRepValue3 = value
				Me.SendPropertyChanged("RewRepValue3")
				Me.OnRewRepValue3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_RewRepValue4", DbType:="Int NOT NULL")>  _
	Public Property RewRepValue4() As Integer
		Get
			Return Me._RewRepValue4
		End Get
		Set
			If ((Me._RewRepValue4 = value)  _
						= false) Then
				Me.OnRewRepValue4Changing(value)
				Me.SendPropertyChanging
				Me._RewRepValue4 = value
				Me.SendPropertyChanged("RewRepValue4")
				Me.OnRewRepValue4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_RewRepValue5", DbType:="Int NOT NULL")>  _
	Public Property RewRepValue5() As Integer
		Get
			Return Me._RewRepValue5
		End Get
		Set
			If ((Me._RewRepValue5 = value)  _
						= false) Then
				Me.OnRewRepValue5Changing(value)
				Me.SendPropertyChanging
				Me._RewRepValue5 = value
				Me.SendPropertyChanged("RewRepValue5")
				Me.OnRewRepValue5Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_RewHonorAddition", DbType:="Int NOT NULL")>  _
	Public Property RewHonorAddition() As Integer
		Get
			Return Me._RewHonorAddition
		End Get
		Set
			If ((Me._RewHonorAddition = value)  _
						= false) Then
				Me.OnRewHonorAdditionChanging(value)
				Me.SendPropertyChanging
				Me._RewHonorAddition = value
				Me.SendPropertyChanged("RewHonorAddition")
				Me.OnRewHonorAdditionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RewHonorMultiplier", DbType:="Real NOT NULL")>  _
	Public Property RewHonorMultiplier() As Single
		Get
			Return Me._RewHonorMultiplier
		End Get
		Set
			If ((Me._RewHonorMultiplier = value)  _
						= false) Then
				Me.OnRewHonorMultiplierChanging(value)
				Me.SendPropertyChanging
				Me._RewHonorMultiplier = value
				Me.SendPropertyChanged("RewHonorMultiplier")
				Me.OnRewHonorMultiplierChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RewOrReqMoney", DbType:="Int NOT NULL")>  _
	Public Property RewOrReqMoney() As Integer
		Get
			Return Me._RewOrReqMoney
		End Get
		Set
			If ((Me._RewOrReqMoney = value)  _
						= false) Then
				Me.OnRewOrReqMoneyChanging(value)
				Me.SendPropertyChanging
				Me._RewOrReqMoney = value
				Me.SendPropertyChanged("RewOrReqMoney")
				Me.OnRewOrReqMoneyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RewMoneyMaxLevel", DbType:="Int NOT NULL")>  _
	Public Property RewMoneyMaxLevel() As Integer
		Get
			Return Me._RewMoneyMaxLevel
		End Get
		Set
			If ((Me._RewMoneyMaxLevel = value)  _
						= false) Then
				Me.OnRewMoneyMaxLevelChanging(value)
				Me.SendPropertyChanging
				Me._RewMoneyMaxLevel = value
				Me.SendPropertyChanged("RewMoneyMaxLevel")
				Me.OnRewMoneyMaxLevelChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RewSpell", DbType:="Int NOT NULL")>  _
	Public Property RewSpell() As Integer
		Get
			Return Me._RewSpell
		End Get
		Set
			If ((Me._RewSpell = value)  _
						= false) Then
				Me.OnRewSpellChanging(value)
				Me.SendPropertyChanging
				Me._RewSpell = value
				Me.SendPropertyChanged("RewSpell")
				Me.OnRewSpellChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RewSpellCast", DbType:="Int NOT NULL")>  _
	Public Property RewSpellCast() As Integer
		Get
			Return Me._RewSpellCast
		End Get
		Set
			If ((Me._RewSpellCast = value)  _
						= false) Then
				Me.OnRewSpellCastChanging(value)
				Me.SendPropertyChanging
				Me._RewSpellCast = value
				Me.SendPropertyChanged("RewSpellCast")
				Me.OnRewSpellCastChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RewMailTemplateId", DbType:="Int NOT NULL")>  _
	Public Property RewMailTemplateId() As Integer
		Get
			Return Me._RewMailTemplateId
		End Get
		Set
			If ((Me._RewMailTemplateId = value)  _
						= false) Then
				Me.OnRewMailTemplateIdChanging(value)
				Me.SendPropertyChanging
				Me._RewMailTemplateId = value
				Me.SendPropertyChanged("RewMailTemplateId")
				Me.OnRewMailTemplateIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RewMailDelaySecs", DbType:="Int NOT NULL")>  _
	Public Property RewMailDelaySecs() As Integer
		Get
			Return Me._RewMailDelaySecs
		End Get
		Set
			If ((Me._RewMailDelaySecs = value)  _
						= false) Then
				Me.OnRewMailDelaySecsChanging(value)
				Me.SendPropertyChanging
				Me._RewMailDelaySecs = value
				Me.SendPropertyChanged("RewMailDelaySecs")
				Me.OnRewMailDelaySecsChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_PointMapId", DbType:="SmallInt NOT NULL")>  _
	Public Property PointMapId() As Short
		Get
			Return Me._PointMapId
		End Get
		Set
			If ((Me._PointMapId = value)  _
						= false) Then
				Me.OnPointMapIdChanging(value)
				Me.SendPropertyChanging
				Me._PointMapId = value
				Me.SendPropertyChanged("PointMapId")
				Me.OnPointMapIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_PointX", DbType:="Real NOT NULL")>  _
	Public Property PointX() As Single
		Get
			Return Me._PointX
		End Get
		Set
			If ((Me._PointX = value)  _
						= false) Then
				Me.OnPointXChanging(value)
				Me.SendPropertyChanging
				Me._PointX = value
				Me.SendPropertyChanged("PointX")
				Me.OnPointXChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_PointY", DbType:="Real NOT NULL")>  _
	Public Property PointY() As Single
		Get
			Return Me._PointY
		End Get
		Set
			If ((Me._PointY = value)  _
						= false) Then
				Me.OnPointYChanging(value)
				Me.SendPropertyChanging
				Me._PointY = value
				Me.SendPropertyChanged("PointY")
				Me.OnPointYChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_PointOpt", DbType:="Int NOT NULL")>  _
	Public Property PointOpt() As Integer
		Get
			Return Me._PointOpt
		End Get
		Set
			If ((Me._PointOpt = value)  _
						= false) Then
				Me.OnPointOptChanging(value)
				Me.SendPropertyChanging
				Me._PointOpt = value
				Me.SendPropertyChanged("PointOpt")
				Me.OnPointOptChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_DetailsEmote1", DbType:="SmallInt NOT NULL")>  _
	Public Property DetailsEmote1() As Short
		Get
			Return Me._DetailsEmote1
		End Get
		Set
			If ((Me._DetailsEmote1 = value)  _
						= false) Then
				Me.OnDetailsEmote1Changing(value)
				Me.SendPropertyChanging
				Me._DetailsEmote1 = value
				Me.SendPropertyChanged("DetailsEmote1")
				Me.OnDetailsEmote1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_DetailsEmote2", DbType:="SmallInt NOT NULL")>  _
	Public Property DetailsEmote2() As Short
		Get
			Return Me._DetailsEmote2
		End Get
		Set
			If ((Me._DetailsEmote2 = value)  _
						= false) Then
				Me.OnDetailsEmote2Changing(value)
				Me.SendPropertyChanging
				Me._DetailsEmote2 = value
				Me.SendPropertyChanged("DetailsEmote2")
				Me.OnDetailsEmote2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_DetailsEmote3", DbType:="SmallInt NOT NULL")>  _
	Public Property DetailsEmote3() As Short
		Get
			Return Me._DetailsEmote3
		End Get
		Set
			If ((Me._DetailsEmote3 = value)  _
						= false) Then
				Me.OnDetailsEmote3Changing(value)
				Me.SendPropertyChanging
				Me._DetailsEmote3 = value
				Me.SendPropertyChanged("DetailsEmote3")
				Me.OnDetailsEmote3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_DetailsEmote4", DbType:="SmallInt NOT NULL")>  _
	Public Property DetailsEmote4() As Short
		Get
			Return Me._DetailsEmote4
		End Get
		Set
			If ((Me._DetailsEmote4 = value)  _
						= false) Then
				Me.OnDetailsEmote4Changing(value)
				Me.SendPropertyChanging
				Me._DetailsEmote4 = value
				Me.SendPropertyChanged("DetailsEmote4")
				Me.OnDetailsEmote4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_DetailsEmoteDelay1", DbType:="Int NOT NULL")>  _
	Public Property DetailsEmoteDelay1() As Integer
		Get
			Return Me._DetailsEmoteDelay1
		End Get
		Set
			If ((Me._DetailsEmoteDelay1 = value)  _
						= false) Then
				Me.OnDetailsEmoteDelay1Changing(value)
				Me.SendPropertyChanging
				Me._DetailsEmoteDelay1 = value
				Me.SendPropertyChanged("DetailsEmoteDelay1")
				Me.OnDetailsEmoteDelay1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_DetailsEmoteDelay2", DbType:="Int NOT NULL")>  _
	Public Property DetailsEmoteDelay2() As Integer
		Get
			Return Me._DetailsEmoteDelay2
		End Get
		Set
			If ((Me._DetailsEmoteDelay2 = value)  _
						= false) Then
				Me.OnDetailsEmoteDelay2Changing(value)
				Me.SendPropertyChanging
				Me._DetailsEmoteDelay2 = value
				Me.SendPropertyChanged("DetailsEmoteDelay2")
				Me.OnDetailsEmoteDelay2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_DetailsEmoteDelay3", DbType:="Int NOT NULL")>  _
	Public Property DetailsEmoteDelay3() As Integer
		Get
			Return Me._DetailsEmoteDelay3
		End Get
		Set
			If ((Me._DetailsEmoteDelay3 = value)  _
						= false) Then
				Me.OnDetailsEmoteDelay3Changing(value)
				Me.SendPropertyChanging
				Me._DetailsEmoteDelay3 = value
				Me.SendPropertyChanged("DetailsEmoteDelay3")
				Me.OnDetailsEmoteDelay3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_DetailsEmoteDelay4", DbType:="Int NOT NULL")>  _
	Public Property DetailsEmoteDelay4() As Integer
		Get
			Return Me._DetailsEmoteDelay4
		End Get
		Set
			If ((Me._DetailsEmoteDelay4 = value)  _
						= false) Then
				Me.OnDetailsEmoteDelay4Changing(value)
				Me.SendPropertyChanging
				Me._DetailsEmoteDelay4 = value
				Me.SendPropertyChanged("DetailsEmoteDelay4")
				Me.OnDetailsEmoteDelay4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_IncompleteEmote", DbType:="SmallInt NOT NULL")>  _
	Public Property IncompleteEmote() As Short
		Get
			Return Me._IncompleteEmote
		End Get
		Set
			If ((Me._IncompleteEmote = value)  _
						= false) Then
				Me.OnIncompleteEmoteChanging(value)
				Me.SendPropertyChanging
				Me._IncompleteEmote = value
				Me.SendPropertyChanged("IncompleteEmote")
				Me.OnIncompleteEmoteChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CompleteEmote", DbType:="SmallInt NOT NULL")>  _
	Public Property CompleteEmote() As Short
		Get
			Return Me._CompleteEmote
		End Get
		Set
			If ((Me._CompleteEmote = value)  _
						= false) Then
				Me.OnCompleteEmoteChanging(value)
				Me.SendPropertyChanging
				Me._CompleteEmote = value
				Me.SendPropertyChanged("CompleteEmote")
				Me.OnCompleteEmoteChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_OfferRewardEmote1", DbType:="SmallInt NOT NULL")>  _
	Public Property OfferRewardEmote1() As Short
		Get
			Return Me._OfferRewardEmote1
		End Get
		Set
			If ((Me._OfferRewardEmote1 = value)  _
						= false) Then
				Me.OnOfferRewardEmote1Changing(value)
				Me.SendPropertyChanging
				Me._OfferRewardEmote1 = value
				Me.SendPropertyChanged("OfferRewardEmote1")
				Me.OnOfferRewardEmote1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_OfferRewardEmote2", DbType:="SmallInt NOT NULL")>  _
	Public Property OfferRewardEmote2() As Short
		Get
			Return Me._OfferRewardEmote2
		End Get
		Set
			If ((Me._OfferRewardEmote2 = value)  _
						= false) Then
				Me.OnOfferRewardEmote2Changing(value)
				Me.SendPropertyChanging
				Me._OfferRewardEmote2 = value
				Me.SendPropertyChanged("OfferRewardEmote2")
				Me.OnOfferRewardEmote2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_OfferRewardEmote3", DbType:="SmallInt NOT NULL")>  _
	Public Property OfferRewardEmote3() As Short
		Get
			Return Me._OfferRewardEmote3
		End Get
		Set
			If ((Me._OfferRewardEmote3 = value)  _
						= false) Then
				Me.OnOfferRewardEmote3Changing(value)
				Me.SendPropertyChanging
				Me._OfferRewardEmote3 = value
				Me.SendPropertyChanged("OfferRewardEmote3")
				Me.OnOfferRewardEmote3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_OfferRewardEmote4", DbType:="SmallInt NOT NULL")>  _
	Public Property OfferRewardEmote4() As Short
		Get
			Return Me._OfferRewardEmote4
		End Get
		Set
			If ((Me._OfferRewardEmote4 = value)  _
						= false) Then
				Me.OnOfferRewardEmote4Changing(value)
				Me.SendPropertyChanging
				Me._OfferRewardEmote4 = value
				Me.SendPropertyChanged("OfferRewardEmote4")
				Me.OnOfferRewardEmote4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_OfferRewardEmoteDelay1", DbType:="Int NOT NULL")>  _
	Public Property OfferRewardEmoteDelay1() As Integer
		Get
			Return Me._OfferRewardEmoteDelay1
		End Get
		Set
			If ((Me._OfferRewardEmoteDelay1 = value)  _
						= false) Then
				Me.OnOfferRewardEmoteDelay1Changing(value)
				Me.SendPropertyChanging
				Me._OfferRewardEmoteDelay1 = value
				Me.SendPropertyChanged("OfferRewardEmoteDelay1")
				Me.OnOfferRewardEmoteDelay1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_OfferRewardEmoteDelay2", DbType:="Int NOT NULL")>  _
	Public Property OfferRewardEmoteDelay2() As Integer
		Get
			Return Me._OfferRewardEmoteDelay2
		End Get
		Set
			If ((Me._OfferRewardEmoteDelay2 = value)  _
						= false) Then
				Me.OnOfferRewardEmoteDelay2Changing(value)
				Me.SendPropertyChanging
				Me._OfferRewardEmoteDelay2 = value
				Me.SendPropertyChanged("OfferRewardEmoteDelay2")
				Me.OnOfferRewardEmoteDelay2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_OfferRewardEmoteDelay3", DbType:="Int NOT NULL")>  _
	Public Property OfferRewardEmoteDelay3() As Integer
		Get
			Return Me._OfferRewardEmoteDelay3
		End Get
		Set
			If ((Me._OfferRewardEmoteDelay3 = value)  _
						= false) Then
				Me.OnOfferRewardEmoteDelay3Changing(value)
				Me.SendPropertyChanging
				Me._OfferRewardEmoteDelay3 = value
				Me.SendPropertyChanged("OfferRewardEmoteDelay3")
				Me.OnOfferRewardEmoteDelay3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_OfferRewardEmoteDelay4", DbType:="Int NOT NULL")>  _
	Public Property OfferRewardEmoteDelay4() As Integer
		Get
			Return Me._OfferRewardEmoteDelay4
		End Get
		Set
			If ((Me._OfferRewardEmoteDelay4 = value)  _
						= false) Then
				Me.OnOfferRewardEmoteDelay4Changing(value)
				Me.SendPropertyChanging
				Me._OfferRewardEmoteDelay4 = value
				Me.SendPropertyChanged("OfferRewardEmoteDelay4")
				Me.OnOfferRewardEmoteDelay4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_StartScript", DbType:="Int NOT NULL")>  _
	Public Property StartScript() As Integer
		Get
			Return Me._StartScript
		End Get
		Set
			If ((Me._StartScript = value)  _
						= false) Then
				Me.OnStartScriptChanging(value)
				Me.SendPropertyChanging
				Me._StartScript = value
				Me.SendPropertyChanged("StartScript")
				Me.OnStartScriptChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CompleteScript", DbType:="Int NOT NULL")>  _
	Public Property CompleteScript() As Integer
		Get
			Return Me._CompleteScript
		End Get
		Set
			If ((Me._CompleteScript = value)  _
						= false) Then
				Me.OnCompleteScriptChanging(value)
				Me.SendPropertyChanging
				Me._CompleteScript = value
				Me.SendPropertyChanged("CompleteScript")
				Me.OnCompleteScriptChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.battlemaster_entry")>  _
Partial Public Class battlemaster_entry
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _entry As Integer
	
	Private _bg_template As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnentryChanging(value As Integer)
    End Sub
    Partial Private Sub OnentryChanged()
    End Sub
    Partial Private Sub Onbg_templateChanging(value As Integer)
    End Sub
    Partial Private Sub Onbg_templateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_entry", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property entry() As Integer
		Get
			Return Me._entry
		End Get
		Set
			If ((Me._entry = value)  _
						= false) Then
				Me.OnentryChanging(value)
				Me.SendPropertyChanging
				Me._entry = value
				Me.SendPropertyChanged("entry")
				Me.OnentryChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_bg_template", DbType:="Int NOT NULL")>  _
	Public Property bg_template() As Integer
		Get
			Return Me._bg_template
		End Get
		Set
			If ((Me._bg_template = value)  _
						= false) Then
				Me.Onbg_templateChanging(value)
				Me.SendPropertyChanging
				Me._bg_template = value
				Me.SendPropertyChanged("bg_template")
				Me.Onbg_templateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.battleground_template")>  _
Partial Public Class battleground_template
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _MinPlayersPerTeam As Short
	
	Private _MaxPlayersPerTeam As Short
	
	Private _AllianceStartLoc As Integer
	
	Private _AllianceStartO As Single
	
	Private _HordeStartLoc As Integer
	
	Private _HordeStartO As Single
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnMinPlayersPerTeamChanging(value As Short)
    End Sub
    Partial Private Sub OnMinPlayersPerTeamChanged()
    End Sub
    Partial Private Sub OnMaxPlayersPerTeamChanging(value As Short)
    End Sub
    Partial Private Sub OnMaxPlayersPerTeamChanged()
    End Sub
    Partial Private Sub OnAllianceStartLocChanging(value As Integer)
    End Sub
    Partial Private Sub OnAllianceStartLocChanged()
    End Sub
    Partial Private Sub OnAllianceStartOChanging(value As Single)
    End Sub
    Partial Private Sub OnAllianceStartOChanged()
    End Sub
    Partial Private Sub OnHordeStartLocChanging(value As Integer)
    End Sub
    Partial Private Sub OnHordeStartLocChanged()
    End Sub
    Partial Private Sub OnHordeStartOChanging(value As Single)
    End Sub
    Partial Private Sub OnHordeStartOChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_MinPlayersPerTeam", DbType:="SmallInt NOT NULL")>  _
	Public Property MinPlayersPerTeam() As Short
		Get
			Return Me._MinPlayersPerTeam
		End Get
		Set
			If ((Me._MinPlayersPerTeam = value)  _
						= false) Then
				Me.OnMinPlayersPerTeamChanging(value)
				Me.SendPropertyChanging
				Me._MinPlayersPerTeam = value
				Me.SendPropertyChanged("MinPlayersPerTeam")
				Me.OnMinPlayersPerTeamChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_MaxPlayersPerTeam", DbType:="SmallInt NOT NULL")>  _
	Public Property MaxPlayersPerTeam() As Short
		Get
			Return Me._MaxPlayersPerTeam
		End Get
		Set
			If ((Me._MaxPlayersPerTeam = value)  _
						= false) Then
				Me.OnMaxPlayersPerTeamChanging(value)
				Me.SendPropertyChanging
				Me._MaxPlayersPerTeam = value
				Me.SendPropertyChanged("MaxPlayersPerTeam")
				Me.OnMaxPlayersPerTeamChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_AllianceStartLoc", DbType:="Int NOT NULL")>  _
	Public Property AllianceStartLoc() As Integer
		Get
			Return Me._AllianceStartLoc
		End Get
		Set
			If ((Me._AllianceStartLoc = value)  _
						= false) Then
				Me.OnAllianceStartLocChanging(value)
				Me.SendPropertyChanging
				Me._AllianceStartLoc = value
				Me.SendPropertyChanged("AllianceStartLoc")
				Me.OnAllianceStartLocChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_AllianceStartO", DbType:="Real NOT NULL")>  _
	Public Property AllianceStartO() As Single
		Get
			Return Me._AllianceStartO
		End Get
		Set
			If ((Me._AllianceStartO = value)  _
						= false) Then
				Me.OnAllianceStartOChanging(value)
				Me.SendPropertyChanging
				Me._AllianceStartO = value
				Me.SendPropertyChanged("AllianceStartO")
				Me.OnAllianceStartOChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_HordeStartLoc", DbType:="Int NOT NULL")>  _
	Public Property HordeStartLoc() As Integer
		Get
			Return Me._HordeStartLoc
		End Get
		Set
			If ((Me._HordeStartLoc = value)  _
						= false) Then
				Me.OnHordeStartLocChanging(value)
				Me.SendPropertyChanging
				Me._HordeStartLoc = value
				Me.SendPropertyChanged("HordeStartLoc")
				Me.OnHordeStartLocChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_HordeStartO", DbType:="Real NOT NULL")>  _
	Public Property HordeStartO() As Single
		Get
			Return Me._HordeStartO
		End Get
		Set
			If ((Me._HordeStartO = value)  _
						= false) Then
				Me.OnHordeStartOChanging(value)
				Me.SendPropertyChanging
				Me._HordeStartO = value
				Me.SendPropertyChanged("HordeStartO")
				Me.OnHordeStartOChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.areatrigger_involvedrelation")>  _
Partial Public Class areatrigger_involvedrelation
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _quest As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnquestChanging(value As Integer)
    End Sub
    Partial Private Sub OnquestChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_quest", DbType:="Int NOT NULL")>  _
	Public Property quest() As Integer
		Get
			Return Me._quest
		End Get
		Set
			If ((Me._quest = value)  _
						= false) Then
				Me.OnquestChanging(value)
				Me.SendPropertyChanging
				Me._quest = value
				Me.SendPropertyChanged("quest")
				Me.OnquestChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.areatrigger_tavern")>  _
Partial Public Class areatrigger_tavern
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _name As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_name", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.areatrigger_teleport")>  _
Partial Public Class areatrigger_teleport
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _name As String
	
	Private _required_level As Byte
	
	Private _required_item As Integer
	
	Private _required_item2 As Integer
	
	Private _heroic_key As Integer
	
	Private _heroic_key2 As Integer
	
	Private _required_quest_done As Integer
	
	Private _required_quest_done_heroic As Integer
	
	Private _required_failed_text As String
	
	Private _target_map As Short
	
	Private _target_position_x As Single
	
	Private _target_position_y As Single
	
	Private _target_position_z As Single
	
	Private _target_orientation As Single
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub Onrequired_levelChanging(value As Byte)
    End Sub
    Partial Private Sub Onrequired_levelChanged()
    End Sub
    Partial Private Sub Onrequired_itemChanging(value As Integer)
    End Sub
    Partial Private Sub Onrequired_itemChanged()
    End Sub
    Partial Private Sub Onrequired_item2Changing(value As Integer)
    End Sub
    Partial Private Sub Onrequired_item2Changed()
    End Sub
    Partial Private Sub Onheroic_keyChanging(value As Integer)
    End Sub
    Partial Private Sub Onheroic_keyChanged()
    End Sub
    Partial Private Sub Onheroic_key2Changing(value As Integer)
    End Sub
    Partial Private Sub Onheroic_key2Changed()
    End Sub
    Partial Private Sub Onrequired_quest_doneChanging(value As Integer)
    End Sub
    Partial Private Sub Onrequired_quest_doneChanged()
    End Sub
    Partial Private Sub Onrequired_quest_done_heroicChanging(value As Integer)
    End Sub
    Partial Private Sub Onrequired_quest_done_heroicChanged()
    End Sub
    Partial Private Sub Onrequired_failed_textChanging(value As String)
    End Sub
    Partial Private Sub Onrequired_failed_textChanged()
    End Sub
    Partial Private Sub Ontarget_mapChanging(value As Short)
    End Sub
    Partial Private Sub Ontarget_mapChanged()
    End Sub
    Partial Private Sub Ontarget_position_xChanging(value As Single)
    End Sub
    Partial Private Sub Ontarget_position_xChanged()
    End Sub
    Partial Private Sub Ontarget_position_yChanging(value As Single)
    End Sub
    Partial Private Sub Ontarget_position_yChanged()
    End Sub
    Partial Private Sub Ontarget_position_zChanging(value As Single)
    End Sub
    Partial Private Sub Ontarget_position_zChanged()
    End Sub
    Partial Private Sub Ontarget_orientationChanging(value As Single)
    End Sub
    Partial Private Sub Ontarget_orientationChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_name", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_required_level", DbType:="TinyInt NOT NULL")>  _
	Public Property required_level() As Byte
		Get
			Return Me._required_level
		End Get
		Set
			If ((Me._required_level = value)  _
						= false) Then
				Me.Onrequired_levelChanging(value)
				Me.SendPropertyChanging
				Me._required_level = value
				Me.SendPropertyChanged("required_level")
				Me.Onrequired_levelChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_required_item", DbType:="Int NOT NULL")>  _
	Public Property required_item() As Integer
		Get
			Return Me._required_item
		End Get
		Set
			If ((Me._required_item = value)  _
						= false) Then
				Me.Onrequired_itemChanging(value)
				Me.SendPropertyChanging
				Me._required_item = value
				Me.SendPropertyChanged("required_item")
				Me.Onrequired_itemChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_required_item2", DbType:="Int NOT NULL")>  _
	Public Property required_item2() As Integer
		Get
			Return Me._required_item2
		End Get
		Set
			If ((Me._required_item2 = value)  _
						= false) Then
				Me.Onrequired_item2Changing(value)
				Me.SendPropertyChanging
				Me._required_item2 = value
				Me.SendPropertyChanged("required_item2")
				Me.Onrequired_item2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_heroic_key", DbType:="Int NOT NULL")>  _
	Public Property heroic_key() As Integer
		Get
			Return Me._heroic_key
		End Get
		Set
			If ((Me._heroic_key = value)  _
						= false) Then
				Me.Onheroic_keyChanging(value)
				Me.SendPropertyChanging
				Me._heroic_key = value
				Me.SendPropertyChanged("heroic_key")
				Me.Onheroic_keyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_heroic_key2", DbType:="Int NOT NULL")>  _
	Public Property heroic_key2() As Integer
		Get
			Return Me._heroic_key2
		End Get
		Set
			If ((Me._heroic_key2 = value)  _
						= false) Then
				Me.Onheroic_key2Changing(value)
				Me.SendPropertyChanging
				Me._heroic_key2 = value
				Me.SendPropertyChanged("heroic_key2")
				Me.Onheroic_key2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_required_quest_done", DbType:="Int NOT NULL")>  _
	Public Property required_quest_done() As Integer
		Get
			Return Me._required_quest_done
		End Get
		Set
			If ((Me._required_quest_done = value)  _
						= false) Then
				Me.Onrequired_quest_doneChanging(value)
				Me.SendPropertyChanging
				Me._required_quest_done = value
				Me.SendPropertyChanged("required_quest_done")
				Me.Onrequired_quest_doneChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_required_quest_done_heroic", DbType:="Int NOT NULL")>  _
	Public Property required_quest_done_heroic() As Integer
		Get
			Return Me._required_quest_done_heroic
		End Get
		Set
			If ((Me._required_quest_done_heroic = value)  _
						= false) Then
				Me.Onrequired_quest_done_heroicChanging(value)
				Me.SendPropertyChanging
				Me._required_quest_done_heroic = value
				Me.SendPropertyChanged("required_quest_done_heroic")
				Me.Onrequired_quest_done_heroicChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_required_failed_text", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property required_failed_text() As String
		Get
			Return Me._required_failed_text
		End Get
		Set
			If (String.Equals(Me._required_failed_text, value) = false) Then
				Me.Onrequired_failed_textChanging(value)
				Me.SendPropertyChanging
				Me._required_failed_text = value
				Me.SendPropertyChanged("required_failed_text")
				Me.Onrequired_failed_textChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_target_map", DbType:="SmallInt NOT NULL")>  _
	Public Property target_map() As Short
		Get
			Return Me._target_map
		End Get
		Set
			If ((Me._target_map = value)  _
						= false) Then
				Me.Ontarget_mapChanging(value)
				Me.SendPropertyChanging
				Me._target_map = value
				Me.SendPropertyChanged("target_map")
				Me.Ontarget_mapChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_target_position_x", DbType:="Real NOT NULL")>  _
	Public Property target_position_x() As Single
		Get
			Return Me._target_position_x
		End Get
		Set
			If ((Me._target_position_x = value)  _
						= false) Then
				Me.Ontarget_position_xChanging(value)
				Me.SendPropertyChanging
				Me._target_position_x = value
				Me.SendPropertyChanged("target_position_x")
				Me.Ontarget_position_xChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_target_position_y", DbType:="Real NOT NULL")>  _
	Public Property target_position_y() As Single
		Get
			Return Me._target_position_y
		End Get
		Set
			If ((Me._target_position_y = value)  _
						= false) Then
				Me.Ontarget_position_yChanging(value)
				Me.SendPropertyChanging
				Me._target_position_y = value
				Me.SendPropertyChanged("target_position_y")
				Me.Ontarget_position_yChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_target_position_z", DbType:="Real NOT NULL")>  _
	Public Property target_position_z() As Single
		Get
			Return Me._target_position_z
		End Get
		Set
			If ((Me._target_position_z = value)  _
						= false) Then
				Me.Ontarget_position_zChanging(value)
				Me.SendPropertyChanging
				Me._target_position_z = value
				Me.SendPropertyChanged("target_position_z")
				Me.Ontarget_position_zChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_target_orientation", DbType:="Real NOT NULL")>  _
	Public Property target_orientation() As Single
		Get
			Return Me._target_orientation
		End Get
		Set
			If ((Me._target_orientation = value)  _
						= false) Then
				Me.Ontarget_orientationChanging(value)
				Me.SendPropertyChanging
				Me._target_orientation = value
				Me.SendPropertyChanged("target_orientation")
				Me.Ontarget_orientationChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.spell_target_position")>  _
Partial Public Class spell_target_position
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _target_map As Short
	
	Private _target_position_x As Single
	
	Private _target_position_y As Single
	
	Private _target_position_z As Single
	
	Private _target_orientation As Single
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub Ontarget_mapChanging(value As Short)
    End Sub
    Partial Private Sub Ontarget_mapChanged()
    End Sub
    Partial Private Sub Ontarget_position_xChanging(value As Single)
    End Sub
    Partial Private Sub Ontarget_position_xChanged()
    End Sub
    Partial Private Sub Ontarget_position_yChanging(value As Single)
    End Sub
    Partial Private Sub Ontarget_position_yChanged()
    End Sub
    Partial Private Sub Ontarget_position_zChanging(value As Single)
    End Sub
    Partial Private Sub Ontarget_position_zChanged()
    End Sub
    Partial Private Sub Ontarget_orientationChanging(value As Single)
    End Sub
    Partial Private Sub Ontarget_orientationChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_target_map", DbType:="SmallInt NOT NULL")>  _
	Public Property target_map() As Short
		Get
			Return Me._target_map
		End Get
		Set
			If ((Me._target_map = value)  _
						= false) Then
				Me.Ontarget_mapChanging(value)
				Me.SendPropertyChanging
				Me._target_map = value
				Me.SendPropertyChanged("target_map")
				Me.Ontarget_mapChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_target_position_x", DbType:="Real NOT NULL")>  _
	Public Property target_position_x() As Single
		Get
			Return Me._target_position_x
		End Get
		Set
			If ((Me._target_position_x = value)  _
						= false) Then
				Me.Ontarget_position_xChanging(value)
				Me.SendPropertyChanging
				Me._target_position_x = value
				Me.SendPropertyChanged("target_position_x")
				Me.Ontarget_position_xChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_target_position_y", DbType:="Real NOT NULL")>  _
	Public Property target_position_y() As Single
		Get
			Return Me._target_position_y
		End Get
		Set
			If ((Me._target_position_y = value)  _
						= false) Then
				Me.Ontarget_position_yChanging(value)
				Me.SendPropertyChanging
				Me._target_position_y = value
				Me.SendPropertyChanged("target_position_y")
				Me.Ontarget_position_yChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_target_position_z", DbType:="Real NOT NULL")>  _
	Public Property target_position_z() As Single
		Get
			Return Me._target_position_z
		End Get
		Set
			If ((Me._target_position_z = value)  _
						= false) Then
				Me.Ontarget_position_zChanging(value)
				Me.SendPropertyChanging
				Me._target_position_z = value
				Me.SendPropertyChanged("target_position_z")
				Me.Ontarget_position_zChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_target_orientation", DbType:="Real NOT NULL")>  _
	Public Property target_orientation() As Single
		Get
			Return Me._target_orientation
		End Get
		Set
			If ((Me._target_orientation = value)  _
						= false) Then
				Me.Ontarget_orientationChanging(value)
				Me.SendPropertyChanging
				Me._target_orientation = value
				Me.SendPropertyChanged("target_orientation")
				Me.Ontarget_orientationChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.npc_gossip")>  _
Partial Public Class npc_gossip
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _npc_guid As Integer
	
	Private _textid As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onnpc_guidChanging(value As Integer)
    End Sub
    Partial Private Sub Onnpc_guidChanged()
    End Sub
    Partial Private Sub OntextidChanging(value As Integer)
    End Sub
    Partial Private Sub OntextidChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_npc_guid", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property npc_guid() As Integer
		Get
			Return Me._npc_guid
		End Get
		Set
			If ((Me._npc_guid = value)  _
						= false) Then
				Me.Onnpc_guidChanging(value)
				Me.SendPropertyChanging
				Me._npc_guid = value
				Me.SendPropertyChanged("npc_guid")
				Me.Onnpc_guidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_textid", DbType:="Int NOT NULL")>  _
	Public Property textid() As Integer
		Get
			Return Me._textid
		End Get
		Set
			If ((Me._textid = value)  _
						= false) Then
				Me.OntextidChanging(value)
				Me.SendPropertyChanging
				Me._textid = value
				Me.SendPropertyChanged("textid")
				Me.OntextidChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.npc_trainer")>  _
Partial Public Class npc_trainer
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _entry As Integer
	
	Private _spell As Integer
	
	Private _spellcost As Integer
	
	Private _reqskill As Short
	
	Private _reqskillvalue As Short
	
	Private _reqlevel As Byte
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnentryChanging(value As Integer)
    End Sub
    Partial Private Sub OnentryChanged()
    End Sub
    Partial Private Sub OnspellChanging(value As Integer)
    End Sub
    Partial Private Sub OnspellChanged()
    End Sub
    Partial Private Sub OnspellcostChanging(value As Integer)
    End Sub
    Partial Private Sub OnspellcostChanged()
    End Sub
    Partial Private Sub OnreqskillChanging(value As Short)
    End Sub
    Partial Private Sub OnreqskillChanged()
    End Sub
    Partial Private Sub OnreqskillvalueChanging(value As Short)
    End Sub
    Partial Private Sub OnreqskillvalueChanged()
    End Sub
    Partial Private Sub OnreqlevelChanging(value As Byte)
    End Sub
    Partial Private Sub OnreqlevelChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_entry", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property entry() As Integer
		Get
			Return Me._entry
		End Get
		Set
			If ((Me._entry = value)  _
						= false) Then
				Me.OnentryChanging(value)
				Me.SendPropertyChanging
				Me._entry = value
				Me.SendPropertyChanged("entry")
				Me.OnentryChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_spell", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property spell() As Integer
		Get
			Return Me._spell
		End Get
		Set
			If ((Me._spell = value)  _
						= false) Then
				Me.OnspellChanging(value)
				Me.SendPropertyChanging
				Me._spell = value
				Me.SendPropertyChanged("spell")
				Me.OnspellChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_spellcost", DbType:="Int NOT NULL")>  _
	Public Property spellcost() As Integer
		Get
			Return Me._spellcost
		End Get
		Set
			If ((Me._spellcost = value)  _
						= false) Then
				Me.OnspellcostChanging(value)
				Me.SendPropertyChanging
				Me._spellcost = value
				Me.SendPropertyChanged("spellcost")
				Me.OnspellcostChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_reqskill", DbType:="SmallInt NOT NULL")>  _
	Public Property reqskill() As Short
		Get
			Return Me._reqskill
		End Get
		Set
			If ((Me._reqskill = value)  _
						= false) Then
				Me.OnreqskillChanging(value)
				Me.SendPropertyChanging
				Me._reqskill = value
				Me.SendPropertyChanged("reqskill")
				Me.OnreqskillChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_reqskillvalue", DbType:="SmallInt NOT NULL")>  _
	Public Property reqskillvalue() As Short
		Get
			Return Me._reqskillvalue
		End Get
		Set
			If ((Me._reqskillvalue = value)  _
						= false) Then
				Me.OnreqskillvalueChanging(value)
				Me.SendPropertyChanging
				Me._reqskillvalue = value
				Me.SendPropertyChanged("reqskillvalue")
				Me.OnreqskillvalueChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_reqlevel", DbType:="TinyInt NOT NULL")>  _
	Public Property reqlevel() As Byte
		Get
			Return Me._reqlevel
		End Get
		Set
			If ((Me._reqlevel = value)  _
						= false) Then
				Me.OnreqlevelChanging(value)
				Me.SendPropertyChanging
				Me._reqlevel = value
				Me.SendPropertyChanged("reqlevel")
				Me.OnreqlevelChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.npc_vendor")>  _
Partial Public Class npc_vendor
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _entry As Integer
	
	Private _item As Integer
	
	Private _maxcount As Byte
	
	Private _incrtime As Integer
	
	Private _ExtendedCost As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnentryChanging(value As Integer)
    End Sub
    Partial Private Sub OnentryChanged()
    End Sub
    Partial Private Sub OnitemChanging(value As Integer)
    End Sub
    Partial Private Sub OnitemChanged()
    End Sub
    Partial Private Sub OnmaxcountChanging(value As Byte)
    End Sub
    Partial Private Sub OnmaxcountChanged()
    End Sub
    Partial Private Sub OnincrtimeChanging(value As Integer)
    End Sub
    Partial Private Sub OnincrtimeChanged()
    End Sub
    Partial Private Sub OnExtendedCostChanging(value As Integer)
    End Sub
    Partial Private Sub OnExtendedCostChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_entry", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property entry() As Integer
		Get
			Return Me._entry
		End Get
		Set
			If ((Me._entry = value)  _
						= false) Then
				Me.OnentryChanging(value)
				Me.SendPropertyChanging
				Me._entry = value
				Me.SendPropertyChanged("entry")
				Me.OnentryChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_item", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property item() As Integer
		Get
			Return Me._item
		End Get
		Set
			If ((Me._item = value)  _
						= false) Then
				Me.OnitemChanging(value)
				Me.SendPropertyChanging
				Me._item = value
				Me.SendPropertyChanged("item")
				Me.OnitemChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_maxcount", DbType:="TinyInt NOT NULL")>  _
	Public Property maxcount() As Byte
		Get
			Return Me._maxcount
		End Get
		Set
			If ((Me._maxcount = value)  _
						= false) Then
				Me.OnmaxcountChanging(value)
				Me.SendPropertyChanging
				Me._maxcount = value
				Me.SendPropertyChanged("maxcount")
				Me.OnmaxcountChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_incrtime", DbType:="Int NOT NULL")>  _
	Public Property incrtime() As Integer
		Get
			Return Me._incrtime
		End Get
		Set
			If ((Me._incrtime = value)  _
						= false) Then
				Me.OnincrtimeChanging(value)
				Me.SendPropertyChanging
				Me._incrtime = value
				Me.SendPropertyChanged("incrtime")
				Me.OnincrtimeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ExtendedCost", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ExtendedCost() As Integer
		Get
			Return Me._ExtendedCost
		End Get
		Set
			If ((Me._ExtendedCost = value)  _
						= false) Then
				Me.OnExtendedCostChanging(value)
				Me.SendPropertyChanging
				Me._ExtendedCost = value
				Me.SendPropertyChanged("ExtendedCost")
				Me.OnExtendedCostChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.npc_text")>  _
Partial Public Class npc_text
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _text0_0 As String
	
	Private _text0_1 As String
	
	Private _lang0 As Byte
	
	Private _prob0 As Single
	
	Private _em0_0 As Short
	
	Private _em0_1 As Short
	
	Private _em0_2 As Short
	
	Private _em0_3 As Short
	
	Private _em0_4 As Short
	
	Private _em0_5 As Short
	
	Private _text1_0 As String
	
	Private _text1_1 As String
	
	Private _lang1 As Byte
	
	Private _prob1 As Single
	
	Private _em1_0 As Short
	
	Private _em1_1 As Short
	
	Private _em1_2 As Short
	
	Private _em1_3 As Short
	
	Private _em1_4 As Short
	
	Private _em1_5 As Short
	
	Private _text2_0 As String
	
	Private _text2_1 As String
	
	Private _lang2 As Byte
	
	Private _prob2 As Single
	
	Private _em2_0 As Short
	
	Private _em2_1 As Short
	
	Private _em2_2 As Short
	
	Private _em2_3 As Short
	
	Private _em2_4 As Short
	
	Private _em2_5 As Short
	
	Private _text3_0 As String
	
	Private _text3_1 As String
	
	Private _lang3 As Byte
	
	Private _prob3 As Single
	
	Private _em3_0 As Short
	
	Private _em3_1 As Short
	
	Private _em3_2 As Short
	
	Private _em3_3 As Short
	
	Private _em3_4 As Short
	
	Private _em3_5 As Short
	
	Private _text4_0 As String
	
	Private _text4_1 As String
	
	Private _lang4 As Byte
	
	Private _prob4 As Single
	
	Private _em4_0 As Short
	
	Private _em4_1 As Short
	
	Private _em4_2 As Short
	
	Private _em4_3 As Short
	
	Private _em4_4 As Short
	
	Private _em4_5 As Short
	
	Private _text5_0 As String
	
	Private _text5_1 As String
	
	Private _lang5 As Byte
	
	Private _prob5 As Single
	
	Private _em5_0 As Short
	
	Private _em5_1 As Short
	
	Private _em5_2 As Short
	
	Private _em5_3 As Short
	
	Private _em5_4 As Short
	
	Private _em5_5 As Short
	
	Private _text6_0 As String
	
	Private _text6_1 As String
	
	Private _lang6 As Byte
	
	Private _prob6 As Single
	
	Private _em6_0 As Short
	
	Private _em6_1 As Short
	
	Private _em6_2 As Short
	
	Private _em6_3 As Short
	
	Private _em6_4 As Short
	
	Private _em6_5 As Short
	
	Private _text7_0 As String
	
	Private _text7_1 As String
	
	Private _lang7 As Byte
	
	Private _prob7 As Single
	
	Private _em7_0 As Short
	
	Private _em7_1 As Short
	
	Private _em7_2 As Short
	
	Private _em7_3 As Short
	
	Private _em7_4 As Short
	
	Private _em7_5 As Short
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub Ontext0_0Changing(value As String)
    End Sub
    Partial Private Sub Ontext0_0Changed()
    End Sub
    Partial Private Sub Ontext0_1Changing(value As String)
    End Sub
    Partial Private Sub Ontext0_1Changed()
    End Sub
    Partial Private Sub Onlang0Changing(value As Byte)
    End Sub
    Partial Private Sub Onlang0Changed()
    End Sub
    Partial Private Sub Onprob0Changing(value As Single)
    End Sub
    Partial Private Sub Onprob0Changed()
    End Sub
    Partial Private Sub Onem0_0Changing(value As Short)
    End Sub
    Partial Private Sub Onem0_0Changed()
    End Sub
    Partial Private Sub Onem0_1Changing(value As Short)
    End Sub
    Partial Private Sub Onem0_1Changed()
    End Sub
    Partial Private Sub Onem0_2Changing(value As Short)
    End Sub
    Partial Private Sub Onem0_2Changed()
    End Sub
    Partial Private Sub Onem0_3Changing(value As Short)
    End Sub
    Partial Private Sub Onem0_3Changed()
    End Sub
    Partial Private Sub Onem0_4Changing(value As Short)
    End Sub
    Partial Private Sub Onem0_4Changed()
    End Sub
    Partial Private Sub Onem0_5Changing(value As Short)
    End Sub
    Partial Private Sub Onem0_5Changed()
    End Sub
    Partial Private Sub Ontext1_0Changing(value As String)
    End Sub
    Partial Private Sub Ontext1_0Changed()
    End Sub
    Partial Private Sub Ontext1_1Changing(value As String)
    End Sub
    Partial Private Sub Ontext1_1Changed()
    End Sub
    Partial Private Sub Onlang1Changing(value As Byte)
    End Sub
    Partial Private Sub Onlang1Changed()
    End Sub
    Partial Private Sub Onprob1Changing(value As Single)
    End Sub
    Partial Private Sub Onprob1Changed()
    End Sub
    Partial Private Sub Onem1_0Changing(value As Short)
    End Sub
    Partial Private Sub Onem1_0Changed()
    End Sub
    Partial Private Sub Onem1_1Changing(value As Short)
    End Sub
    Partial Private Sub Onem1_1Changed()
    End Sub
    Partial Private Sub Onem1_2Changing(value As Short)
    End Sub
    Partial Private Sub Onem1_2Changed()
    End Sub
    Partial Private Sub Onem1_3Changing(value As Short)
    End Sub
    Partial Private Sub Onem1_3Changed()
    End Sub
    Partial Private Sub Onem1_4Changing(value As Short)
    End Sub
    Partial Private Sub Onem1_4Changed()
    End Sub
    Partial Private Sub Onem1_5Changing(value As Short)
    End Sub
    Partial Private Sub Onem1_5Changed()
    End Sub
    Partial Private Sub Ontext2_0Changing(value As String)
    End Sub
    Partial Private Sub Ontext2_0Changed()
    End Sub
    Partial Private Sub Ontext2_1Changing(value As String)
    End Sub
    Partial Private Sub Ontext2_1Changed()
    End Sub
    Partial Private Sub Onlang2Changing(value As Byte)
    End Sub
    Partial Private Sub Onlang2Changed()
    End Sub
    Partial Private Sub Onprob2Changing(value As Single)
    End Sub
    Partial Private Sub Onprob2Changed()
    End Sub
    Partial Private Sub Onem2_0Changing(value As Short)
    End Sub
    Partial Private Sub Onem2_0Changed()
    End Sub
    Partial Private Sub Onem2_1Changing(value As Short)
    End Sub
    Partial Private Sub Onem2_1Changed()
    End Sub
    Partial Private Sub Onem2_2Changing(value As Short)
    End Sub
    Partial Private Sub Onem2_2Changed()
    End Sub
    Partial Private Sub Onem2_3Changing(value As Short)
    End Sub
    Partial Private Sub Onem2_3Changed()
    End Sub
    Partial Private Sub Onem2_4Changing(value As Short)
    End Sub
    Partial Private Sub Onem2_4Changed()
    End Sub
    Partial Private Sub Onem2_5Changing(value As Short)
    End Sub
    Partial Private Sub Onem2_5Changed()
    End Sub
    Partial Private Sub Ontext3_0Changing(value As String)
    End Sub
    Partial Private Sub Ontext3_0Changed()
    End Sub
    Partial Private Sub Ontext3_1Changing(value As String)
    End Sub
    Partial Private Sub Ontext3_1Changed()
    End Sub
    Partial Private Sub Onlang3Changing(value As Byte)
    End Sub
    Partial Private Sub Onlang3Changed()
    End Sub
    Partial Private Sub Onprob3Changing(value As Single)
    End Sub
    Partial Private Sub Onprob3Changed()
    End Sub
    Partial Private Sub Onem3_0Changing(value As Short)
    End Sub
    Partial Private Sub Onem3_0Changed()
    End Sub
    Partial Private Sub Onem3_1Changing(value As Short)
    End Sub
    Partial Private Sub Onem3_1Changed()
    End Sub
    Partial Private Sub Onem3_2Changing(value As Short)
    End Sub
    Partial Private Sub Onem3_2Changed()
    End Sub
    Partial Private Sub Onem3_3Changing(value As Short)
    End Sub
    Partial Private Sub Onem3_3Changed()
    End Sub
    Partial Private Sub Onem3_4Changing(value As Short)
    End Sub
    Partial Private Sub Onem3_4Changed()
    End Sub
    Partial Private Sub Onem3_5Changing(value As Short)
    End Sub
    Partial Private Sub Onem3_5Changed()
    End Sub
    Partial Private Sub Ontext4_0Changing(value As String)
    End Sub
    Partial Private Sub Ontext4_0Changed()
    End Sub
    Partial Private Sub Ontext4_1Changing(value As String)
    End Sub
    Partial Private Sub Ontext4_1Changed()
    End Sub
    Partial Private Sub Onlang4Changing(value As Byte)
    End Sub
    Partial Private Sub Onlang4Changed()
    End Sub
    Partial Private Sub Onprob4Changing(value As Single)
    End Sub
    Partial Private Sub Onprob4Changed()
    End Sub
    Partial Private Sub Onem4_0Changing(value As Short)
    End Sub
    Partial Private Sub Onem4_0Changed()
    End Sub
    Partial Private Sub Onem4_1Changing(value As Short)
    End Sub
    Partial Private Sub Onem4_1Changed()
    End Sub
    Partial Private Sub Onem4_2Changing(value As Short)
    End Sub
    Partial Private Sub Onem4_2Changed()
    End Sub
    Partial Private Sub Onem4_3Changing(value As Short)
    End Sub
    Partial Private Sub Onem4_3Changed()
    End Sub
    Partial Private Sub Onem4_4Changing(value As Short)
    End Sub
    Partial Private Sub Onem4_4Changed()
    End Sub
    Partial Private Sub Onem4_5Changing(value As Short)
    End Sub
    Partial Private Sub Onem4_5Changed()
    End Sub
    Partial Private Sub Ontext5_0Changing(value As String)
    End Sub
    Partial Private Sub Ontext5_0Changed()
    End Sub
    Partial Private Sub Ontext5_1Changing(value As String)
    End Sub
    Partial Private Sub Ontext5_1Changed()
    End Sub
    Partial Private Sub Onlang5Changing(value As Byte)
    End Sub
    Partial Private Sub Onlang5Changed()
    End Sub
    Partial Private Sub Onprob5Changing(value As Single)
    End Sub
    Partial Private Sub Onprob5Changed()
    End Sub
    Partial Private Sub Onem5_0Changing(value As Short)
    End Sub
    Partial Private Sub Onem5_0Changed()
    End Sub
    Partial Private Sub Onem5_1Changing(value As Short)
    End Sub
    Partial Private Sub Onem5_1Changed()
    End Sub
    Partial Private Sub Onem5_2Changing(value As Short)
    End Sub
    Partial Private Sub Onem5_2Changed()
    End Sub
    Partial Private Sub Onem5_3Changing(value As Short)
    End Sub
    Partial Private Sub Onem5_3Changed()
    End Sub
    Partial Private Sub Onem5_4Changing(value As Short)
    End Sub
    Partial Private Sub Onem5_4Changed()
    End Sub
    Partial Private Sub Onem5_5Changing(value As Short)
    End Sub
    Partial Private Sub Onem5_5Changed()
    End Sub
    Partial Private Sub Ontext6_0Changing(value As String)
    End Sub
    Partial Private Sub Ontext6_0Changed()
    End Sub
    Partial Private Sub Ontext6_1Changing(value As String)
    End Sub
    Partial Private Sub Ontext6_1Changed()
    End Sub
    Partial Private Sub Onlang6Changing(value As Byte)
    End Sub
    Partial Private Sub Onlang6Changed()
    End Sub
    Partial Private Sub Onprob6Changing(value As Single)
    End Sub
    Partial Private Sub Onprob6Changed()
    End Sub
    Partial Private Sub Onem6_0Changing(value As Short)
    End Sub
    Partial Private Sub Onem6_0Changed()
    End Sub
    Partial Private Sub Onem6_1Changing(value As Short)
    End Sub
    Partial Private Sub Onem6_1Changed()
    End Sub
    Partial Private Sub Onem6_2Changing(value As Short)
    End Sub
    Partial Private Sub Onem6_2Changed()
    End Sub
    Partial Private Sub Onem6_3Changing(value As Short)
    End Sub
    Partial Private Sub Onem6_3Changed()
    End Sub
    Partial Private Sub Onem6_4Changing(value As Short)
    End Sub
    Partial Private Sub Onem6_4Changed()
    End Sub
    Partial Private Sub Onem6_5Changing(value As Short)
    End Sub
    Partial Private Sub Onem6_5Changed()
    End Sub
    Partial Private Sub Ontext7_0Changing(value As String)
    End Sub
    Partial Private Sub Ontext7_0Changed()
    End Sub
    Partial Private Sub Ontext7_1Changing(value As String)
    End Sub
    Partial Private Sub Ontext7_1Changed()
    End Sub
    Partial Private Sub Onlang7Changing(value As Byte)
    End Sub
    Partial Private Sub Onlang7Changed()
    End Sub
    Partial Private Sub Onprob7Changing(value As Single)
    End Sub
    Partial Private Sub Onprob7Changed()
    End Sub
    Partial Private Sub Onem7_0Changing(value As Short)
    End Sub
    Partial Private Sub Onem7_0Changed()
    End Sub
    Partial Private Sub Onem7_1Changing(value As Short)
    End Sub
    Partial Private Sub Onem7_1Changed()
    End Sub
    Partial Private Sub Onem7_2Changing(value As Short)
    End Sub
    Partial Private Sub Onem7_2Changed()
    End Sub
    Partial Private Sub Onem7_3Changing(value As Short)
    End Sub
    Partial Private Sub Onem7_3Changed()
    End Sub
    Partial Private Sub Onem7_4Changing(value As Short)
    End Sub
    Partial Private Sub Onem7_4Changed()
    End Sub
    Partial Private Sub Onem7_5Changing(value As Short)
    End Sub
    Partial Private Sub Onem7_5Changed()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_text0_0", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property text0_0() As String
		Get
			Return Me._text0_0
		End Get
		Set
			If (String.Equals(Me._text0_0, value) = false) Then
				Me.Ontext0_0Changing(value)
				Me.SendPropertyChanging
				Me._text0_0 = value
				Me.SendPropertyChanged("text0_0")
				Me.Ontext0_0Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_text0_1", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property text0_1() As String
		Get
			Return Me._text0_1
		End Get
		Set
			If (String.Equals(Me._text0_1, value) = false) Then
				Me.Ontext0_1Changing(value)
				Me.SendPropertyChanging
				Me._text0_1 = value
				Me.SendPropertyChanged("text0_1")
				Me.Ontext0_1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_lang0", DbType:="TinyInt NOT NULL")>  _
	Public Property lang0() As Byte
		Get
			Return Me._lang0
		End Get
		Set
			If ((Me._lang0 = value)  _
						= false) Then
				Me.Onlang0Changing(value)
				Me.SendPropertyChanging
				Me._lang0 = value
				Me.SendPropertyChanged("lang0")
				Me.Onlang0Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_prob0", DbType:="Real NOT NULL")>  _
	Public Property prob0() As Single
		Get
			Return Me._prob0
		End Get
		Set
			If ((Me._prob0 = value)  _
						= false) Then
				Me.Onprob0Changing(value)
				Me.SendPropertyChanging
				Me._prob0 = value
				Me.SendPropertyChanged("prob0")
				Me.Onprob0Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em0_0", DbType:="SmallInt NOT NULL")>  _
	Public Property em0_0() As Short
		Get
			Return Me._em0_0
		End Get
		Set
			If ((Me._em0_0 = value)  _
						= false) Then
				Me.Onem0_0Changing(value)
				Me.SendPropertyChanging
				Me._em0_0 = value
				Me.SendPropertyChanged("em0_0")
				Me.Onem0_0Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em0_1", DbType:="SmallInt NOT NULL")>  _
	Public Property em0_1() As Short
		Get
			Return Me._em0_1
		End Get
		Set
			If ((Me._em0_1 = value)  _
						= false) Then
				Me.Onem0_1Changing(value)
				Me.SendPropertyChanging
				Me._em0_1 = value
				Me.SendPropertyChanged("em0_1")
				Me.Onem0_1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em0_2", DbType:="SmallInt NOT NULL")>  _
	Public Property em0_2() As Short
		Get
			Return Me._em0_2
		End Get
		Set
			If ((Me._em0_2 = value)  _
						= false) Then
				Me.Onem0_2Changing(value)
				Me.SendPropertyChanging
				Me._em0_2 = value
				Me.SendPropertyChanged("em0_2")
				Me.Onem0_2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em0_3", DbType:="SmallInt NOT NULL")>  _
	Public Property em0_3() As Short
		Get
			Return Me._em0_3
		End Get
		Set
			If ((Me._em0_3 = value)  _
						= false) Then
				Me.Onem0_3Changing(value)
				Me.SendPropertyChanging
				Me._em0_3 = value
				Me.SendPropertyChanged("em0_3")
				Me.Onem0_3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em0_4", DbType:="SmallInt NOT NULL")>  _
	Public Property em0_4() As Short
		Get
			Return Me._em0_4
		End Get
		Set
			If ((Me._em0_4 = value)  _
						= false) Then
				Me.Onem0_4Changing(value)
				Me.SendPropertyChanging
				Me._em0_4 = value
				Me.SendPropertyChanged("em0_4")
				Me.Onem0_4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em0_5", DbType:="SmallInt NOT NULL")>  _
	Public Property em0_5() As Short
		Get
			Return Me._em0_5
		End Get
		Set
			If ((Me._em0_5 = value)  _
						= false) Then
				Me.Onem0_5Changing(value)
				Me.SendPropertyChanging
				Me._em0_5 = value
				Me.SendPropertyChanged("em0_5")
				Me.Onem0_5Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_text1_0", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property text1_0() As String
		Get
			Return Me._text1_0
		End Get
		Set
			If (String.Equals(Me._text1_0, value) = false) Then
				Me.Ontext1_0Changing(value)
				Me.SendPropertyChanging
				Me._text1_0 = value
				Me.SendPropertyChanged("text1_0")
				Me.Ontext1_0Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_text1_1", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property text1_1() As String
		Get
			Return Me._text1_1
		End Get
		Set
			If (String.Equals(Me._text1_1, value) = false) Then
				Me.Ontext1_1Changing(value)
				Me.SendPropertyChanging
				Me._text1_1 = value
				Me.SendPropertyChanged("text1_1")
				Me.Ontext1_1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_lang1", DbType:="TinyInt NOT NULL")>  _
	Public Property lang1() As Byte
		Get
			Return Me._lang1
		End Get
		Set
			If ((Me._lang1 = value)  _
						= false) Then
				Me.Onlang1Changing(value)
				Me.SendPropertyChanging
				Me._lang1 = value
				Me.SendPropertyChanged("lang1")
				Me.Onlang1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_prob1", DbType:="Real NOT NULL")>  _
	Public Property prob1() As Single
		Get
			Return Me._prob1
		End Get
		Set
			If ((Me._prob1 = value)  _
						= false) Then
				Me.Onprob1Changing(value)
				Me.SendPropertyChanging
				Me._prob1 = value
				Me.SendPropertyChanged("prob1")
				Me.Onprob1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em1_0", DbType:="SmallInt NOT NULL")>  _
	Public Property em1_0() As Short
		Get
			Return Me._em1_0
		End Get
		Set
			If ((Me._em1_0 = value)  _
						= false) Then
				Me.Onem1_0Changing(value)
				Me.SendPropertyChanging
				Me._em1_0 = value
				Me.SendPropertyChanged("em1_0")
				Me.Onem1_0Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em1_1", DbType:="SmallInt NOT NULL")>  _
	Public Property em1_1() As Short
		Get
			Return Me._em1_1
		End Get
		Set
			If ((Me._em1_1 = value)  _
						= false) Then
				Me.Onem1_1Changing(value)
				Me.SendPropertyChanging
				Me._em1_1 = value
				Me.SendPropertyChanged("em1_1")
				Me.Onem1_1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em1_2", DbType:="SmallInt NOT NULL")>  _
	Public Property em1_2() As Short
		Get
			Return Me._em1_2
		End Get
		Set
			If ((Me._em1_2 = value)  _
						= false) Then
				Me.Onem1_2Changing(value)
				Me.SendPropertyChanging
				Me._em1_2 = value
				Me.SendPropertyChanged("em1_2")
				Me.Onem1_2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em1_3", DbType:="SmallInt NOT NULL")>  _
	Public Property em1_3() As Short
		Get
			Return Me._em1_3
		End Get
		Set
			If ((Me._em1_3 = value)  _
						= false) Then
				Me.Onem1_3Changing(value)
				Me.SendPropertyChanging
				Me._em1_3 = value
				Me.SendPropertyChanged("em1_3")
				Me.Onem1_3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em1_4", DbType:="SmallInt NOT NULL")>  _
	Public Property em1_4() As Short
		Get
			Return Me._em1_4
		End Get
		Set
			If ((Me._em1_4 = value)  _
						= false) Then
				Me.Onem1_4Changing(value)
				Me.SendPropertyChanging
				Me._em1_4 = value
				Me.SendPropertyChanged("em1_4")
				Me.Onem1_4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em1_5", DbType:="SmallInt NOT NULL")>  _
	Public Property em1_5() As Short
		Get
			Return Me._em1_5
		End Get
		Set
			If ((Me._em1_5 = value)  _
						= false) Then
				Me.Onem1_5Changing(value)
				Me.SendPropertyChanging
				Me._em1_5 = value
				Me.SendPropertyChanged("em1_5")
				Me.Onem1_5Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_text2_0", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property text2_0() As String
		Get
			Return Me._text2_0
		End Get
		Set
			If (String.Equals(Me._text2_0, value) = false) Then
				Me.Ontext2_0Changing(value)
				Me.SendPropertyChanging
				Me._text2_0 = value
				Me.SendPropertyChanged("text2_0")
				Me.Ontext2_0Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_text2_1", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property text2_1() As String
		Get
			Return Me._text2_1
		End Get
		Set
			If (String.Equals(Me._text2_1, value) = false) Then
				Me.Ontext2_1Changing(value)
				Me.SendPropertyChanging
				Me._text2_1 = value
				Me.SendPropertyChanged("text2_1")
				Me.Ontext2_1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_lang2", DbType:="TinyInt NOT NULL")>  _
	Public Property lang2() As Byte
		Get
			Return Me._lang2
		End Get
		Set
			If ((Me._lang2 = value)  _
						= false) Then
				Me.Onlang2Changing(value)
				Me.SendPropertyChanging
				Me._lang2 = value
				Me.SendPropertyChanged("lang2")
				Me.Onlang2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_prob2", DbType:="Real NOT NULL")>  _
	Public Property prob2() As Single
		Get
			Return Me._prob2
		End Get
		Set
			If ((Me._prob2 = value)  _
						= false) Then
				Me.Onprob2Changing(value)
				Me.SendPropertyChanging
				Me._prob2 = value
				Me.SendPropertyChanged("prob2")
				Me.Onprob2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em2_0", DbType:="SmallInt NOT NULL")>  _
	Public Property em2_0() As Short
		Get
			Return Me._em2_0
		End Get
		Set
			If ((Me._em2_0 = value)  _
						= false) Then
				Me.Onem2_0Changing(value)
				Me.SendPropertyChanging
				Me._em2_0 = value
				Me.SendPropertyChanged("em2_0")
				Me.Onem2_0Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em2_1", DbType:="SmallInt NOT NULL")>  _
	Public Property em2_1() As Short
		Get
			Return Me._em2_1
		End Get
		Set
			If ((Me._em2_1 = value)  _
						= false) Then
				Me.Onem2_1Changing(value)
				Me.SendPropertyChanging
				Me._em2_1 = value
				Me.SendPropertyChanged("em2_1")
				Me.Onem2_1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em2_2", DbType:="SmallInt NOT NULL")>  _
	Public Property em2_2() As Short
		Get
			Return Me._em2_2
		End Get
		Set
			If ((Me._em2_2 = value)  _
						= false) Then
				Me.Onem2_2Changing(value)
				Me.SendPropertyChanging
				Me._em2_2 = value
				Me.SendPropertyChanged("em2_2")
				Me.Onem2_2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em2_3", DbType:="SmallInt NOT NULL")>  _
	Public Property em2_3() As Short
		Get
			Return Me._em2_3
		End Get
		Set
			If ((Me._em2_3 = value)  _
						= false) Then
				Me.Onem2_3Changing(value)
				Me.SendPropertyChanging
				Me._em2_3 = value
				Me.SendPropertyChanged("em2_3")
				Me.Onem2_3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em2_4", DbType:="SmallInt NOT NULL")>  _
	Public Property em2_4() As Short
		Get
			Return Me._em2_4
		End Get
		Set
			If ((Me._em2_4 = value)  _
						= false) Then
				Me.Onem2_4Changing(value)
				Me.SendPropertyChanging
				Me._em2_4 = value
				Me.SendPropertyChanged("em2_4")
				Me.Onem2_4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em2_5", DbType:="SmallInt NOT NULL")>  _
	Public Property em2_5() As Short
		Get
			Return Me._em2_5
		End Get
		Set
			If ((Me._em2_5 = value)  _
						= false) Then
				Me.Onem2_5Changing(value)
				Me.SendPropertyChanging
				Me._em2_5 = value
				Me.SendPropertyChanged("em2_5")
				Me.Onem2_5Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_text3_0", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property text3_0() As String
		Get
			Return Me._text3_0
		End Get
		Set
			If (String.Equals(Me._text3_0, value) = false) Then
				Me.Ontext3_0Changing(value)
				Me.SendPropertyChanging
				Me._text3_0 = value
				Me.SendPropertyChanged("text3_0")
				Me.Ontext3_0Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_text3_1", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property text3_1() As String
		Get
			Return Me._text3_1
		End Get
		Set
			If (String.Equals(Me._text3_1, value) = false) Then
				Me.Ontext3_1Changing(value)
				Me.SendPropertyChanging
				Me._text3_1 = value
				Me.SendPropertyChanged("text3_1")
				Me.Ontext3_1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_lang3", DbType:="TinyInt NOT NULL")>  _
	Public Property lang3() As Byte
		Get
			Return Me._lang3
		End Get
		Set
			If ((Me._lang3 = value)  _
						= false) Then
				Me.Onlang3Changing(value)
				Me.SendPropertyChanging
				Me._lang3 = value
				Me.SendPropertyChanged("lang3")
				Me.Onlang3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_prob3", DbType:="Real NOT NULL")>  _
	Public Property prob3() As Single
		Get
			Return Me._prob3
		End Get
		Set
			If ((Me._prob3 = value)  _
						= false) Then
				Me.Onprob3Changing(value)
				Me.SendPropertyChanging
				Me._prob3 = value
				Me.SendPropertyChanged("prob3")
				Me.Onprob3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em3_0", DbType:="SmallInt NOT NULL")>  _
	Public Property em3_0() As Short
		Get
			Return Me._em3_0
		End Get
		Set
			If ((Me._em3_0 = value)  _
						= false) Then
				Me.Onem3_0Changing(value)
				Me.SendPropertyChanging
				Me._em3_0 = value
				Me.SendPropertyChanged("em3_0")
				Me.Onem3_0Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em3_1", DbType:="SmallInt NOT NULL")>  _
	Public Property em3_1() As Short
		Get
			Return Me._em3_1
		End Get
		Set
			If ((Me._em3_1 = value)  _
						= false) Then
				Me.Onem3_1Changing(value)
				Me.SendPropertyChanging
				Me._em3_1 = value
				Me.SendPropertyChanged("em3_1")
				Me.Onem3_1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em3_2", DbType:="SmallInt NOT NULL")>  _
	Public Property em3_2() As Short
		Get
			Return Me._em3_2
		End Get
		Set
			If ((Me._em3_2 = value)  _
						= false) Then
				Me.Onem3_2Changing(value)
				Me.SendPropertyChanging
				Me._em3_2 = value
				Me.SendPropertyChanged("em3_2")
				Me.Onem3_2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em3_3", DbType:="SmallInt NOT NULL")>  _
	Public Property em3_3() As Short
		Get
			Return Me._em3_3
		End Get
		Set
			If ((Me._em3_3 = value)  _
						= false) Then
				Me.Onem3_3Changing(value)
				Me.SendPropertyChanging
				Me._em3_3 = value
				Me.SendPropertyChanged("em3_3")
				Me.Onem3_3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em3_4", DbType:="SmallInt NOT NULL")>  _
	Public Property em3_4() As Short
		Get
			Return Me._em3_4
		End Get
		Set
			If ((Me._em3_4 = value)  _
						= false) Then
				Me.Onem3_4Changing(value)
				Me.SendPropertyChanging
				Me._em3_4 = value
				Me.SendPropertyChanged("em3_4")
				Me.Onem3_4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em3_5", DbType:="SmallInt NOT NULL")>  _
	Public Property em3_5() As Short
		Get
			Return Me._em3_5
		End Get
		Set
			If ((Me._em3_5 = value)  _
						= false) Then
				Me.Onem3_5Changing(value)
				Me.SendPropertyChanging
				Me._em3_5 = value
				Me.SendPropertyChanged("em3_5")
				Me.Onem3_5Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_text4_0", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property text4_0() As String
		Get
			Return Me._text4_0
		End Get
		Set
			If (String.Equals(Me._text4_0, value) = false) Then
				Me.Ontext4_0Changing(value)
				Me.SendPropertyChanging
				Me._text4_0 = value
				Me.SendPropertyChanged("text4_0")
				Me.Ontext4_0Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_text4_1", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property text4_1() As String
		Get
			Return Me._text4_1
		End Get
		Set
			If (String.Equals(Me._text4_1, value) = false) Then
				Me.Ontext4_1Changing(value)
				Me.SendPropertyChanging
				Me._text4_1 = value
				Me.SendPropertyChanged("text4_1")
				Me.Ontext4_1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_lang4", DbType:="TinyInt NOT NULL")>  _
	Public Property lang4() As Byte
		Get
			Return Me._lang4
		End Get
		Set
			If ((Me._lang4 = value)  _
						= false) Then
				Me.Onlang4Changing(value)
				Me.SendPropertyChanging
				Me._lang4 = value
				Me.SendPropertyChanged("lang4")
				Me.Onlang4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_prob4", DbType:="Real NOT NULL")>  _
	Public Property prob4() As Single
		Get
			Return Me._prob4
		End Get
		Set
			If ((Me._prob4 = value)  _
						= false) Then
				Me.Onprob4Changing(value)
				Me.SendPropertyChanging
				Me._prob4 = value
				Me.SendPropertyChanged("prob4")
				Me.Onprob4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em4_0", DbType:="SmallInt NOT NULL")>  _
	Public Property em4_0() As Short
		Get
			Return Me._em4_0
		End Get
		Set
			If ((Me._em4_0 = value)  _
						= false) Then
				Me.Onem4_0Changing(value)
				Me.SendPropertyChanging
				Me._em4_0 = value
				Me.SendPropertyChanged("em4_0")
				Me.Onem4_0Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em4_1", DbType:="SmallInt NOT NULL")>  _
	Public Property em4_1() As Short
		Get
			Return Me._em4_1
		End Get
		Set
			If ((Me._em4_1 = value)  _
						= false) Then
				Me.Onem4_1Changing(value)
				Me.SendPropertyChanging
				Me._em4_1 = value
				Me.SendPropertyChanged("em4_1")
				Me.Onem4_1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em4_2", DbType:="SmallInt NOT NULL")>  _
	Public Property em4_2() As Short
		Get
			Return Me._em4_2
		End Get
		Set
			If ((Me._em4_2 = value)  _
						= false) Then
				Me.Onem4_2Changing(value)
				Me.SendPropertyChanging
				Me._em4_2 = value
				Me.SendPropertyChanged("em4_2")
				Me.Onem4_2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em4_3", DbType:="SmallInt NOT NULL")>  _
	Public Property em4_3() As Short
		Get
			Return Me._em4_3
		End Get
		Set
			If ((Me._em4_3 = value)  _
						= false) Then
				Me.Onem4_3Changing(value)
				Me.SendPropertyChanging
				Me._em4_3 = value
				Me.SendPropertyChanged("em4_3")
				Me.Onem4_3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em4_4", DbType:="SmallInt NOT NULL")>  _
	Public Property em4_4() As Short
		Get
			Return Me._em4_4
		End Get
		Set
			If ((Me._em4_4 = value)  _
						= false) Then
				Me.Onem4_4Changing(value)
				Me.SendPropertyChanging
				Me._em4_4 = value
				Me.SendPropertyChanged("em4_4")
				Me.Onem4_4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em4_5", DbType:="SmallInt NOT NULL")>  _
	Public Property em4_5() As Short
		Get
			Return Me._em4_5
		End Get
		Set
			If ((Me._em4_5 = value)  _
						= false) Then
				Me.Onem4_5Changing(value)
				Me.SendPropertyChanging
				Me._em4_5 = value
				Me.SendPropertyChanged("em4_5")
				Me.Onem4_5Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_text5_0", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property text5_0() As String
		Get
			Return Me._text5_0
		End Get
		Set
			If (String.Equals(Me._text5_0, value) = false) Then
				Me.Ontext5_0Changing(value)
				Me.SendPropertyChanging
				Me._text5_0 = value
				Me.SendPropertyChanged("text5_0")
				Me.Ontext5_0Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_text5_1", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property text5_1() As String
		Get
			Return Me._text5_1
		End Get
		Set
			If (String.Equals(Me._text5_1, value) = false) Then
				Me.Ontext5_1Changing(value)
				Me.SendPropertyChanging
				Me._text5_1 = value
				Me.SendPropertyChanged("text5_1")
				Me.Ontext5_1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_lang5", DbType:="TinyInt NOT NULL")>  _
	Public Property lang5() As Byte
		Get
			Return Me._lang5
		End Get
		Set
			If ((Me._lang5 = value)  _
						= false) Then
				Me.Onlang5Changing(value)
				Me.SendPropertyChanging
				Me._lang5 = value
				Me.SendPropertyChanged("lang5")
				Me.Onlang5Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_prob5", DbType:="Real NOT NULL")>  _
	Public Property prob5() As Single
		Get
			Return Me._prob5
		End Get
		Set
			If ((Me._prob5 = value)  _
						= false) Then
				Me.Onprob5Changing(value)
				Me.SendPropertyChanging
				Me._prob5 = value
				Me.SendPropertyChanged("prob5")
				Me.Onprob5Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em5_0", DbType:="SmallInt NOT NULL")>  _
	Public Property em5_0() As Short
		Get
			Return Me._em5_0
		End Get
		Set
			If ((Me._em5_0 = value)  _
						= false) Then
				Me.Onem5_0Changing(value)
				Me.SendPropertyChanging
				Me._em5_0 = value
				Me.SendPropertyChanged("em5_0")
				Me.Onem5_0Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em5_1", DbType:="SmallInt NOT NULL")>  _
	Public Property em5_1() As Short
		Get
			Return Me._em5_1
		End Get
		Set
			If ((Me._em5_1 = value)  _
						= false) Then
				Me.Onem5_1Changing(value)
				Me.SendPropertyChanging
				Me._em5_1 = value
				Me.SendPropertyChanged("em5_1")
				Me.Onem5_1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em5_2", DbType:="SmallInt NOT NULL")>  _
	Public Property em5_2() As Short
		Get
			Return Me._em5_2
		End Get
		Set
			If ((Me._em5_2 = value)  _
						= false) Then
				Me.Onem5_2Changing(value)
				Me.SendPropertyChanging
				Me._em5_2 = value
				Me.SendPropertyChanged("em5_2")
				Me.Onem5_2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em5_3", DbType:="SmallInt NOT NULL")>  _
	Public Property em5_3() As Short
		Get
			Return Me._em5_3
		End Get
		Set
			If ((Me._em5_3 = value)  _
						= false) Then
				Me.Onem5_3Changing(value)
				Me.SendPropertyChanging
				Me._em5_3 = value
				Me.SendPropertyChanged("em5_3")
				Me.Onem5_3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em5_4", DbType:="SmallInt NOT NULL")>  _
	Public Property em5_4() As Short
		Get
			Return Me._em5_4
		End Get
		Set
			If ((Me._em5_4 = value)  _
						= false) Then
				Me.Onem5_4Changing(value)
				Me.SendPropertyChanging
				Me._em5_4 = value
				Me.SendPropertyChanged("em5_4")
				Me.Onem5_4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em5_5", DbType:="SmallInt NOT NULL")>  _
	Public Property em5_5() As Short
		Get
			Return Me._em5_5
		End Get
		Set
			If ((Me._em5_5 = value)  _
						= false) Then
				Me.Onem5_5Changing(value)
				Me.SendPropertyChanging
				Me._em5_5 = value
				Me.SendPropertyChanged("em5_5")
				Me.Onem5_5Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_text6_0", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property text6_0() As String
		Get
			Return Me._text6_0
		End Get
		Set
			If (String.Equals(Me._text6_0, value) = false) Then
				Me.Ontext6_0Changing(value)
				Me.SendPropertyChanging
				Me._text6_0 = value
				Me.SendPropertyChanged("text6_0")
				Me.Ontext6_0Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_text6_1", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property text6_1() As String
		Get
			Return Me._text6_1
		End Get
		Set
			If (String.Equals(Me._text6_1, value) = false) Then
				Me.Ontext6_1Changing(value)
				Me.SendPropertyChanging
				Me._text6_1 = value
				Me.SendPropertyChanged("text6_1")
				Me.Ontext6_1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_lang6", DbType:="TinyInt NOT NULL")>  _
	Public Property lang6() As Byte
		Get
			Return Me._lang6
		End Get
		Set
			If ((Me._lang6 = value)  _
						= false) Then
				Me.Onlang6Changing(value)
				Me.SendPropertyChanging
				Me._lang6 = value
				Me.SendPropertyChanged("lang6")
				Me.Onlang6Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_prob6", DbType:="Real NOT NULL")>  _
	Public Property prob6() As Single
		Get
			Return Me._prob6
		End Get
		Set
			If ((Me._prob6 = value)  _
						= false) Then
				Me.Onprob6Changing(value)
				Me.SendPropertyChanging
				Me._prob6 = value
				Me.SendPropertyChanged("prob6")
				Me.Onprob6Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em6_0", DbType:="SmallInt NOT NULL")>  _
	Public Property em6_0() As Short
		Get
			Return Me._em6_0
		End Get
		Set
			If ((Me._em6_0 = value)  _
						= false) Then
				Me.Onem6_0Changing(value)
				Me.SendPropertyChanging
				Me._em6_0 = value
				Me.SendPropertyChanged("em6_0")
				Me.Onem6_0Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em6_1", DbType:="SmallInt NOT NULL")>  _
	Public Property em6_1() As Short
		Get
			Return Me._em6_1
		End Get
		Set
			If ((Me._em6_1 = value)  _
						= false) Then
				Me.Onem6_1Changing(value)
				Me.SendPropertyChanging
				Me._em6_1 = value
				Me.SendPropertyChanged("em6_1")
				Me.Onem6_1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em6_2", DbType:="SmallInt NOT NULL")>  _
	Public Property em6_2() As Short
		Get
			Return Me._em6_2
		End Get
		Set
			If ((Me._em6_2 = value)  _
						= false) Then
				Me.Onem6_2Changing(value)
				Me.SendPropertyChanging
				Me._em6_2 = value
				Me.SendPropertyChanged("em6_2")
				Me.Onem6_2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em6_3", DbType:="SmallInt NOT NULL")>  _
	Public Property em6_3() As Short
		Get
			Return Me._em6_3
		End Get
		Set
			If ((Me._em6_3 = value)  _
						= false) Then
				Me.Onem6_3Changing(value)
				Me.SendPropertyChanging
				Me._em6_3 = value
				Me.SendPropertyChanged("em6_3")
				Me.Onem6_3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em6_4", DbType:="SmallInt NOT NULL")>  _
	Public Property em6_4() As Short
		Get
			Return Me._em6_4
		End Get
		Set
			If ((Me._em6_4 = value)  _
						= false) Then
				Me.Onem6_4Changing(value)
				Me.SendPropertyChanging
				Me._em6_4 = value
				Me.SendPropertyChanged("em6_4")
				Me.Onem6_4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em6_5", DbType:="SmallInt NOT NULL")>  _
	Public Property em6_5() As Short
		Get
			Return Me._em6_5
		End Get
		Set
			If ((Me._em6_5 = value)  _
						= false) Then
				Me.Onem6_5Changing(value)
				Me.SendPropertyChanging
				Me._em6_5 = value
				Me.SendPropertyChanged("em6_5")
				Me.Onem6_5Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_text7_0", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property text7_0() As String
		Get
			Return Me._text7_0
		End Get
		Set
			If (String.Equals(Me._text7_0, value) = false) Then
				Me.Ontext7_0Changing(value)
				Me.SendPropertyChanging
				Me._text7_0 = value
				Me.SendPropertyChanged("text7_0")
				Me.Ontext7_0Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_text7_1", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property text7_1() As String
		Get
			Return Me._text7_1
		End Get
		Set
			If (String.Equals(Me._text7_1, value) = false) Then
				Me.Ontext7_1Changing(value)
				Me.SendPropertyChanging
				Me._text7_1 = value
				Me.SendPropertyChanged("text7_1")
				Me.Ontext7_1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_lang7", DbType:="TinyInt NOT NULL")>  _
	Public Property lang7() As Byte
		Get
			Return Me._lang7
		End Get
		Set
			If ((Me._lang7 = value)  _
						= false) Then
				Me.Onlang7Changing(value)
				Me.SendPropertyChanging
				Me._lang7 = value
				Me.SendPropertyChanged("lang7")
				Me.Onlang7Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_prob7", DbType:="Real NOT NULL")>  _
	Public Property prob7() As Single
		Get
			Return Me._prob7
		End Get
		Set
			If ((Me._prob7 = value)  _
						= false) Then
				Me.Onprob7Changing(value)
				Me.SendPropertyChanging
				Me._prob7 = value
				Me.SendPropertyChanged("prob7")
				Me.Onprob7Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em7_0", DbType:="SmallInt NOT NULL")>  _
	Public Property em7_0() As Short
		Get
			Return Me._em7_0
		End Get
		Set
			If ((Me._em7_0 = value)  _
						= false) Then
				Me.Onem7_0Changing(value)
				Me.SendPropertyChanging
				Me._em7_0 = value
				Me.SendPropertyChanged("em7_0")
				Me.Onem7_0Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em7_1", DbType:="SmallInt NOT NULL")>  _
	Public Property em7_1() As Short
		Get
			Return Me._em7_1
		End Get
		Set
			If ((Me._em7_1 = value)  _
						= false) Then
				Me.Onem7_1Changing(value)
				Me.SendPropertyChanging
				Me._em7_1 = value
				Me.SendPropertyChanged("em7_1")
				Me.Onem7_1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em7_2", DbType:="SmallInt NOT NULL")>  _
	Public Property em7_2() As Short
		Get
			Return Me._em7_2
		End Get
		Set
			If ((Me._em7_2 = value)  _
						= false) Then
				Me.Onem7_2Changing(value)
				Me.SendPropertyChanging
				Me._em7_2 = value
				Me.SendPropertyChanged("em7_2")
				Me.Onem7_2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em7_3", DbType:="SmallInt NOT NULL")>  _
	Public Property em7_3() As Short
		Get
			Return Me._em7_3
		End Get
		Set
			If ((Me._em7_3 = value)  _
						= false) Then
				Me.Onem7_3Changing(value)
				Me.SendPropertyChanging
				Me._em7_3 = value
				Me.SendPropertyChanged("em7_3")
				Me.Onem7_3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em7_4", DbType:="SmallInt NOT NULL")>  _
	Public Property em7_4() As Short
		Get
			Return Me._em7_4
		End Get
		Set
			If ((Me._em7_4 = value)  _
						= false) Then
				Me.Onem7_4Changing(value)
				Me.SendPropertyChanging
				Me._em7_4 = value
				Me.SendPropertyChanged("em7_4")
				Me.Onem7_4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em7_5", DbType:="SmallInt NOT NULL")>  _
	Public Property em7_5() As Short
		Get
			Return Me._em7_5
		End Get
		Set
			If ((Me._em7_5 = value)  _
						= false) Then
				Me.Onem7_5Changing(value)
				Me.SendPropertyChanging
				Me._em7_5 = value
				Me.SendPropertyChanged("em7_5")
				Me.Onem7_5Changed
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.npc_spellclick_spells")>  _
Partial Public Class npc_spellclick_spell
	
	Private _npc_entry As Integer
	
	Private _spell_id As Integer
	
	Private _quest_start As Integer
	
	Private _quest_start_active As Byte
	
	Private _quest_end As Integer
	
	Private _cast_flags As Byte
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Column(Storage:="_npc_entry", DbType:="Int NOT NULL")>  _
	Public Property npc_entry() As Integer
		Get
			Return Me._npc_entry
		End Get
		Set
			If ((Me._npc_entry = value)  _
						= false) Then
				Me._npc_entry = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_spell_id", DbType:="Int NOT NULL")>  _
	Public Property spell_id() As Integer
		Get
			Return Me._spell_id
		End Get
		Set
			If ((Me._spell_id = value)  _
						= false) Then
				Me._spell_id = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_quest_start", DbType:="Int NOT NULL")>  _
	Public Property quest_start() As Integer
		Get
			Return Me._quest_start
		End Get
		Set
			If ((Me._quest_start = value)  _
						= false) Then
				Me._quest_start = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_quest_start_active", DbType:="TinyInt NOT NULL")>  _
	Public Property quest_start_active() As Byte
		Get
			Return Me._quest_start_active
		End Get
		Set
			If ((Me._quest_start_active = value)  _
						= false) Then
				Me._quest_start_active = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_quest_end", DbType:="Int NOT NULL")>  _
	Public Property quest_end() As Integer
		Get
			Return Me._quest_end
		End Get
		Set
			If ((Me._quest_end = value)  _
						= false) Then
				Me._quest_end = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_cast_flags", DbType:="TinyInt NOT NULL")>  _
	Public Property cast_flags() As Byte
		Get
			Return Me._cast_flags
		End Get
		Set
			If ((Me._cast_flags = value)  _
						= false) Then
				Me._cast_flags = value
			End If
		End Set
	End Property
End Class

<Table(Name:="dbo.creature_questrelation")>  _
Partial Public Class creature_questrelation
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _quest As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnquestChanging(value As Integer)
    End Sub
    Partial Private Sub OnquestChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_quest", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property quest() As Integer
		Get
			Return Me._quest
		End Get
		Set
			If ((Me._quest = value)  _
						= false) Then
				Me.OnquestChanging(value)
				Me.SendPropertyChanging
				Me._quest = value
				Me.SendPropertyChanged("quest")
				Me.OnquestChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.creature_involvedrelation")>  _
Partial Public Class creature_involvedrelation
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _quest As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnquestChanging(value As Integer)
    End Sub
    Partial Private Sub OnquestChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_quest", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property quest() As Integer
		Get
			Return Me._quest
		End Get
		Set
			If ((Me._quest = value)  _
						= false) Then
				Me.OnquestChanging(value)
				Me.SendPropertyChanging
				Me._quest = value
				Me.SendPropertyChanged("quest")
				Me.OnquestChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.gameobject_questrelation")>  _
Partial Public Class gameobject_questrelation
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _quest As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnquestChanging(value As Integer)
    End Sub
    Partial Private Sub OnquestChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_quest", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property quest() As Integer
		Get
			Return Me._quest
		End Get
		Set
			If ((Me._quest = value)  _
						= false) Then
				Me.OnquestChanging(value)
				Me.SendPropertyChanging
				Me._quest = value
				Me.SendPropertyChanged("quest")
				Me.OnquestChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.gameobject_involvedrelation")>  _
Partial Public Class gameobject_involvedrelation
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _quest As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnquestChanging(value As Integer)
    End Sub
    Partial Private Sub OnquestChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_quest", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property quest() As Integer
		Get
			Return Me._quest
		End Get
		Set
			If ((Me._quest = value)  _
						= false) Then
				Me.OnquestChanging(value)
				Me.SendPropertyChanging
				Me._quest = value
				Me.SendPropertyChanged("quest")
				Me.OnquestChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.game_weather")>  _
Partial Public Class game_weather
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _zone As Integer
	
	Private _spring_rain_chance As Byte
	
	Private _spring_snow_chance As Byte
	
	Private _spring_storm_chance As Byte
	
	Private _summer_rain_chance As Byte
	
	Private _summer_snow_chance As Byte
	
	Private _summer_storm_chance As Byte
	
	Private _fall_rain_chance As Byte
	
	Private _fall_snow_chance As Byte
	
	Private _fall_storm_chance As Byte
	
	Private _winter_rain_chance As Byte
	
	Private _winter_snow_chance As Byte
	
	Private _winter_storm_chance As Byte
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnzoneChanging(value As Integer)
    End Sub
    Partial Private Sub OnzoneChanged()
    End Sub
    Partial Private Sub Onspring_rain_chanceChanging(value As Byte)
    End Sub
    Partial Private Sub Onspring_rain_chanceChanged()
    End Sub
    Partial Private Sub Onspring_snow_chanceChanging(value As Byte)
    End Sub
    Partial Private Sub Onspring_snow_chanceChanged()
    End Sub
    Partial Private Sub Onspring_storm_chanceChanging(value As Byte)
    End Sub
    Partial Private Sub Onspring_storm_chanceChanged()
    End Sub
    Partial Private Sub Onsummer_rain_chanceChanging(value As Byte)
    End Sub
    Partial Private Sub Onsummer_rain_chanceChanged()
    End Sub
    Partial Private Sub Onsummer_snow_chanceChanging(value As Byte)
    End Sub
    Partial Private Sub Onsummer_snow_chanceChanged()
    End Sub
    Partial Private Sub Onsummer_storm_chanceChanging(value As Byte)
    End Sub
    Partial Private Sub Onsummer_storm_chanceChanged()
    End Sub
    Partial Private Sub Onfall_rain_chanceChanging(value As Byte)
    End Sub
    Partial Private Sub Onfall_rain_chanceChanged()
    End Sub
    Partial Private Sub Onfall_snow_chanceChanging(value As Byte)
    End Sub
    Partial Private Sub Onfall_snow_chanceChanged()
    End Sub
    Partial Private Sub Onfall_storm_chanceChanging(value As Byte)
    End Sub
    Partial Private Sub Onfall_storm_chanceChanged()
    End Sub
    Partial Private Sub Onwinter_rain_chanceChanging(value As Byte)
    End Sub
    Partial Private Sub Onwinter_rain_chanceChanged()
    End Sub
    Partial Private Sub Onwinter_snow_chanceChanging(value As Byte)
    End Sub
    Partial Private Sub Onwinter_snow_chanceChanged()
    End Sub
    Partial Private Sub Onwinter_storm_chanceChanging(value As Byte)
    End Sub
    Partial Private Sub Onwinter_storm_chanceChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_zone", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property zone() As Integer
		Get
			Return Me._zone
		End Get
		Set
			If ((Me._zone = value)  _
						= false) Then
				Me.OnzoneChanging(value)
				Me.SendPropertyChanging
				Me._zone = value
				Me.SendPropertyChanged("zone")
				Me.OnzoneChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_spring_rain_chance", DbType:="TinyInt NOT NULL")>  _
	Public Property spring_rain_chance() As Byte
		Get
			Return Me._spring_rain_chance
		End Get
		Set
			If ((Me._spring_rain_chance = value)  _
						= false) Then
				Me.Onspring_rain_chanceChanging(value)
				Me.SendPropertyChanging
				Me._spring_rain_chance = value
				Me.SendPropertyChanged("spring_rain_chance")
				Me.Onspring_rain_chanceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_spring_snow_chance", DbType:="TinyInt NOT NULL")>  _
	Public Property spring_snow_chance() As Byte
		Get
			Return Me._spring_snow_chance
		End Get
		Set
			If ((Me._spring_snow_chance = value)  _
						= false) Then
				Me.Onspring_snow_chanceChanging(value)
				Me.SendPropertyChanging
				Me._spring_snow_chance = value
				Me.SendPropertyChanged("spring_snow_chance")
				Me.Onspring_snow_chanceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_spring_storm_chance", DbType:="TinyInt NOT NULL")>  _
	Public Property spring_storm_chance() As Byte
		Get
			Return Me._spring_storm_chance
		End Get
		Set
			If ((Me._spring_storm_chance = value)  _
						= false) Then
				Me.Onspring_storm_chanceChanging(value)
				Me.SendPropertyChanging
				Me._spring_storm_chance = value
				Me.SendPropertyChanged("spring_storm_chance")
				Me.Onspring_storm_chanceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_summer_rain_chance", DbType:="TinyInt NOT NULL")>  _
	Public Property summer_rain_chance() As Byte
		Get
			Return Me._summer_rain_chance
		End Get
		Set
			If ((Me._summer_rain_chance = value)  _
						= false) Then
				Me.Onsummer_rain_chanceChanging(value)
				Me.SendPropertyChanging
				Me._summer_rain_chance = value
				Me.SendPropertyChanged("summer_rain_chance")
				Me.Onsummer_rain_chanceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_summer_snow_chance", DbType:="TinyInt NOT NULL")>  _
	Public Property summer_snow_chance() As Byte
		Get
			Return Me._summer_snow_chance
		End Get
		Set
			If ((Me._summer_snow_chance = value)  _
						= false) Then
				Me.Onsummer_snow_chanceChanging(value)
				Me.SendPropertyChanging
				Me._summer_snow_chance = value
				Me.SendPropertyChanged("summer_snow_chance")
				Me.Onsummer_snow_chanceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_summer_storm_chance", DbType:="TinyInt NOT NULL")>  _
	Public Property summer_storm_chance() As Byte
		Get
			Return Me._summer_storm_chance
		End Get
		Set
			If ((Me._summer_storm_chance = value)  _
						= false) Then
				Me.Onsummer_storm_chanceChanging(value)
				Me.SendPropertyChanging
				Me._summer_storm_chance = value
				Me.SendPropertyChanged("summer_storm_chance")
				Me.Onsummer_storm_chanceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_fall_rain_chance", DbType:="TinyInt NOT NULL")>  _
	Public Property fall_rain_chance() As Byte
		Get
			Return Me._fall_rain_chance
		End Get
		Set
			If ((Me._fall_rain_chance = value)  _
						= false) Then
				Me.Onfall_rain_chanceChanging(value)
				Me.SendPropertyChanging
				Me._fall_rain_chance = value
				Me.SendPropertyChanged("fall_rain_chance")
				Me.Onfall_rain_chanceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_fall_snow_chance", DbType:="TinyInt NOT NULL")>  _
	Public Property fall_snow_chance() As Byte
		Get
			Return Me._fall_snow_chance
		End Get
		Set
			If ((Me._fall_snow_chance = value)  _
						= false) Then
				Me.Onfall_snow_chanceChanging(value)
				Me.SendPropertyChanging
				Me._fall_snow_chance = value
				Me.SendPropertyChanged("fall_snow_chance")
				Me.Onfall_snow_chanceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_fall_storm_chance", DbType:="TinyInt NOT NULL")>  _
	Public Property fall_storm_chance() As Byte
		Get
			Return Me._fall_storm_chance
		End Get
		Set
			If ((Me._fall_storm_chance = value)  _
						= false) Then
				Me.Onfall_storm_chanceChanging(value)
				Me.SendPropertyChanging
				Me._fall_storm_chance = value
				Me.SendPropertyChanged("fall_storm_chance")
				Me.Onfall_storm_chanceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_winter_rain_chance", DbType:="TinyInt NOT NULL")>  _
	Public Property winter_rain_chance() As Byte
		Get
			Return Me._winter_rain_chance
		End Get
		Set
			If ((Me._winter_rain_chance = value)  _
						= false) Then
				Me.Onwinter_rain_chanceChanging(value)
				Me.SendPropertyChanging
				Me._winter_rain_chance = value
				Me.SendPropertyChanged("winter_rain_chance")
				Me.Onwinter_rain_chanceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_winter_snow_chance", DbType:="TinyInt NOT NULL")>  _
	Public Property winter_snow_chance() As Byte
		Get
			Return Me._winter_snow_chance
		End Get
		Set
			If ((Me._winter_snow_chance = value)  _
						= false) Then
				Me.Onwinter_snow_chanceChanging(value)
				Me.SendPropertyChanging
				Me._winter_snow_chance = value
				Me.SendPropertyChanged("winter_snow_chance")
				Me.Onwinter_snow_chanceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_winter_storm_chance", DbType:="TinyInt NOT NULL")>  _
	Public Property winter_storm_chance() As Byte
		Get
			Return Me._winter_storm_chance
		End Get
		Set
			If ((Me._winter_storm_chance = value)  _
						= false) Then
				Me.Onwinter_storm_chanceChanging(value)
				Me.SendPropertyChanging
				Me._winter_storm_chance = value
				Me.SendPropertyChanged("winter_storm_chance")
				Me.Onwinter_storm_chanceChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.page_text")>  _
Partial Public Class page_text
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _entry As Integer
	
	Private _text As String
	
	Private _next_page As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnentryChanging(value As Integer)
    End Sub
    Partial Private Sub OnentryChanged()
    End Sub
    Partial Private Sub OntextChanging(value As String)
    End Sub
    Partial Private Sub OntextChanged()
    End Sub
    Partial Private Sub Onnext_pageChanging(value As Integer)
    End Sub
    Partial Private Sub Onnext_pageChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_entry", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property entry() As Integer
		Get
			Return Me._entry
		End Get
		Set
			If ((Me._entry = value)  _
						= false) Then
				Me.OnentryChanging(value)
				Me.SendPropertyChanging
				Me._entry = value
				Me.SendPropertyChanged("entry")
				Me.OnentryChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_text", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property text() As String
		Get
			Return Me._text
		End Get
		Set
			If (String.Equals(Me._text, value) = false) Then
				Me.OntextChanging(value)
				Me.SendPropertyChanging
				Me._text = value
				Me.SendPropertyChanged("text")
				Me.OntextChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_next_page", DbType:="Int NOT NULL")>  _
	Public Property next_page() As Integer
		Get
			Return Me._next_page
		End Get
		Set
			If ((Me._next_page = value)  _
						= false) Then
				Me.Onnext_pageChanging(value)
				Me.SendPropertyChanging
				Me._next_page = value
				Me.SendPropertyChanged("next_page")
				Me.Onnext_pageChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.player_classlevelstats")>  _
Partial Public Class player_classlevelstat
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _class As Byte
	
	Private _level As Byte
	
	Private _basehp As Short
	
	Private _basemana As Short
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnclassChanging(value As Byte)
    End Sub
    Partial Private Sub OnclassChanged()
    End Sub
    Partial Private Sub OnlevelChanging(value As Byte)
    End Sub
    Partial Private Sub OnlevelChanged()
    End Sub
    Partial Private Sub OnbasehpChanging(value As Short)
    End Sub
    Partial Private Sub OnbasehpChanged()
    End Sub
    Partial Private Sub OnbasemanaChanging(value As Short)
    End Sub
    Partial Private Sub OnbasemanaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Name:="class", Storage:="_class", DbType:="TinyInt NOT NULL", IsPrimaryKey:=true)>  _
	Public Property [class]() As Byte
		Get
			Return Me._class
		End Get
		Set
			If ((Me._class = value)  _
						= false) Then
				Me.OnclassChanging(value)
				Me.SendPropertyChanging
				Me._class = value
				Me.SendPropertyChanged("[class]")
				Me.OnclassChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[level]", Storage:="_level", DbType:="TinyInt NOT NULL", IsPrimaryKey:=true)>  _
	Public Property level() As Byte
		Get
			Return Me._level
		End Get
		Set
			If ((Me._level = value)  _
						= false) Then
				Me.OnlevelChanging(value)
				Me.SendPropertyChanging
				Me._level = value
				Me.SendPropertyChanged("level")
				Me.OnlevelChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_basehp", DbType:="SmallInt NOT NULL")>  _
	Public Property basehp() As Short
		Get
			Return Me._basehp
		End Get
		Set
			If ((Me._basehp = value)  _
						= false) Then
				Me.OnbasehpChanging(value)
				Me.SendPropertyChanging
				Me._basehp = value
				Me.SendPropertyChanged("basehp")
				Me.OnbasehpChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_basemana", DbType:="SmallInt NOT NULL")>  _
	Public Property basemana() As Short
		Get
			Return Me._basemana
		End Get
		Set
			If ((Me._basemana = value)  _
						= false) Then
				Me.OnbasemanaChanging(value)
				Me.SendPropertyChanging
				Me._basemana = value
				Me.SendPropertyChanged("basemana")
				Me.OnbasemanaChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.player_levelstats")>  _
Partial Public Class player_levelstat
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _race As Byte
	
	Private _class As Byte
	
	Private _level As Byte
	
	Private _str As Byte
	
	Private _agi As Byte
	
	Private _sta As Byte
	
	Private _inte As Byte
	
	Private _spi As Byte
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnraceChanging(value As Byte)
    End Sub
    Partial Private Sub OnraceChanged()
    End Sub
    Partial Private Sub OnclassChanging(value As Byte)
    End Sub
    Partial Private Sub OnclassChanged()
    End Sub
    Partial Private Sub OnlevelChanging(value As Byte)
    End Sub
    Partial Private Sub OnlevelChanged()
    End Sub
    Partial Private Sub OnstrChanging(value As Byte)
    End Sub
    Partial Private Sub OnstrChanged()
    End Sub
    Partial Private Sub OnagiChanging(value As Byte)
    End Sub
    Partial Private Sub OnagiChanged()
    End Sub
    Partial Private Sub OnstaChanging(value As Byte)
    End Sub
    Partial Private Sub OnstaChanged()
    End Sub
    Partial Private Sub OninteChanging(value As Byte)
    End Sub
    Partial Private Sub OninteChanged()
    End Sub
    Partial Private Sub OnspiChanging(value As Byte)
    End Sub
    Partial Private Sub OnspiChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_race", DbType:="TinyInt NOT NULL", IsPrimaryKey:=true)>  _
	Public Property race() As Byte
		Get
			Return Me._race
		End Get
		Set
			If ((Me._race = value)  _
						= false) Then
				Me.OnraceChanging(value)
				Me.SendPropertyChanging
				Me._race = value
				Me.SendPropertyChanged("race")
				Me.OnraceChanged
			End If
		End Set
	End Property
	
	<Column(Name:="class", Storage:="_class", DbType:="TinyInt NOT NULL", IsPrimaryKey:=true)>  _
	Public Property [class]() As Byte
		Get
			Return Me._class
		End Get
		Set
			If ((Me._class = value)  _
						= false) Then
				Me.OnclassChanging(value)
				Me.SendPropertyChanging
				Me._class = value
				Me.SendPropertyChanged("[class]")
				Me.OnclassChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[level]", Storage:="_level", DbType:="TinyInt NOT NULL", IsPrimaryKey:=true)>  _
	Public Property level() As Byte
		Get
			Return Me._level
		End Get
		Set
			If ((Me._level = value)  _
						= false) Then
				Me.OnlevelChanging(value)
				Me.SendPropertyChanging
				Me._level = value
				Me.SendPropertyChanged("level")
				Me.OnlevelChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_str", DbType:="TinyInt NOT NULL")>  _
	Public Property str() As Byte
		Get
			Return Me._str
		End Get
		Set
			If ((Me._str = value)  _
						= false) Then
				Me.OnstrChanging(value)
				Me.SendPropertyChanging
				Me._str = value
				Me.SendPropertyChanged("str")
				Me.OnstrChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_agi", DbType:="TinyInt NOT NULL")>  _
	Public Property agi() As Byte
		Get
			Return Me._agi
		End Get
		Set
			If ((Me._agi = value)  _
						= false) Then
				Me.OnagiChanging(value)
				Me.SendPropertyChanging
				Me._agi = value
				Me.SendPropertyChanged("agi")
				Me.OnagiChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_sta", DbType:="TinyInt NOT NULL")>  _
	Public Property sta() As Byte
		Get
			Return Me._sta
		End Get
		Set
			If ((Me._sta = value)  _
						= false) Then
				Me.OnstaChanging(value)
				Me.SendPropertyChanging
				Me._sta = value
				Me.SendPropertyChanged("sta")
				Me.OnstaChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_inte", DbType:="TinyInt NOT NULL")>  _
	Public Property inte() As Byte
		Get
			Return Me._inte
		End Get
		Set
			If ((Me._inte = value)  _
						= false) Then
				Me.OninteChanging(value)
				Me.SendPropertyChanging
				Me._inte = value
				Me.SendPropertyChanged("inte")
				Me.OninteChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_spi", DbType:="TinyInt NOT NULL")>  _
	Public Property spi() As Byte
		Get
			Return Me._spi
		End Get
		Set
			If ((Me._spi = value)  _
						= false) Then
				Me.OnspiChanging(value)
				Me.SendPropertyChanging
				Me._spi = value
				Me.SendPropertyChanged("spi")
				Me.OnspiChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.playercreateinfo")>  _
Partial Public Class playercreateinfo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _race As Byte
	
	Private _class As Byte
	
	Private _map As Short
	
	Private _zone As Integer
	
	Private _position_x As Single
	
	Private _position_y As Single
	
	Private _position_z As Single
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnraceChanging(value As Byte)
    End Sub
    Partial Private Sub OnraceChanged()
    End Sub
    Partial Private Sub OnclassChanging(value As Byte)
    End Sub
    Partial Private Sub OnclassChanged()
    End Sub
    Partial Private Sub OnmapChanging(value As Short)
    End Sub
    Partial Private Sub OnmapChanged()
    End Sub
    Partial Private Sub OnzoneChanging(value As Integer)
    End Sub
    Partial Private Sub OnzoneChanged()
    End Sub
    Partial Private Sub Onposition_xChanging(value As Single)
    End Sub
    Partial Private Sub Onposition_xChanged()
    End Sub
    Partial Private Sub Onposition_yChanging(value As Single)
    End Sub
    Partial Private Sub Onposition_yChanged()
    End Sub
    Partial Private Sub Onposition_zChanging(value As Single)
    End Sub
    Partial Private Sub Onposition_zChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_race", DbType:="TinyInt NOT NULL", IsPrimaryKey:=true)>  _
	Public Property race() As Byte
		Get
			Return Me._race
		End Get
		Set
			If ((Me._race = value)  _
						= false) Then
				Me.OnraceChanging(value)
				Me.SendPropertyChanging
				Me._race = value
				Me.SendPropertyChanged("race")
				Me.OnraceChanged
			End If
		End Set
	End Property
	
	<Column(Name:="class", Storage:="_class", DbType:="TinyInt NOT NULL", IsPrimaryKey:=true)>  _
	Public Property [class]() As Byte
		Get
			Return Me._class
		End Get
		Set
			If ((Me._class = value)  _
						= false) Then
				Me.OnclassChanging(value)
				Me.SendPropertyChanging
				Me._class = value
				Me.SendPropertyChanged("[class]")
				Me.OnclassChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_map", DbType:="SmallInt NOT NULL")>  _
	Public Property map() As Short
		Get
			Return Me._map
		End Get
		Set
			If ((Me._map = value)  _
						= false) Then
				Me.OnmapChanging(value)
				Me.SendPropertyChanging
				Me._map = value
				Me.SendPropertyChanged("map")
				Me.OnmapChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_zone", DbType:="Int NOT NULL")>  _
	Public Property zone() As Integer
		Get
			Return Me._zone
		End Get
		Set
			If ((Me._zone = value)  _
						= false) Then
				Me.OnzoneChanging(value)
				Me.SendPropertyChanging
				Me._zone = value
				Me.SendPropertyChanged("zone")
				Me.OnzoneChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_position_x", DbType:="Real NOT NULL")>  _
	Public Property position_x() As Single
		Get
			Return Me._position_x
		End Get
		Set
			If ((Me._position_x = value)  _
						= false) Then
				Me.Onposition_xChanging(value)
				Me.SendPropertyChanging
				Me._position_x = value
				Me.SendPropertyChanged("position_x")
				Me.Onposition_xChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_position_y", DbType:="Real NOT NULL")>  _
	Public Property position_y() As Single
		Get
			Return Me._position_y
		End Get
		Set
			If ((Me._position_y = value)  _
						= false) Then
				Me.Onposition_yChanging(value)
				Me.SendPropertyChanging
				Me._position_y = value
				Me.SendPropertyChanged("position_y")
				Me.Onposition_yChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_position_z", DbType:="Real NOT NULL")>  _
	Public Property position_z() As Single
		Get
			Return Me._position_z
		End Get
		Set
			If ((Me._position_z = value)  _
						= false) Then
				Me.Onposition_zChanging(value)
				Me.SendPropertyChanging
				Me._position_z = value
				Me.SendPropertyChanged("position_z")
				Me.Onposition_zChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.playercreateinfo_action")>  _
Partial Public Class playercreateinfo_action
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _race As Byte
	
	Private _class As Byte
	
	Private _button As Short
	
	Private _action As Integer
	
	Private _type As Short
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnraceChanging(value As Byte)
    End Sub
    Partial Private Sub OnraceChanged()
    End Sub
    Partial Private Sub OnclassChanging(value As Byte)
    End Sub
    Partial Private Sub OnclassChanged()
    End Sub
    Partial Private Sub OnbuttonChanging(value As Short)
    End Sub
    Partial Private Sub OnbuttonChanged()
    End Sub
    Partial Private Sub OnactionChanging(value As Integer)
    End Sub
    Partial Private Sub OnactionChanged()
    End Sub
    Partial Private Sub OntypeChanging(value As Short)
    End Sub
    Partial Private Sub OntypeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_race", DbType:="TinyInt NOT NULL", IsPrimaryKey:=true)>  _
	Public Property race() As Byte
		Get
			Return Me._race
		End Get
		Set
			If ((Me._race = value)  _
						= false) Then
				Me.OnraceChanging(value)
				Me.SendPropertyChanging
				Me._race = value
				Me.SendPropertyChanged("race")
				Me.OnraceChanged
			End If
		End Set
	End Property
	
	<Column(Name:="class", Storage:="_class", DbType:="TinyInt NOT NULL", IsPrimaryKey:=true)>  _
	Public Property [class]() As Byte
		Get
			Return Me._class
		End Get
		Set
			If ((Me._class = value)  _
						= false) Then
				Me.OnclassChanging(value)
				Me.SendPropertyChanging
				Me._class = value
				Me.SendPropertyChanged("[class]")
				Me.OnclassChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_button", DbType:="SmallInt NOT NULL", IsPrimaryKey:=true)>  _
	Public Property button() As Short
		Get
			Return Me._button
		End Get
		Set
			If ((Me._button = value)  _
						= false) Then
				Me.OnbuttonChanging(value)
				Me.SendPropertyChanging
				Me._button = value
				Me.SendPropertyChanged("button")
				Me.OnbuttonChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_action", DbType:="Int NOT NULL")>  _
	Public Property action() As Integer
		Get
			Return Me._action
		End Get
		Set
			If ((Me._action = value)  _
						= false) Then
				Me.OnactionChanging(value)
				Me.SendPropertyChanging
				Me._action = value
				Me.SendPropertyChanged("action")
				Me.OnactionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_type", DbType:="SmallInt NOT NULL")>  _
	Public Property type() As Short
		Get
			Return Me._type
		End Get
		Set
			If ((Me._type = value)  _
						= false) Then
				Me.OntypeChanging(value)
				Me.SendPropertyChanging
				Me._type = value
				Me.SendPropertyChanged("type")
				Me.OntypeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.playercreateinfo_item")>  _
Partial Public Class playercreateinfo_item
	
	Private _race As Byte
	
	Private _class As Byte
	
	Private _itemid As Integer
	
	Private _amount As Byte
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Column(Storage:="_race", DbType:="TinyInt NOT NULL")>  _
	Public Property race() As Byte
		Get
			Return Me._race
		End Get
		Set
			If ((Me._race = value)  _
						= false) Then
				Me._race = value
			End If
		End Set
	End Property
	
	<Column(Name:="class", Storage:="_class", DbType:="TinyInt NOT NULL")>  _
	Public Property [class]() As Byte
		Get
			Return Me._class
		End Get
		Set
			If ((Me._class = value)  _
						= false) Then
				Me._class = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_itemid", DbType:="Int NOT NULL")>  _
	Public Property itemid() As Integer
		Get
			Return Me._itemid
		End Get
		Set
			If ((Me._itemid = value)  _
						= false) Then
				Me._itemid = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_amount", DbType:="TinyInt NOT NULL")>  _
	Public Property amount() As Byte
		Get
			Return Me._amount
		End Get
		Set
			If ((Me._amount = value)  _
						= false) Then
				Me._amount = value
			End If
		End Set
	End Property
End Class

<Table(Name:="dbo.playercreateinfo_spell")>  _
Partial Public Class playercreateinfo_spell
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _race As Byte
	
	Private _class As Byte
	
	Private _Spell As Integer
	
	Private _Note As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnraceChanging(value As Byte)
    End Sub
    Partial Private Sub OnraceChanged()
    End Sub
    Partial Private Sub OnclassChanging(value As Byte)
    End Sub
    Partial Private Sub OnclassChanged()
    End Sub
    Partial Private Sub OnSpellChanging(value As Integer)
    End Sub
    Partial Private Sub OnSpellChanged()
    End Sub
    Partial Private Sub OnNoteChanging(value As String)
    End Sub
    Partial Private Sub OnNoteChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_race", DbType:="TinyInt NOT NULL", IsPrimaryKey:=true)>  _
	Public Property race() As Byte
		Get
			Return Me._race
		End Get
		Set
			If ((Me._race = value)  _
						= false) Then
				Me.OnraceChanging(value)
				Me.SendPropertyChanging
				Me._race = value
				Me.SendPropertyChanged("race")
				Me.OnraceChanged
			End If
		End Set
	End Property
	
	<Column(Name:="class", Storage:="_class", DbType:="TinyInt NOT NULL", IsPrimaryKey:=true)>  _
	Public Property [class]() As Byte
		Get
			Return Me._class
		End Get
		Set
			If ((Me._class = value)  _
						= false) Then
				Me.OnclassChanging(value)
				Me.SendPropertyChanging
				Me._class = value
				Me.SendPropertyChanged("[class]")
				Me.OnclassChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Spell", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Spell() As Integer
		Get
			Return Me._Spell
		End Get
		Set
			If ((Me._Spell = value)  _
						= false) Then
				Me.OnSpellChanging(value)
				Me.SendPropertyChanging
				Me._Spell = value
				Me.SendPropertyChanged("Spell")
				Me.OnSpellChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Note", DbType:="VarChar(255)")>  _
	Public Property Note() As String
		Get
			Return Me._Note
		End Get
		Set
			If (String.Equals(Me._Note, value) = false) Then
				Me.OnNoteChanging(value)
				Me.SendPropertyChanging
				Me._Note = value
				Me.SendPropertyChanged("Note")
				Me.OnNoteChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.skinning_loot_template")>  _
Partial Public Class skinning_loot_template
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _entry As Integer
	
	Private _item As Integer
	
	Private _ChanceOrQuestChance As Single
	
	Private _groupid As Byte
	
	Private _mincountOrRef As Integer
	
	Private _maxcount As Byte
	
	Private _lootcondition As Byte
	
	Private _condition_value1 As Integer
	
	Private _condition_value2 As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnentryChanging(value As Integer)
    End Sub
    Partial Private Sub OnentryChanged()
    End Sub
    Partial Private Sub OnitemChanging(value As Integer)
    End Sub
    Partial Private Sub OnitemChanged()
    End Sub
    Partial Private Sub OnChanceOrQuestChanceChanging(value As Single)
    End Sub
    Partial Private Sub OnChanceOrQuestChanceChanged()
    End Sub
    Partial Private Sub OngroupidChanging(value As Byte)
    End Sub
    Partial Private Sub OngroupidChanged()
    End Sub
    Partial Private Sub OnmincountOrRefChanging(value As Integer)
    End Sub
    Partial Private Sub OnmincountOrRefChanged()
    End Sub
    Partial Private Sub OnmaxcountChanging(value As Byte)
    End Sub
    Partial Private Sub OnmaxcountChanged()
    End Sub
    Partial Private Sub OnlootconditionChanging(value As Byte)
    End Sub
    Partial Private Sub OnlootconditionChanged()
    End Sub
    Partial Private Sub Oncondition_value1Changing(value As Integer)
    End Sub
    Partial Private Sub Oncondition_value1Changed()
    End Sub
    Partial Private Sub Oncondition_value2Changing(value As Integer)
    End Sub
    Partial Private Sub Oncondition_value2Changed()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_entry", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property entry() As Integer
		Get
			Return Me._entry
		End Get
		Set
			If ((Me._entry = value)  _
						= false) Then
				Me.OnentryChanging(value)
				Me.SendPropertyChanging
				Me._entry = value
				Me.SendPropertyChanged("entry")
				Me.OnentryChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_item", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property item() As Integer
		Get
			Return Me._item
		End Get
		Set
			If ((Me._item = value)  _
						= false) Then
				Me.OnitemChanging(value)
				Me.SendPropertyChanging
				Me._item = value
				Me.SendPropertyChanged("item")
				Me.OnitemChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ChanceOrQuestChance", DbType:="Real NOT NULL")>  _
	Public Property ChanceOrQuestChance() As Single
		Get
			Return Me._ChanceOrQuestChance
		End Get
		Set
			If ((Me._ChanceOrQuestChance = value)  _
						= false) Then
				Me.OnChanceOrQuestChanceChanging(value)
				Me.SendPropertyChanging
				Me._ChanceOrQuestChance = value
				Me.SendPropertyChanged("ChanceOrQuestChance")
				Me.OnChanceOrQuestChanceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_groupid", DbType:="TinyInt NOT NULL")>  _
	Public Property groupid() As Byte
		Get
			Return Me._groupid
		End Get
		Set
			If ((Me._groupid = value)  _
						= false) Then
				Me.OngroupidChanging(value)
				Me.SendPropertyChanging
				Me._groupid = value
				Me.SendPropertyChanged("groupid")
				Me.OngroupidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_mincountOrRef", DbType:="Int NOT NULL")>  _
	Public Property mincountOrRef() As Integer
		Get
			Return Me._mincountOrRef
		End Get
		Set
			If ((Me._mincountOrRef = value)  _
						= false) Then
				Me.OnmincountOrRefChanging(value)
				Me.SendPropertyChanging
				Me._mincountOrRef = value
				Me.SendPropertyChanged("mincountOrRef")
				Me.OnmincountOrRefChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_maxcount", DbType:="TinyInt NOT NULL")>  _
	Public Property maxcount() As Byte
		Get
			Return Me._maxcount
		End Get
		Set
			If ((Me._maxcount = value)  _
						= false) Then
				Me.OnmaxcountChanging(value)
				Me.SendPropertyChanging
				Me._maxcount = value
				Me.SendPropertyChanged("maxcount")
				Me.OnmaxcountChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_lootcondition", DbType:="TinyInt NOT NULL")>  _
	Public Property lootcondition() As Byte
		Get
			Return Me._lootcondition
		End Get
		Set
			If ((Me._lootcondition = value)  _
						= false) Then
				Me.OnlootconditionChanging(value)
				Me.SendPropertyChanging
				Me._lootcondition = value
				Me.SendPropertyChanged("lootcondition")
				Me.OnlootconditionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_condition_value1", DbType:="Int NOT NULL")>  _
	Public Property condition_value1() As Integer
		Get
			Return Me._condition_value1
		End Get
		Set
			If ((Me._condition_value1 = value)  _
						= false) Then
				Me.Oncondition_value1Changing(value)
				Me.SendPropertyChanging
				Me._condition_value1 = value
				Me.SendPropertyChanged("condition_value1")
				Me.Oncondition_value1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_condition_value2", DbType:="Int NOT NULL")>  _
	Public Property condition_value2() As Integer
		Get
			Return Me._condition_value2
		End Get
		Set
			If ((Me._condition_value2 = value)  _
						= false) Then
				Me.Oncondition_value2Changing(value)
				Me.SendPropertyChanging
				Me._condition_value2 = value
				Me.SendPropertyChanged("condition_value2")
				Me.Oncondition_value2Changed
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.gameobject_loot_template")>  _
Partial Public Class gameobject_loot_template
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _entry As Integer
	
	Private _item As Integer
	
	Private _ChanceOrQuestChance As Single
	
	Private _groupid As Byte
	
	Private _mincountOrRef As Integer
	
	Private _maxcount As Byte
	
	Private _lootcondition As Byte
	
	Private _condition_value1 As Integer
	
	Private _condition_value2 As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnentryChanging(value As Integer)
    End Sub
    Partial Private Sub OnentryChanged()
    End Sub
    Partial Private Sub OnitemChanging(value As Integer)
    End Sub
    Partial Private Sub OnitemChanged()
    End Sub
    Partial Private Sub OnChanceOrQuestChanceChanging(value As Single)
    End Sub
    Partial Private Sub OnChanceOrQuestChanceChanged()
    End Sub
    Partial Private Sub OngroupidChanging(value As Byte)
    End Sub
    Partial Private Sub OngroupidChanged()
    End Sub
    Partial Private Sub OnmincountOrRefChanging(value As Integer)
    End Sub
    Partial Private Sub OnmincountOrRefChanged()
    End Sub
    Partial Private Sub OnmaxcountChanging(value As Byte)
    End Sub
    Partial Private Sub OnmaxcountChanged()
    End Sub
    Partial Private Sub OnlootconditionChanging(value As Byte)
    End Sub
    Partial Private Sub OnlootconditionChanged()
    End Sub
    Partial Private Sub Oncondition_value1Changing(value As Integer)
    End Sub
    Partial Private Sub Oncondition_value1Changed()
    End Sub
    Partial Private Sub Oncondition_value2Changing(value As Integer)
    End Sub
    Partial Private Sub Oncondition_value2Changed()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_entry", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property entry() As Integer
		Get
			Return Me._entry
		End Get
		Set
			If ((Me._entry = value)  _
						= false) Then
				Me.OnentryChanging(value)
				Me.SendPropertyChanging
				Me._entry = value
				Me.SendPropertyChanged("entry")
				Me.OnentryChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_item", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property item() As Integer
		Get
			Return Me._item
		End Get
		Set
			If ((Me._item = value)  _
						= false) Then
				Me.OnitemChanging(value)
				Me.SendPropertyChanging
				Me._item = value
				Me.SendPropertyChanged("item")
				Me.OnitemChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ChanceOrQuestChance", DbType:="Real NOT NULL")>  _
	Public Property ChanceOrQuestChance() As Single
		Get
			Return Me._ChanceOrQuestChance
		End Get
		Set
			If ((Me._ChanceOrQuestChance = value)  _
						= false) Then
				Me.OnChanceOrQuestChanceChanging(value)
				Me.SendPropertyChanging
				Me._ChanceOrQuestChance = value
				Me.SendPropertyChanged("ChanceOrQuestChance")
				Me.OnChanceOrQuestChanceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_groupid", DbType:="TinyInt NOT NULL")>  _
	Public Property groupid() As Byte
		Get
			Return Me._groupid
		End Get
		Set
			If ((Me._groupid = value)  _
						= false) Then
				Me.OngroupidChanging(value)
				Me.SendPropertyChanging
				Me._groupid = value
				Me.SendPropertyChanged("groupid")
				Me.OngroupidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_mincountOrRef", DbType:="Int NOT NULL")>  _
	Public Property mincountOrRef() As Integer
		Get
			Return Me._mincountOrRef
		End Get
		Set
			If ((Me._mincountOrRef = value)  _
						= false) Then
				Me.OnmincountOrRefChanging(value)
				Me.SendPropertyChanging
				Me._mincountOrRef = value
				Me.SendPropertyChanged("mincountOrRef")
				Me.OnmincountOrRefChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_maxcount", DbType:="TinyInt NOT NULL")>  _
	Public Property maxcount() As Byte
		Get
			Return Me._maxcount
		End Get
		Set
			If ((Me._maxcount = value)  _
						= false) Then
				Me.OnmaxcountChanging(value)
				Me.SendPropertyChanging
				Me._maxcount = value
				Me.SendPropertyChanged("maxcount")
				Me.OnmaxcountChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_lootcondition", DbType:="TinyInt NOT NULL")>  _
	Public Property lootcondition() As Byte
		Get
			Return Me._lootcondition
		End Get
		Set
			If ((Me._lootcondition = value)  _
						= false) Then
				Me.OnlootconditionChanging(value)
				Me.SendPropertyChanging
				Me._lootcondition = value
				Me.SendPropertyChanged("lootcondition")
				Me.OnlootconditionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_condition_value1", DbType:="Int NOT NULL")>  _
	Public Property condition_value1() As Integer
		Get
			Return Me._condition_value1
		End Get
		Set
			If ((Me._condition_value1 = value)  _
						= false) Then
				Me.Oncondition_value1Changing(value)
				Me.SendPropertyChanging
				Me._condition_value1 = value
				Me.SendPropertyChanged("condition_value1")
				Me.Oncondition_value1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_condition_value2", DbType:="Int NOT NULL")>  _
	Public Property condition_value2() As Integer
		Get
			Return Me._condition_value2
		End Get
		Set
			If ((Me._condition_value2 = value)  _
						= false) Then
				Me.Oncondition_value2Changing(value)
				Me.SendPropertyChanging
				Me._condition_value2 = value
				Me.SendPropertyChanged("condition_value2")
				Me.Oncondition_value2Changed
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.creature_loot_template")>  _
Partial Public Class creature_loot_template
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _entry As Integer
	
	Private _item As Integer
	
	Private _ChanceOrQuestChance As Single
	
	Private _groupid As Byte
	
	Private _mincountOrRef As Integer
	
	Private _maxcount As Byte
	
	Private _lootcondition As Byte
	
	Private _condition_value1 As Integer
	
	Private _condition_value2 As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnentryChanging(value As Integer)
    End Sub
    Partial Private Sub OnentryChanged()
    End Sub
    Partial Private Sub OnitemChanging(value As Integer)
    End Sub
    Partial Private Sub OnitemChanged()
    End Sub
    Partial Private Sub OnChanceOrQuestChanceChanging(value As Single)
    End Sub
    Partial Private Sub OnChanceOrQuestChanceChanged()
    End Sub
    Partial Private Sub OngroupidChanging(value As Byte)
    End Sub
    Partial Private Sub OngroupidChanged()
    End Sub
    Partial Private Sub OnmincountOrRefChanging(value As Integer)
    End Sub
    Partial Private Sub OnmincountOrRefChanged()
    End Sub
    Partial Private Sub OnmaxcountChanging(value As Byte)
    End Sub
    Partial Private Sub OnmaxcountChanged()
    End Sub
    Partial Private Sub OnlootconditionChanging(value As Byte)
    End Sub
    Partial Private Sub OnlootconditionChanged()
    End Sub
    Partial Private Sub Oncondition_value1Changing(value As Integer)
    End Sub
    Partial Private Sub Oncondition_value1Changed()
    End Sub
    Partial Private Sub Oncondition_value2Changing(value As Integer)
    End Sub
    Partial Private Sub Oncondition_value2Changed()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_entry", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property entry() As Integer
		Get
			Return Me._entry
		End Get
		Set
			If ((Me._entry = value)  _
						= false) Then
				Me.OnentryChanging(value)
				Me.SendPropertyChanging
				Me._entry = value
				Me.SendPropertyChanged("entry")
				Me.OnentryChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_item", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property item() As Integer
		Get
			Return Me._item
		End Get
		Set
			If ((Me._item = value)  _
						= false) Then
				Me.OnitemChanging(value)
				Me.SendPropertyChanging
				Me._item = value
				Me.SendPropertyChanged("item")
				Me.OnitemChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ChanceOrQuestChance", DbType:="Real NOT NULL")>  _
	Public Property ChanceOrQuestChance() As Single
		Get
			Return Me._ChanceOrQuestChance
		End Get
		Set
			If ((Me._ChanceOrQuestChance = value)  _
						= false) Then
				Me.OnChanceOrQuestChanceChanging(value)
				Me.SendPropertyChanging
				Me._ChanceOrQuestChance = value
				Me.SendPropertyChanged("ChanceOrQuestChance")
				Me.OnChanceOrQuestChanceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_groupid", DbType:="TinyInt NOT NULL")>  _
	Public Property groupid() As Byte
		Get
			Return Me._groupid
		End Get
		Set
			If ((Me._groupid = value)  _
						= false) Then
				Me.OngroupidChanging(value)
				Me.SendPropertyChanging
				Me._groupid = value
				Me.SendPropertyChanged("groupid")
				Me.OngroupidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_mincountOrRef", DbType:="Int NOT NULL")>  _
	Public Property mincountOrRef() As Integer
		Get
			Return Me._mincountOrRef
		End Get
		Set
			If ((Me._mincountOrRef = value)  _
						= false) Then
				Me.OnmincountOrRefChanging(value)
				Me.SendPropertyChanging
				Me._mincountOrRef = value
				Me.SendPropertyChanged("mincountOrRef")
				Me.OnmincountOrRefChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_maxcount", DbType:="TinyInt NOT NULL")>  _
	Public Property maxcount() As Byte
		Get
			Return Me._maxcount
		End Get
		Set
			If ((Me._maxcount = value)  _
						= false) Then
				Me.OnmaxcountChanging(value)
				Me.SendPropertyChanging
				Me._maxcount = value
				Me.SendPropertyChanged("maxcount")
				Me.OnmaxcountChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_lootcondition", DbType:="TinyInt NOT NULL")>  _
	Public Property lootcondition() As Byte
		Get
			Return Me._lootcondition
		End Get
		Set
			If ((Me._lootcondition = value)  _
						= false) Then
				Me.OnlootconditionChanging(value)
				Me.SendPropertyChanging
				Me._lootcondition = value
				Me.SendPropertyChanged("lootcondition")
				Me.OnlootconditionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_condition_value1", DbType:="Int NOT NULL")>  _
	Public Property condition_value1() As Integer
		Get
			Return Me._condition_value1
		End Get
		Set
			If ((Me._condition_value1 = value)  _
						= false) Then
				Me.Oncondition_value1Changing(value)
				Me.SendPropertyChanging
				Me._condition_value1 = value
				Me.SendPropertyChanged("condition_value1")
				Me.Oncondition_value1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_condition_value2", DbType:="Int NOT NULL")>  _
	Public Property condition_value2() As Integer
		Get
			Return Me._condition_value2
		End Get
		Set
			If ((Me._condition_value2 = value)  _
						= false) Then
				Me.Oncondition_value2Changing(value)
				Me.SendPropertyChanging
				Me._condition_value2 = value
				Me.SendPropertyChanged("condition_value2")
				Me.Oncondition_value2Changed
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.item_loot_template")>  _
Partial Public Class item_loot_template
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _entry As Integer
	
	Private _item As Integer
	
	Private _ChanceOrQuestChance As Single
	
	Private _groupid As Byte
	
	Private _mincountOrRef As Integer
	
	Private _maxcount As Short
	
	Private _lootcondition As Byte
	
	Private _condition_value1 As Integer
	
	Private _condition_value2 As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnentryChanging(value As Integer)
    End Sub
    Partial Private Sub OnentryChanged()
    End Sub
    Partial Private Sub OnitemChanging(value As Integer)
    End Sub
    Partial Private Sub OnitemChanged()
    End Sub
    Partial Private Sub OnChanceOrQuestChanceChanging(value As Single)
    End Sub
    Partial Private Sub OnChanceOrQuestChanceChanged()
    End Sub
    Partial Private Sub OngroupidChanging(value As Byte)
    End Sub
    Partial Private Sub OngroupidChanged()
    End Sub
    Partial Private Sub OnmincountOrRefChanging(value As Integer)
    End Sub
    Partial Private Sub OnmincountOrRefChanged()
    End Sub
    Partial Private Sub OnmaxcountChanging(value As Short)
    End Sub
    Partial Private Sub OnmaxcountChanged()
    End Sub
    Partial Private Sub OnlootconditionChanging(value As Byte)
    End Sub
    Partial Private Sub OnlootconditionChanged()
    End Sub
    Partial Private Sub Oncondition_value1Changing(value As Integer)
    End Sub
    Partial Private Sub Oncondition_value1Changed()
    End Sub
    Partial Private Sub Oncondition_value2Changing(value As Integer)
    End Sub
    Partial Private Sub Oncondition_value2Changed()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_entry", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property entry() As Integer
		Get
			Return Me._entry
		End Get
		Set
			If ((Me._entry = value)  _
						= false) Then
				Me.OnentryChanging(value)
				Me.SendPropertyChanging
				Me._entry = value
				Me.SendPropertyChanged("entry")
				Me.OnentryChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_item", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property item() As Integer
		Get
			Return Me._item
		End Get
		Set
			If ((Me._item = value)  _
						= false) Then
				Me.OnitemChanging(value)
				Me.SendPropertyChanging
				Me._item = value
				Me.SendPropertyChanged("item")
				Me.OnitemChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ChanceOrQuestChance", DbType:="Real NOT NULL")>  _
	Public Property ChanceOrQuestChance() As Single
		Get
			Return Me._ChanceOrQuestChance
		End Get
		Set
			If ((Me._ChanceOrQuestChance = value)  _
						= false) Then
				Me.OnChanceOrQuestChanceChanging(value)
				Me.SendPropertyChanging
				Me._ChanceOrQuestChance = value
				Me.SendPropertyChanged("ChanceOrQuestChance")
				Me.OnChanceOrQuestChanceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_groupid", DbType:="TinyInt NOT NULL")>  _
	Public Property groupid() As Byte
		Get
			Return Me._groupid
		End Get
		Set
			If ((Me._groupid = value)  _
						= false) Then
				Me.OngroupidChanging(value)
				Me.SendPropertyChanging
				Me._groupid = value
				Me.SendPropertyChanged("groupid")
				Me.OngroupidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_mincountOrRef", DbType:="Int NOT NULL")>  _
	Public Property mincountOrRef() As Integer
		Get
			Return Me._mincountOrRef
		End Get
		Set
			If ((Me._mincountOrRef = value)  _
						= false) Then
				Me.OnmincountOrRefChanging(value)
				Me.SendPropertyChanging
				Me._mincountOrRef = value
				Me.SendPropertyChanged("mincountOrRef")
				Me.OnmincountOrRefChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_maxcount", DbType:="SmallInt NOT NULL")>  _
	Public Property maxcount() As Short
		Get
			Return Me._maxcount
		End Get
		Set
			If ((Me._maxcount = value)  _
						= false) Then
				Me.OnmaxcountChanging(value)
				Me.SendPropertyChanging
				Me._maxcount = value
				Me.SendPropertyChanged("maxcount")
				Me.OnmaxcountChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_lootcondition", DbType:="TinyInt NOT NULL")>  _
	Public Property lootcondition() As Byte
		Get
			Return Me._lootcondition
		End Get
		Set
			If ((Me._lootcondition = value)  _
						= false) Then
				Me.OnlootconditionChanging(value)
				Me.SendPropertyChanging
				Me._lootcondition = value
				Me.SendPropertyChanged("lootcondition")
				Me.OnlootconditionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_condition_value1", DbType:="Int NOT NULL")>  _
	Public Property condition_value1() As Integer
		Get
			Return Me._condition_value1
		End Get
		Set
			If ((Me._condition_value1 = value)  _
						= false) Then
				Me.Oncondition_value1Changing(value)
				Me.SendPropertyChanging
				Me._condition_value1 = value
				Me.SendPropertyChanged("condition_value1")
				Me.Oncondition_value1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_condition_value2", DbType:="Int NOT NULL")>  _
	Public Property condition_value2() As Integer
		Get
			Return Me._condition_value2
		End Get
		Set
			If ((Me._condition_value2 = value)  _
						= false) Then
				Me.Oncondition_value2Changing(value)
				Me.SendPropertyChanging
				Me._condition_value2 = value
				Me.SendPropertyChanged("condition_value2")
				Me.Oncondition_value2Changed
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.creature_movement")>  _
Partial Public Class creature_movement
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _point As Integer
	
	Private _position_x As Single
	
	Private _position_y As Single
	
	Private _position_z As Single
	
	Private _waittime As Integer
	
	Private _script_id As Integer
	
	Private _textid1 As Integer
	
	Private _textid2 As Integer
	
	Private _textid3 As Integer
	
	Private _textid4 As Integer
	
	Private _textid5 As Integer
	
	Private _emote As Integer
	
	Private _spell As Integer
	
	Private _wpguid As Integer
	
	Private _orientation As Single
	
	Private _model1 As Integer
	
	Private _model2 As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnpointChanging(value As Integer)
    End Sub
    Partial Private Sub OnpointChanged()
    End Sub
    Partial Private Sub Onposition_xChanging(value As Single)
    End Sub
    Partial Private Sub Onposition_xChanged()
    End Sub
    Partial Private Sub Onposition_yChanging(value As Single)
    End Sub
    Partial Private Sub Onposition_yChanged()
    End Sub
    Partial Private Sub Onposition_zChanging(value As Single)
    End Sub
    Partial Private Sub Onposition_zChanged()
    End Sub
    Partial Private Sub OnwaittimeChanging(value As Integer)
    End Sub
    Partial Private Sub OnwaittimeChanged()
    End Sub
    Partial Private Sub Onscript_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onscript_idChanged()
    End Sub
    Partial Private Sub Ontextid1Changing(value As Integer)
    End Sub
    Partial Private Sub Ontextid1Changed()
    End Sub
    Partial Private Sub Ontextid2Changing(value As Integer)
    End Sub
    Partial Private Sub Ontextid2Changed()
    End Sub
    Partial Private Sub Ontextid3Changing(value As Integer)
    End Sub
    Partial Private Sub Ontextid3Changed()
    End Sub
    Partial Private Sub Ontextid4Changing(value As Integer)
    End Sub
    Partial Private Sub Ontextid4Changed()
    End Sub
    Partial Private Sub Ontextid5Changing(value As Integer)
    End Sub
    Partial Private Sub Ontextid5Changed()
    End Sub
    Partial Private Sub OnemoteChanging(value As Integer)
    End Sub
    Partial Private Sub OnemoteChanged()
    End Sub
    Partial Private Sub OnspellChanging(value As Integer)
    End Sub
    Partial Private Sub OnspellChanged()
    End Sub
    Partial Private Sub OnwpguidChanging(value As Integer)
    End Sub
    Partial Private Sub OnwpguidChanged()
    End Sub
    Partial Private Sub OnorientationChanging(value As Single)
    End Sub
    Partial Private Sub OnorientationChanged()
    End Sub
    Partial Private Sub Onmodel1Changing(value As Integer)
    End Sub
    Partial Private Sub Onmodel1Changed()
    End Sub
    Partial Private Sub Onmodel2Changing(value As Integer)
    End Sub
    Partial Private Sub Onmodel2Changed()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_point", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property point() As Integer
		Get
			Return Me._point
		End Get
		Set
			If ((Me._point = value)  _
						= false) Then
				Me.OnpointChanging(value)
				Me.SendPropertyChanging
				Me._point = value
				Me.SendPropertyChanged("point")
				Me.OnpointChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_position_x", DbType:="Real NOT NULL")>  _
	Public Property position_x() As Single
		Get
			Return Me._position_x
		End Get
		Set
			If ((Me._position_x = value)  _
						= false) Then
				Me.Onposition_xChanging(value)
				Me.SendPropertyChanging
				Me._position_x = value
				Me.SendPropertyChanged("position_x")
				Me.Onposition_xChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_position_y", DbType:="Real NOT NULL")>  _
	Public Property position_y() As Single
		Get
			Return Me._position_y
		End Get
		Set
			If ((Me._position_y = value)  _
						= false) Then
				Me.Onposition_yChanging(value)
				Me.SendPropertyChanging
				Me._position_y = value
				Me.SendPropertyChanged("position_y")
				Me.Onposition_yChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_position_z", DbType:="Real NOT NULL")>  _
	Public Property position_z() As Single
		Get
			Return Me._position_z
		End Get
		Set
			If ((Me._position_z = value)  _
						= false) Then
				Me.Onposition_zChanging(value)
				Me.SendPropertyChanging
				Me._position_z = value
				Me.SendPropertyChanged("position_z")
				Me.Onposition_zChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_waittime", DbType:="Int NOT NULL")>  _
	Public Property waittime() As Integer
		Get
			Return Me._waittime
		End Get
		Set
			If ((Me._waittime = value)  _
						= false) Then
				Me.OnwaittimeChanging(value)
				Me.SendPropertyChanging
				Me._waittime = value
				Me.SendPropertyChanged("waittime")
				Me.OnwaittimeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_script_id", DbType:="Int NOT NULL")>  _
	Public Property script_id() As Integer
		Get
			Return Me._script_id
		End Get
		Set
			If ((Me._script_id = value)  _
						= false) Then
				Me.Onscript_idChanging(value)
				Me.SendPropertyChanging
				Me._script_id = value
				Me.SendPropertyChanged("script_id")
				Me.Onscript_idChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_textid1", DbType:="Int NOT NULL")>  _
	Public Property textid1() As Integer
		Get
			Return Me._textid1
		End Get
		Set
			If ((Me._textid1 = value)  _
						= false) Then
				Me.Ontextid1Changing(value)
				Me.SendPropertyChanging
				Me._textid1 = value
				Me.SendPropertyChanged("textid1")
				Me.Ontextid1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_textid2", DbType:="Int NOT NULL")>  _
	Public Property textid2() As Integer
		Get
			Return Me._textid2
		End Get
		Set
			If ((Me._textid2 = value)  _
						= false) Then
				Me.Ontextid2Changing(value)
				Me.SendPropertyChanging
				Me._textid2 = value
				Me.SendPropertyChanged("textid2")
				Me.Ontextid2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_textid3", DbType:="Int NOT NULL")>  _
	Public Property textid3() As Integer
		Get
			Return Me._textid3
		End Get
		Set
			If ((Me._textid3 = value)  _
						= false) Then
				Me.Ontextid3Changing(value)
				Me.SendPropertyChanging
				Me._textid3 = value
				Me.SendPropertyChanged("textid3")
				Me.Ontextid3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_textid4", DbType:="Int NOT NULL")>  _
	Public Property textid4() As Integer
		Get
			Return Me._textid4
		End Get
		Set
			If ((Me._textid4 = value)  _
						= false) Then
				Me.Ontextid4Changing(value)
				Me.SendPropertyChanging
				Me._textid4 = value
				Me.SendPropertyChanged("textid4")
				Me.Ontextid4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_textid5", DbType:="Int NOT NULL")>  _
	Public Property textid5() As Integer
		Get
			Return Me._textid5
		End Get
		Set
			If ((Me._textid5 = value)  _
						= false) Then
				Me.Ontextid5Changing(value)
				Me.SendPropertyChanging
				Me._textid5 = value
				Me.SendPropertyChanged("textid5")
				Me.Ontextid5Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_emote", DbType:="Int NOT NULL")>  _
	Public Property emote() As Integer
		Get
			Return Me._emote
		End Get
		Set
			If ((Me._emote = value)  _
						= false) Then
				Me.OnemoteChanging(value)
				Me.SendPropertyChanging
				Me._emote = value
				Me.SendPropertyChanged("emote")
				Me.OnemoteChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_spell", DbType:="Int NOT NULL")>  _
	Public Property spell() As Integer
		Get
			Return Me._spell
		End Get
		Set
			If ((Me._spell = value)  _
						= false) Then
				Me.OnspellChanging(value)
				Me.SendPropertyChanging
				Me._spell = value
				Me.SendPropertyChanged("spell")
				Me.OnspellChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_wpguid", DbType:="Int NOT NULL")>  _
	Public Property wpguid() As Integer
		Get
			Return Me._wpguid
		End Get
		Set
			If ((Me._wpguid = value)  _
						= false) Then
				Me.OnwpguidChanging(value)
				Me.SendPropertyChanging
				Me._wpguid = value
				Me.SendPropertyChanged("wpguid")
				Me.OnwpguidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_orientation", DbType:="Real NOT NULL")>  _
	Public Property orientation() As Single
		Get
			Return Me._orientation
		End Get
		Set
			If ((Me._orientation = value)  _
						= false) Then
				Me.OnorientationChanging(value)
				Me.SendPropertyChanging
				Me._orientation = value
				Me.SendPropertyChanged("orientation")
				Me.OnorientationChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_model1", DbType:="Int NOT NULL")>  _
	Public Property model1() As Integer
		Get
			Return Me._model1
		End Get
		Set
			If ((Me._model1 = value)  _
						= false) Then
				Me.Onmodel1Changing(value)
				Me.SendPropertyChanging
				Me._model1 = value
				Me.SendPropertyChanged("model1")
				Me.Onmodel1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_model2", DbType:="Int NOT NULL")>  _
	Public Property model2() As Integer
		Get
			Return Me._model2
		End Get
		Set
			If ((Me._model2 = value)  _
						= false) Then
				Me.Onmodel2Changing(value)
				Me.SendPropertyChanging
				Me._model2 = value
				Me.SendPropertyChanged("model2")
				Me.Onmodel2Changed
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
End Namespace
