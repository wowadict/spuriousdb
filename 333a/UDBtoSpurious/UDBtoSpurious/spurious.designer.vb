'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.4927
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection
Namespace SPURIOUS

<System.Data.Linq.Mapping.DatabaseAttribute(Name:="spurious")>  _
Partial Public Class spuriousDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub Insertspawns_creature(instance As spawns_creature)
    End Sub
  Partial Private Sub Updatespawns_creature(instance As spawns_creature)
    End Sub
  Partial Private Sub Deletespawns_creature(instance As spawns_creature)
    End Sub
  Partial Private Sub Insertgameobject(instance As gameobject)
    End Sub
  Partial Private Sub Updategameobject(instance As gameobject)
    End Sub
  Partial Private Sub Deletegameobject(instance As gameobject)
    End Sub
  Partial Private Sub Insertspawns_gameobject(instance As spawns_gameobject)
    End Sub
  Partial Private Sub Updatespawns_gameobject(instance As spawns_gameobject)
    End Sub
  Partial Private Sub Deletespawns_gameobject(instance As spawns_gameobject)
    End Sub
  Partial Private Sub Insertitem(instance As item)
    End Sub
  Partial Private Sub Updateitem(instance As item)
    End Sub
  Partial Private Sub Deleteitem(instance As item)
    End Sub
  Partial Private Sub Insertquest(instance As quest)
    End Sub
  Partial Private Sub Updatequest(instance As quest)
    End Sub
  Partial Private Sub Deletequest(instance As quest)
    End Sub
  Partial Private Sub Insertqueststarter(instance As queststarter)
    End Sub
  Partial Private Sub Updatequeststarter(instance As queststarter)
    End Sub
  Partial Private Sub Deletequeststarter(instance As queststarter)
    End Sub
  Partial Private Sub Insertquestfinisher(instance As questfinisher)
    End Sub
  Partial Private Sub Updatequestfinisher(instance As questfinisher)
    End Sub
  Partial Private Sub Deletequestfinisher(instance As questfinisher)
    End Sub
  Partial Private Sub Insertbattleground_battlemaster(instance As battleground_battlemaster)
    End Sub
  Partial Private Sub Updatebattleground_battlemaster(instance As battleground_battlemaster)
    End Sub
  Partial Private Sub Deletebattleground_battlemaster(instance As battleground_battlemaster)
    End Sub
  Partial Private Sub Insertbattleground_template(instance As battleground_template)
    End Sub
  Partial Private Sub Updatebattleground_template(instance As battleground_template)
    End Sub
  Partial Private Sub Deletebattleground_template(instance As battleground_template)
    End Sub
  Partial Private Sub Insertareatrigger_involvedrelation(instance As areatrigger_involvedrelation)
    End Sub
  Partial Private Sub Updateareatrigger_involvedrelation(instance As areatrigger_involvedrelation)
    End Sub
  Partial Private Sub Deleteareatrigger_involvedrelation(instance As areatrigger_involvedrelation)
    End Sub
  Partial Private Sub Insertareatrigger_tavern(instance As areatrigger_tavern)
    End Sub
  Partial Private Sub Updateareatrigger_tavern(instance As areatrigger_tavern)
    End Sub
  Partial Private Sub Deleteareatrigger_tavern(instance As areatrigger_tavern)
    End Sub
  Partial Private Sub Insertareatrigger_teleport(instance As areatrigger_teleport)
    End Sub
  Partial Private Sub Updateareatrigger_teleport(instance As areatrigger_teleport)
    End Sub
  Partial Private Sub Deleteareatrigger_teleport(instance As areatrigger_teleport)
    End Sub
  Partial Private Sub Insertspells_teleport_coord(instance As spells_teleport_coord)
    End Sub
  Partial Private Sub Updatespells_teleport_coord(instance As spells_teleport_coord)
    End Sub
  Partial Private Sub Deletespells_teleport_coord(instance As spells_teleport_coord)
    End Sub
  Partial Private Sub Insertnpc_gossip_textid(instance As npc_gossip_textid)
    End Sub
  Partial Private Sub Updatenpc_gossip_textid(instance As npc_gossip_textid)
    End Sub
  Partial Private Sub Deletenpc_gossip_textid(instance As npc_gossip_textid)
    End Sub
  Partial Private Sub Insertnpc_monstersay(instance As npc_monstersay)
    End Sub
  Partial Private Sub Updatenpc_monstersay(instance As npc_monstersay)
    End Sub
  Partial Private Sub Deletenpc_monstersay(instance As npc_monstersay)
    End Sub
  Partial Private Sub Insertnpctext(instance As npctext)
    End Sub
  Partial Private Sub Updatenpctext(instance As npctext)
    End Sub
  Partial Private Sub Deletenpctext(instance As npctext)
    End Sub
  Partial Private Sub Insertweather(instance As weather)
    End Sub
  Partial Private Sub Updateweather(instance As weather)
    End Sub
  Partial Private Sub Deleteweather(instance As weather)
    End Sub
  Partial Private Sub Insertitempage(instance As itempage)
    End Sub
  Partial Private Sub Updateitempage(instance As itempage)
    End Sub
  Partial Private Sub Deleteitempage(instance As itempage)
    End Sub
  Partial Private Sub Insertitempetfood(instance As itempetfood)
    End Sub
  Partial Private Sub Updateitempetfood(instance As itempetfood)
    End Sub
  Partial Private Sub Deleteitempetfood(instance As itempetfood)
    End Sub
  Partial Private Sub Insertloots_skinning(instance As loots_skinning)
    End Sub
  Partial Private Sub Updateloots_skinning(instance As loots_skinning)
    End Sub
  Partial Private Sub Deleteloots_skinning(instance As loots_skinning)
    End Sub
  Partial Private Sub Insertitemloot(instance As itemloot)
    End Sub
  Partial Private Sub Updateitemloot(instance As itemloot)
    End Sub
  Partial Private Sub Deleteitemloot(instance As itemloot)
    End Sub
  Partial Private Sub Insertcreature(instance As creature)
    End Sub
  Partial Private Sub Updatecreature(instance As creature)
    End Sub
  Partial Private Sub Deletecreature(instance As creature)
    End Sub
  Partial Private Sub Insertnpc_vendor(instance As npc_vendor)
    End Sub
  Partial Private Sub Updatenpc_vendor(instance As npc_vendor)
    End Sub
  Partial Private Sub Deletenpc_vendor(instance As npc_vendor)
    End Sub
  Partial Private Sub Insertplayercreateinfo(instance As playercreateinfo)
    End Sub
  Partial Private Sub Updateplayercreateinfo(instance As playercreateinfo)
    End Sub
  Partial Private Sub Deleteplayercreateinfo(instance As playercreateinfo)
    End Sub
  Partial Private Sub Insertplayercreateinfo_bar(instance As playercreateinfo_bar)
    End Sub
  Partial Private Sub Updateplayercreateinfo_bar(instance As playercreateinfo_bar)
    End Sub
  Partial Private Sub Deleteplayercreateinfo_bar(instance As playercreateinfo_bar)
    End Sub
  Partial Private Sub Insertplayercreateinfo_spell(instance As playercreateinfo_spell)
    End Sub
  Partial Private Sub Updateplayercreateinfo_spell(instance As playercreateinfo_spell)
    End Sub
  Partial Private Sub Deleteplayercreateinfo_spell(instance As playercreateinfo_spell)
    End Sub
  Partial Private Sub Insertloots_gameobject(instance As loots_gameobject)
    End Sub
  Partial Private Sub Updateloots_gameobject(instance As loots_gameobject)
    End Sub
  Partial Private Sub Deleteloots_gameobject(instance As loots_gameobject)
    End Sub
  Partial Private Sub Insertloot(instance As loot)
    End Sub
  Partial Private Sub Updateloot(instance As loot)
    End Sub
  Partial Private Sub Deleteloot(instance As loot)
    End Sub
  Partial Private Sub Insertcreature_movement(instance As creature_movement)
    End Sub
  Partial Private Sub Updatecreature_movement(instance As creature_movement)
    End Sub
  Partial Private Sub Deletecreature_movement(instance As creature_movement)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.UDBtoSpurious.My.MySettings.Default.spuriousConnectionString1, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property spawns_creatures() As System.Data.Linq.Table(Of spawns_creature)
		Get
			Return Me.GetTable(Of spawns_creature)
		End Get
	End Property
	
	Public ReadOnly Property gameobjects() As System.Data.Linq.Table(Of gameobject)
		Get
			Return Me.GetTable(Of gameobject)
		End Get
	End Property
	
	Public ReadOnly Property spawns_gameobjects() As System.Data.Linq.Table(Of spawns_gameobject)
		Get
			Return Me.GetTable(Of spawns_gameobject)
		End Get
	End Property
	
	Public ReadOnly Property items() As System.Data.Linq.Table(Of item)
		Get
			Return Me.GetTable(Of item)
		End Get
	End Property
	
	Public ReadOnly Property quests() As System.Data.Linq.Table(Of quest)
		Get
			Return Me.GetTable(Of quest)
		End Get
	End Property
	
	Public ReadOnly Property queststarters() As System.Data.Linq.Table(Of queststarter)
		Get
			Return Me.GetTable(Of queststarter)
		End Get
	End Property
	
	Public ReadOnly Property questfinishers() As System.Data.Linq.Table(Of questfinisher)
		Get
			Return Me.GetTable(Of questfinisher)
		End Get
	End Property
	
	Public ReadOnly Property battleground_battlemasters() As System.Data.Linq.Table(Of battleground_battlemaster)
		Get
			Return Me.GetTable(Of battleground_battlemaster)
		End Get
	End Property
	
	Public ReadOnly Property battleground_templates() As System.Data.Linq.Table(Of battleground_template)
		Get
			Return Me.GetTable(Of battleground_template)
		End Get
	End Property
	
	Public ReadOnly Property areatrigger_involvedrelations() As System.Data.Linq.Table(Of areatrigger_involvedrelation)
		Get
			Return Me.GetTable(Of areatrigger_involvedrelation)
		End Get
	End Property
	
	Public ReadOnly Property areatrigger_taverns() As System.Data.Linq.Table(Of areatrigger_tavern)
		Get
			Return Me.GetTable(Of areatrigger_tavern)
		End Get
	End Property
	
	Public ReadOnly Property areatrigger_teleports() As System.Data.Linq.Table(Of areatrigger_teleport)
		Get
			Return Me.GetTable(Of areatrigger_teleport)
		End Get
	End Property
	
	Public ReadOnly Property spells_teleport_coords() As System.Data.Linq.Table(Of spells_teleport_coord)
		Get
			Return Me.GetTable(Of spells_teleport_coord)
		End Get
	End Property
	
	Public ReadOnly Property npc_gossip_textids() As System.Data.Linq.Table(Of npc_gossip_textid)
		Get
			Return Me.GetTable(Of npc_gossip_textid)
		End Get
	End Property
	
	Public ReadOnly Property npc_monstersays() As System.Data.Linq.Table(Of npc_monstersay)
		Get
			Return Me.GetTable(Of npc_monstersay)
		End Get
	End Property
	
	Public ReadOnly Property npctexts() As System.Data.Linq.Table(Of npctext)
		Get
			Return Me.GetTable(Of npctext)
		End Get
	End Property
	
	Public ReadOnly Property weathers() As System.Data.Linq.Table(Of weather)
		Get
			Return Me.GetTable(Of weather)
		End Get
	End Property
	
	Public ReadOnly Property itempages() As System.Data.Linq.Table(Of itempage)
		Get
			Return Me.GetTable(Of itempage)
		End Get
	End Property
	
	Public ReadOnly Property itempetfoods() As System.Data.Linq.Table(Of itempetfood)
		Get
			Return Me.GetTable(Of itempetfood)
		End Get
	End Property
	
	Public ReadOnly Property loots_skinnings() As System.Data.Linq.Table(Of loots_skinning)
		Get
			Return Me.GetTable(Of loots_skinning)
		End Get
	End Property
	
	Public ReadOnly Property itemloots() As System.Data.Linq.Table(Of itemloot)
		Get
			Return Me.GetTable(Of itemloot)
		End Get
	End Property
	
	Public ReadOnly Property creatures() As System.Data.Linq.Table(Of creature)
		Get
			Return Me.GetTable(Of creature)
		End Get
	End Property
	
	Public ReadOnly Property npc_vendors() As System.Data.Linq.Table(Of npc_vendor)
		Get
			Return Me.GetTable(Of npc_vendor)
		End Get
	End Property
	
	Public ReadOnly Property playercreateinfos() As System.Data.Linq.Table(Of playercreateinfo)
		Get
			Return Me.GetTable(Of playercreateinfo)
		End Get
	End Property
	
	Public ReadOnly Property playercreateinfo_items() As System.Data.Linq.Table(Of playercreateinfo_item)
		Get
			Return Me.GetTable(Of playercreateinfo_item)
		End Get
	End Property
	
	Public ReadOnly Property playercreateinfo_skills() As System.Data.Linq.Table(Of playercreateinfo_skill)
		Get
			Return Me.GetTable(Of playercreateinfo_skill)
		End Get
	End Property
	
	Public ReadOnly Property playercreateinfo_bars() As System.Data.Linq.Table(Of playercreateinfo_bar)
		Get
			Return Me.GetTable(Of playercreateinfo_bar)
		End Get
	End Property
	
	Public ReadOnly Property playercreateinfo_spells() As System.Data.Linq.Table(Of playercreateinfo_spell)
		Get
			Return Me.GetTable(Of playercreateinfo_spell)
		End Get
	End Property
	
	Public ReadOnly Property loots_gameobjects() As System.Data.Linq.Table(Of loots_gameobject)
		Get
			Return Me.GetTable(Of loots_gameobject)
		End Get
	End Property
	
	Public ReadOnly Property loots() As System.Data.Linq.Table(Of loot)
		Get
			Return Me.GetTable(Of loot)
		End Get
	End Property
	
	Public ReadOnly Property creature_movements() As System.Data.Linq.Table(Of creature_movement)
		Get
			Return Me.GetTable(Of creature_movement)
		End Get
	End Property
End Class

<Table(Name:="dbo.spawns_creatures")>  _
Partial Public Class spawns_creature
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _spawn_id As Integer
	
	Private _spawn_entry As Integer
	
	Private _spawn_positionX As Single
	
	Private _spawn_positionY As Single
	
	Private _spawn_positionZ As Single
	
	Private _spawn_orientation As Single
	
	Private _spawn_range As Integer
	
	Private _spawn_map As Integer
	
	Private _spawn_movetype As Short
	
	Private _spawn_displayid As Short
	
	Private _spawn_faction As Short
	
	Private _spawn_mount As Short
	
	Private _spawn_flags As Long
	
	Private _spawn_bytes0 As Integer
	
	Private _spawn_bytes1 As Integer
	
	Private _spawn_bytes2 As Integer
	
	Private _spawn_emotestate As Short
	
	Private _spawn_standstate As Short
	
	Private _spawn_equipslot1 As Integer
	
	Private _spawn_equipslot2 As Integer
	
	Private _spawn_equipslot3 As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onspawn_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onspawn_idChanged()
    End Sub
    Partial Private Sub Onspawn_entryChanging(value As Integer)
    End Sub
    Partial Private Sub Onspawn_entryChanged()
    End Sub
    Partial Private Sub Onspawn_positionXChanging(value As Single)
    End Sub
    Partial Private Sub Onspawn_positionXChanged()
    End Sub
    Partial Private Sub Onspawn_positionYChanging(value As Single)
    End Sub
    Partial Private Sub Onspawn_positionYChanged()
    End Sub
    Partial Private Sub Onspawn_positionZChanging(value As Single)
    End Sub
    Partial Private Sub Onspawn_positionZChanged()
    End Sub
    Partial Private Sub Onspawn_orientationChanging(value As Single)
    End Sub
    Partial Private Sub Onspawn_orientationChanged()
    End Sub
    Partial Private Sub Onspawn_rangeChanging(value As Integer)
    End Sub
    Partial Private Sub Onspawn_rangeChanged()
    End Sub
    Partial Private Sub Onspawn_mapChanging(value As Integer)
    End Sub
    Partial Private Sub Onspawn_mapChanged()
    End Sub
    Partial Private Sub Onspawn_movetypeChanging(value As Short)
    End Sub
    Partial Private Sub Onspawn_movetypeChanged()
    End Sub
    Partial Private Sub Onspawn_displayidChanging(value As Short)
    End Sub
    Partial Private Sub Onspawn_displayidChanged()
    End Sub
    Partial Private Sub Onspawn_factionChanging(value As Short)
    End Sub
    Partial Private Sub Onspawn_factionChanged()
    End Sub
    Partial Private Sub Onspawn_mountChanging(value As Short)
    End Sub
    Partial Private Sub Onspawn_mountChanged()
    End Sub
    Partial Private Sub Onspawn_flagsChanging(value As Long)
    End Sub
    Partial Private Sub Onspawn_flagsChanged()
    End Sub
    Partial Private Sub Onspawn_bytes0Changing(value As Integer)
    End Sub
    Partial Private Sub Onspawn_bytes0Changed()
    End Sub
    Partial Private Sub Onspawn_bytes1Changing(value As Integer)
    End Sub
    Partial Private Sub Onspawn_bytes1Changed()
    End Sub
    Partial Private Sub Onspawn_bytes2Changing(value As Integer)
    End Sub
    Partial Private Sub Onspawn_bytes2Changed()
    End Sub
    Partial Private Sub Onspawn_emotestateChanging(value As Short)
    End Sub
    Partial Private Sub Onspawn_emotestateChanged()
    End Sub
    Partial Private Sub Onspawn_standstateChanging(value As Short)
    End Sub
    Partial Private Sub Onspawn_standstateChanged()
    End Sub
    Partial Private Sub Onspawn_equipslot1Changing(value As Integer)
    End Sub
    Partial Private Sub Onspawn_equipslot1Changed()
    End Sub
    Partial Private Sub Onspawn_equipslot2Changing(value As Integer)
    End Sub
    Partial Private Sub Onspawn_equipslot2Changed()
    End Sub
    Partial Private Sub Onspawn_equipslot3Changing(value As Integer)
    End Sub
    Partial Private Sub Onspawn_equipslot3Changed()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_spawn_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property spawn_id() As Integer
		Get
			Return Me._spawn_id
		End Get
		Set
			If ((Me._spawn_id = value)  _
						= false) Then
				Me.Onspawn_idChanging(value)
				Me.SendPropertyChanging
				Me._spawn_id = value
				Me.SendPropertyChanged("spawn_id")
				Me.Onspawn_idChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_spawn_entry", DbType:="Int NOT NULL")>  _
	Public Property spawn_entry() As Integer
		Get
			Return Me._spawn_entry
		End Get
		Set
			If ((Me._spawn_entry = value)  _
						= false) Then
				Me.Onspawn_entryChanging(value)
				Me.SendPropertyChanging
				Me._spawn_entry = value
				Me.SendPropertyChanged("spawn_entry")
				Me.Onspawn_entryChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_spawn_positionX", DbType:="Real NOT NULL")>  _
	Public Property spawn_positionX() As Single
		Get
			Return Me._spawn_positionX
		End Get
		Set
			If ((Me._spawn_positionX = value)  _
						= false) Then
				Me.Onspawn_positionXChanging(value)
				Me.SendPropertyChanging
				Me._spawn_positionX = value
				Me.SendPropertyChanged("spawn_positionX")
				Me.Onspawn_positionXChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_spawn_positionY", DbType:="Real NOT NULL")>  _
	Public Property spawn_positionY() As Single
		Get
			Return Me._spawn_positionY
		End Get
		Set
			If ((Me._spawn_positionY = value)  _
						= false) Then
				Me.Onspawn_positionYChanging(value)
				Me.SendPropertyChanging
				Me._spawn_positionY = value
				Me.SendPropertyChanged("spawn_positionY")
				Me.Onspawn_positionYChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_spawn_positionZ", DbType:="Real NOT NULL")>  _
	Public Property spawn_positionZ() As Single
		Get
			Return Me._spawn_positionZ
		End Get
		Set
			If ((Me._spawn_positionZ = value)  _
						= false) Then
				Me.Onspawn_positionZChanging(value)
				Me.SendPropertyChanging
				Me._spawn_positionZ = value
				Me.SendPropertyChanged("spawn_positionZ")
				Me.Onspawn_positionZChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_spawn_orientation", DbType:="Real NOT NULL")>  _
	Public Property spawn_orientation() As Single
		Get
			Return Me._spawn_orientation
		End Get
		Set
			If ((Me._spawn_orientation = value)  _
						= false) Then
				Me.Onspawn_orientationChanging(value)
				Me.SendPropertyChanging
				Me._spawn_orientation = value
				Me.SendPropertyChanged("spawn_orientation")
				Me.Onspawn_orientationChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_spawn_range", DbType:="Int NOT NULL")>  _
	Public Property spawn_range() As Integer
		Get
			Return Me._spawn_range
		End Get
		Set
			If ((Me._spawn_range = value)  _
						= false) Then
				Me.Onspawn_rangeChanging(value)
				Me.SendPropertyChanging
				Me._spawn_range = value
				Me.SendPropertyChanged("spawn_range")
				Me.Onspawn_rangeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_spawn_map", DbType:="Int NOT NULL")>  _
	Public Property spawn_map() As Integer
		Get
			Return Me._spawn_map
		End Get
		Set
			If ((Me._spawn_map = value)  _
						= false) Then
				Me.Onspawn_mapChanging(value)
				Me.SendPropertyChanging
				Me._spawn_map = value
				Me.SendPropertyChanged("spawn_map")
				Me.Onspawn_mapChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_spawn_movetype", DbType:="SmallInt NOT NULL")>  _
	Public Property spawn_movetype() As Short
		Get
			Return Me._spawn_movetype
		End Get
		Set
			If ((Me._spawn_movetype = value)  _
						= false) Then
				Me.Onspawn_movetypeChanging(value)
				Me.SendPropertyChanging
				Me._spawn_movetype = value
				Me.SendPropertyChanged("spawn_movetype")
				Me.Onspawn_movetypeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_spawn_displayid", DbType:="SmallInt NOT NULL")>  _
	Public Property spawn_displayid() As Short
		Get
			Return Me._spawn_displayid
		End Get
		Set
			If ((Me._spawn_displayid = value)  _
						= false) Then
				Me.Onspawn_displayidChanging(value)
				Me.SendPropertyChanging
				Me._spawn_displayid = value
				Me.SendPropertyChanged("spawn_displayid")
				Me.Onspawn_displayidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_spawn_faction", DbType:="SmallInt NOT NULL")>  _
	Public Property spawn_faction() As Short
		Get
			Return Me._spawn_faction
		End Get
		Set
			If ((Me._spawn_faction = value)  _
						= false) Then
				Me.Onspawn_factionChanging(value)
				Me.SendPropertyChanging
				Me._spawn_faction = value
				Me.SendPropertyChanged("spawn_faction")
				Me.Onspawn_factionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_spawn_mount", DbType:="SmallInt NOT NULL")>  _
	Public Property spawn_mount() As Short
		Get
			Return Me._spawn_mount
		End Get
		Set
			If ((Me._spawn_mount = value)  _
						= false) Then
				Me.Onspawn_mountChanging(value)
				Me.SendPropertyChanging
				Me._spawn_mount = value
				Me.SendPropertyChanged("spawn_mount")
				Me.Onspawn_mountChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_spawn_flags", DbType:="BigInt NOT NULL")>  _
	Public Property spawn_flags() As Long
		Get
			Return Me._spawn_flags
		End Get
		Set
			If ((Me._spawn_flags = value)  _
						= false) Then
				Me.Onspawn_flagsChanging(value)
				Me.SendPropertyChanging
				Me._spawn_flags = value
				Me.SendPropertyChanged("spawn_flags")
				Me.Onspawn_flagsChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_spawn_bytes0", DbType:="Int NOT NULL")>  _
	Public Property spawn_bytes0() As Integer
		Get
			Return Me._spawn_bytes0
		End Get
		Set
			If ((Me._spawn_bytes0 = value)  _
						= false) Then
				Me.Onspawn_bytes0Changing(value)
				Me.SendPropertyChanging
				Me._spawn_bytes0 = value
				Me.SendPropertyChanged("spawn_bytes0")
				Me.Onspawn_bytes0Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spawn_bytes1", DbType:="Int NOT NULL")>  _
	Public Property spawn_bytes1() As Integer
		Get
			Return Me._spawn_bytes1
		End Get
		Set
			If ((Me._spawn_bytes1 = value)  _
						= false) Then
				Me.Onspawn_bytes1Changing(value)
				Me.SendPropertyChanging
				Me._spawn_bytes1 = value
				Me.SendPropertyChanged("spawn_bytes1")
				Me.Onspawn_bytes1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spawn_bytes2", DbType:="Int NOT NULL")>  _
	Public Property spawn_bytes2() As Integer
		Get
			Return Me._spawn_bytes2
		End Get
		Set
			If ((Me._spawn_bytes2 = value)  _
						= false) Then
				Me.Onspawn_bytes2Changing(value)
				Me.SendPropertyChanging
				Me._spawn_bytes2 = value
				Me.SendPropertyChanged("spawn_bytes2")
				Me.Onspawn_bytes2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spawn_emotestate", DbType:="SmallInt NOT NULL")>  _
	Public Property spawn_emotestate() As Short
		Get
			Return Me._spawn_emotestate
		End Get
		Set
			If ((Me._spawn_emotestate = value)  _
						= false) Then
				Me.Onspawn_emotestateChanging(value)
				Me.SendPropertyChanging
				Me._spawn_emotestate = value
				Me.SendPropertyChanged("spawn_emotestate")
				Me.Onspawn_emotestateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_spawn_standstate", DbType:="SmallInt NOT NULL")>  _
	Public Property spawn_standstate() As Short
		Get
			Return Me._spawn_standstate
		End Get
		Set
			If ((Me._spawn_standstate = value)  _
						= false) Then
				Me.Onspawn_standstateChanging(value)
				Me.SendPropertyChanging
				Me._spawn_standstate = value
				Me.SendPropertyChanged("spawn_standstate")
				Me.Onspawn_standstateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_spawn_equipslot1", DbType:="Int NOT NULL")>  _
	Public Property spawn_equipslot1() As Integer
		Get
			Return Me._spawn_equipslot1
		End Get
		Set
			If ((Me._spawn_equipslot1 = value)  _
						= false) Then
				Me.Onspawn_equipslot1Changing(value)
				Me.SendPropertyChanging
				Me._spawn_equipslot1 = value
				Me.SendPropertyChanged("spawn_equipslot1")
				Me.Onspawn_equipslot1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spawn_equipslot2", DbType:="Int NOT NULL")>  _
	Public Property spawn_equipslot2() As Integer
		Get
			Return Me._spawn_equipslot2
		End Get
		Set
			If ((Me._spawn_equipslot2 = value)  _
						= false) Then
				Me.Onspawn_equipslot2Changing(value)
				Me.SendPropertyChanging
				Me._spawn_equipslot2 = value
				Me.SendPropertyChanged("spawn_equipslot2")
				Me.Onspawn_equipslot2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spawn_equipslot3", DbType:="Int NOT NULL")>  _
	Public Property spawn_equipslot3() As Integer
		Get
			Return Me._spawn_equipslot3
		End Get
		Set
			If ((Me._spawn_equipslot3 = value)  _
						= false) Then
				Me.Onspawn_equipslot3Changing(value)
				Me.SendPropertyChanging
				Me._spawn_equipslot3 = value
				Me.SendPropertyChanged("spawn_equipslot3")
				Me.Onspawn_equipslot3Changed
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.gameobjects")>  _
Partial Public Class gameobject
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _gameObject_ID As Integer
	
	Private _gameObject_Model As Integer
	
	Private _gameObject_Name As String
	
	Private _gameObject_Type As Integer
	
	Private _gameObject_RespawnTime As Integer
	
	Private _gameObject_Field0 As Integer
	
	Private _gameObject_Field1 As Integer
	
	Private _gameObject_Field2 As Integer
	
	Private _gameObject_Field3 As Integer
	
	Private _gameObject_Field4 As Integer
	
	Private _gameObject_Field5 As Integer
	
	Private _gameObject_Field6 As Integer
	
	Private _gameObject_Field7 As Integer
	
	Private _gameObject_Field8 As Integer
	
	Private _gameObject_Field9 As Integer
	
	Private _gameObject_Field10 As Integer
	
	Private _gameObject_Field11 As Integer
	
	Private _gameObject_Field12 As Integer
	
	Private _gameObject_Field13 As Integer
	
	Private _gameObject_Field14 As Integer
	
	Private _gameObject_Field15 As Short
	
	Private _gameObject_Field16 As Short
	
	Private _gameObject_Field17 As Short
	
	Private _gameObject_Field18 As Short
	
	Private _gameObject_Field19 As Integer
	
	Private _gameObject_Field20 As Integer
	
	Private _gameObject_Field21 As Integer
	
	Private _gameObject_Field22 As Integer
	
	Private _gameObject_Field23 As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OngameObject_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OngameObject_IDChanged()
    End Sub
    Partial Private Sub OngameObject_ModelChanging(value As Integer)
    End Sub
    Partial Private Sub OngameObject_ModelChanged()
    End Sub
    Partial Private Sub OngameObject_NameChanging(value As String)
    End Sub
    Partial Private Sub OngameObject_NameChanged()
    End Sub
    Partial Private Sub OngameObject_TypeChanging(value As Integer)
    End Sub
    Partial Private Sub OngameObject_TypeChanged()
    End Sub
    Partial Private Sub OngameObject_RespawnTimeChanging(value As Integer)
    End Sub
    Partial Private Sub OngameObject_RespawnTimeChanged()
    End Sub
    Partial Private Sub OngameObject_Field0Changing(value As Integer)
    End Sub
    Partial Private Sub OngameObject_Field0Changed()
    End Sub
    Partial Private Sub OngameObject_Field1Changing(value As Integer)
    End Sub
    Partial Private Sub OngameObject_Field1Changed()
    End Sub
    Partial Private Sub OngameObject_Field2Changing(value As Integer)
    End Sub
    Partial Private Sub OngameObject_Field2Changed()
    End Sub
    Partial Private Sub OngameObject_Field3Changing(value As Integer)
    End Sub
    Partial Private Sub OngameObject_Field3Changed()
    End Sub
    Partial Private Sub OngameObject_Field4Changing(value As Integer)
    End Sub
    Partial Private Sub OngameObject_Field4Changed()
    End Sub
    Partial Private Sub OngameObject_Field5Changing(value As Integer)
    End Sub
    Partial Private Sub OngameObject_Field5Changed()
    End Sub
    Partial Private Sub OngameObject_Field6Changing(value As Integer)
    End Sub
    Partial Private Sub OngameObject_Field6Changed()
    End Sub
    Partial Private Sub OngameObject_Field7Changing(value As Integer)
    End Sub
    Partial Private Sub OngameObject_Field7Changed()
    End Sub
    Partial Private Sub OngameObject_Field8Changing(value As Integer)
    End Sub
    Partial Private Sub OngameObject_Field8Changed()
    End Sub
    Partial Private Sub OngameObject_Field9Changing(value As Integer)
    End Sub
    Partial Private Sub OngameObject_Field9Changed()
    End Sub
    Partial Private Sub OngameObject_Field10Changing(value As Integer)
    End Sub
    Partial Private Sub OngameObject_Field10Changed()
    End Sub
    Partial Private Sub OngameObject_Field11Changing(value As Integer)
    End Sub
    Partial Private Sub OngameObject_Field11Changed()
    End Sub
    Partial Private Sub OngameObject_Field12Changing(value As Integer)
    End Sub
    Partial Private Sub OngameObject_Field12Changed()
    End Sub
    Partial Private Sub OngameObject_Field13Changing(value As Integer)
    End Sub
    Partial Private Sub OngameObject_Field13Changed()
    End Sub
    Partial Private Sub OngameObject_Field14Changing(value As Integer)
    End Sub
    Partial Private Sub OngameObject_Field14Changed()
    End Sub
    Partial Private Sub OngameObject_Field15Changing(value As Short)
    End Sub
    Partial Private Sub OngameObject_Field15Changed()
    End Sub
    Partial Private Sub OngameObject_Field16Changing(value As Short)
    End Sub
    Partial Private Sub OngameObject_Field16Changed()
    End Sub
    Partial Private Sub OngameObject_Field17Changing(value As Short)
    End Sub
    Partial Private Sub OngameObject_Field17Changed()
    End Sub
    Partial Private Sub OngameObject_Field18Changing(value As Short)
    End Sub
    Partial Private Sub OngameObject_Field18Changed()
    End Sub
    Partial Private Sub OngameObject_Field19Changing(value As Integer)
    End Sub
    Partial Private Sub OngameObject_Field19Changed()
    End Sub
    Partial Private Sub OngameObject_Field20Changing(value As Integer)
    End Sub
    Partial Private Sub OngameObject_Field20Changed()
    End Sub
    Partial Private Sub OngameObject_Field21Changing(value As Integer)
    End Sub
    Partial Private Sub OngameObject_Field21Changed()
    End Sub
    Partial Private Sub OngameObject_Field22Changing(value As Integer)
    End Sub
    Partial Private Sub OngameObject_Field22Changed()
    End Sub
    Partial Private Sub OngameObject_Field23Changing(value As Integer)
    End Sub
    Partial Private Sub OngameObject_Field23Changed()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_gameObject_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property gameObject_ID() As Integer
		Get
			Return Me._gameObject_ID
		End Get
		Set
			If ((Me._gameObject_ID = value)  _
						= false) Then
				Me.OngameObject_IDChanging(value)
				Me.SendPropertyChanging
				Me._gameObject_ID = value
				Me.SendPropertyChanged("gameObject_ID")
				Me.OngameObject_IDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_gameObject_Model", DbType:="Int NOT NULL")>  _
	Public Property gameObject_Model() As Integer
		Get
			Return Me._gameObject_Model
		End Get
		Set
			If ((Me._gameObject_Model = value)  _
						= false) Then
				Me.OngameObject_ModelChanging(value)
				Me.SendPropertyChanging
				Me._gameObject_Model = value
				Me.SendPropertyChanged("gameObject_Model")
				Me.OngameObject_ModelChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_gameObject_Name", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property gameObject_Name() As String
		Get
			Return Me._gameObject_Name
		End Get
		Set
			If (String.Equals(Me._gameObject_Name, value) = false) Then
				Me.OngameObject_NameChanging(value)
				Me.SendPropertyChanging
				Me._gameObject_Name = value
				Me.SendPropertyChanged("gameObject_Name")
				Me.OngameObject_NameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_gameObject_Type", DbType:="Int NOT NULL")>  _
	Public Property gameObject_Type() As Integer
		Get
			Return Me._gameObject_Type
		End Get
		Set
			If ((Me._gameObject_Type = value)  _
						= false) Then
				Me.OngameObject_TypeChanging(value)
				Me.SendPropertyChanging
				Me._gameObject_Type = value
				Me.SendPropertyChanged("gameObject_Type")
				Me.OngameObject_TypeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_gameObject_RespawnTime", DbType:="Int NOT NULL")>  _
	Public Property gameObject_RespawnTime() As Integer
		Get
			Return Me._gameObject_RespawnTime
		End Get
		Set
			If ((Me._gameObject_RespawnTime = value)  _
						= false) Then
				Me.OngameObject_RespawnTimeChanging(value)
				Me.SendPropertyChanging
				Me._gameObject_RespawnTime = value
				Me.SendPropertyChanged("gameObject_RespawnTime")
				Me.OngameObject_RespawnTimeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_gameObject_Field0", DbType:="Int NOT NULL")>  _
	Public Property gameObject_Field0() As Integer
		Get
			Return Me._gameObject_Field0
		End Get
		Set
			If ((Me._gameObject_Field0 = value)  _
						= false) Then
				Me.OngameObject_Field0Changing(value)
				Me.SendPropertyChanging
				Me._gameObject_Field0 = value
				Me.SendPropertyChanged("gameObject_Field0")
				Me.OngameObject_Field0Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_gameObject_Field1", DbType:="Int NOT NULL")>  _
	Public Property gameObject_Field1() As Integer
		Get
			Return Me._gameObject_Field1
		End Get
		Set
			If ((Me._gameObject_Field1 = value)  _
						= false) Then
				Me.OngameObject_Field1Changing(value)
				Me.SendPropertyChanging
				Me._gameObject_Field1 = value
				Me.SendPropertyChanged("gameObject_Field1")
				Me.OngameObject_Field1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_gameObject_Field2", DbType:="Int NOT NULL")>  _
	Public Property gameObject_Field2() As Integer
		Get
			Return Me._gameObject_Field2
		End Get
		Set
			If ((Me._gameObject_Field2 = value)  _
						= false) Then
				Me.OngameObject_Field2Changing(value)
				Me.SendPropertyChanging
				Me._gameObject_Field2 = value
				Me.SendPropertyChanged("gameObject_Field2")
				Me.OngameObject_Field2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_gameObject_Field3", DbType:="Int NOT NULL")>  _
	Public Property gameObject_Field3() As Integer
		Get
			Return Me._gameObject_Field3
		End Get
		Set
			If ((Me._gameObject_Field3 = value)  _
						= false) Then
				Me.OngameObject_Field3Changing(value)
				Me.SendPropertyChanging
				Me._gameObject_Field3 = value
				Me.SendPropertyChanged("gameObject_Field3")
				Me.OngameObject_Field3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_gameObject_Field4", DbType:="Int NOT NULL")>  _
	Public Property gameObject_Field4() As Integer
		Get
			Return Me._gameObject_Field4
		End Get
		Set
			If ((Me._gameObject_Field4 = value)  _
						= false) Then
				Me.OngameObject_Field4Changing(value)
				Me.SendPropertyChanging
				Me._gameObject_Field4 = value
				Me.SendPropertyChanged("gameObject_Field4")
				Me.OngameObject_Field4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_gameObject_Field5", DbType:="Int NOT NULL")>  _
	Public Property gameObject_Field5() As Integer
		Get
			Return Me._gameObject_Field5
		End Get
		Set
			If ((Me._gameObject_Field5 = value)  _
						= false) Then
				Me.OngameObject_Field5Changing(value)
				Me.SendPropertyChanging
				Me._gameObject_Field5 = value
				Me.SendPropertyChanged("gameObject_Field5")
				Me.OngameObject_Field5Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_gameObject_Field6", DbType:="Int NOT NULL")>  _
	Public Property gameObject_Field6() As Integer
		Get
			Return Me._gameObject_Field6
		End Get
		Set
			If ((Me._gameObject_Field6 = value)  _
						= false) Then
				Me.OngameObject_Field6Changing(value)
				Me.SendPropertyChanging
				Me._gameObject_Field6 = value
				Me.SendPropertyChanged("gameObject_Field6")
				Me.OngameObject_Field6Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_gameObject_Field7", DbType:="Int NOT NULL")>  _
	Public Property gameObject_Field7() As Integer
		Get
			Return Me._gameObject_Field7
		End Get
		Set
			If ((Me._gameObject_Field7 = value)  _
						= false) Then
				Me.OngameObject_Field7Changing(value)
				Me.SendPropertyChanging
				Me._gameObject_Field7 = value
				Me.SendPropertyChanged("gameObject_Field7")
				Me.OngameObject_Field7Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_gameObject_Field8", DbType:="Int NOT NULL")>  _
	Public Property gameObject_Field8() As Integer
		Get
			Return Me._gameObject_Field8
		End Get
		Set
			If ((Me._gameObject_Field8 = value)  _
						= false) Then
				Me.OngameObject_Field8Changing(value)
				Me.SendPropertyChanging
				Me._gameObject_Field8 = value
				Me.SendPropertyChanged("gameObject_Field8")
				Me.OngameObject_Field8Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_gameObject_Field9", DbType:="Int NOT NULL")>  _
	Public Property gameObject_Field9() As Integer
		Get
			Return Me._gameObject_Field9
		End Get
		Set
			If ((Me._gameObject_Field9 = value)  _
						= false) Then
				Me.OngameObject_Field9Changing(value)
				Me.SendPropertyChanging
				Me._gameObject_Field9 = value
				Me.SendPropertyChanged("gameObject_Field9")
				Me.OngameObject_Field9Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_gameObject_Field10", DbType:="Int NOT NULL")>  _
	Public Property gameObject_Field10() As Integer
		Get
			Return Me._gameObject_Field10
		End Get
		Set
			If ((Me._gameObject_Field10 = value)  _
						= false) Then
				Me.OngameObject_Field10Changing(value)
				Me.SendPropertyChanging
				Me._gameObject_Field10 = value
				Me.SendPropertyChanged("gameObject_Field10")
				Me.OngameObject_Field10Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_gameObject_Field11", DbType:="Int NOT NULL")>  _
	Public Property gameObject_Field11() As Integer
		Get
			Return Me._gameObject_Field11
		End Get
		Set
			If ((Me._gameObject_Field11 = value)  _
						= false) Then
				Me.OngameObject_Field11Changing(value)
				Me.SendPropertyChanging
				Me._gameObject_Field11 = value
				Me.SendPropertyChanged("gameObject_Field11")
				Me.OngameObject_Field11Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_gameObject_Field12", DbType:="Int NOT NULL")>  _
	Public Property gameObject_Field12() As Integer
		Get
			Return Me._gameObject_Field12
		End Get
		Set
			If ((Me._gameObject_Field12 = value)  _
						= false) Then
				Me.OngameObject_Field12Changing(value)
				Me.SendPropertyChanging
				Me._gameObject_Field12 = value
				Me.SendPropertyChanged("gameObject_Field12")
				Me.OngameObject_Field12Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_gameObject_Field13", DbType:="Int NOT NULL")>  _
	Public Property gameObject_Field13() As Integer
		Get
			Return Me._gameObject_Field13
		End Get
		Set
			If ((Me._gameObject_Field13 = value)  _
						= false) Then
				Me.OngameObject_Field13Changing(value)
				Me.SendPropertyChanging
				Me._gameObject_Field13 = value
				Me.SendPropertyChanged("gameObject_Field13")
				Me.OngameObject_Field13Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_gameObject_Field14", DbType:="Int NOT NULL")>  _
	Public Property gameObject_Field14() As Integer
		Get
			Return Me._gameObject_Field14
		End Get
		Set
			If ((Me._gameObject_Field14 = value)  _
						= false) Then
				Me.OngameObject_Field14Changing(value)
				Me.SendPropertyChanging
				Me._gameObject_Field14 = value
				Me.SendPropertyChanged("gameObject_Field14")
				Me.OngameObject_Field14Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_gameObject_Field15", DbType:="SmallInt NOT NULL")>  _
	Public Property gameObject_Field15() As Short
		Get
			Return Me._gameObject_Field15
		End Get
		Set
			If ((Me._gameObject_Field15 = value)  _
						= false) Then
				Me.OngameObject_Field15Changing(value)
				Me.SendPropertyChanging
				Me._gameObject_Field15 = value
				Me.SendPropertyChanged("gameObject_Field15")
				Me.OngameObject_Field15Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_gameObject_Field16", DbType:="SmallInt NOT NULL")>  _
	Public Property gameObject_Field16() As Short
		Get
			Return Me._gameObject_Field16
		End Get
		Set
			If ((Me._gameObject_Field16 = value)  _
						= false) Then
				Me.OngameObject_Field16Changing(value)
				Me.SendPropertyChanging
				Me._gameObject_Field16 = value
				Me.SendPropertyChanged("gameObject_Field16")
				Me.OngameObject_Field16Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_gameObject_Field17", DbType:="SmallInt NOT NULL")>  _
	Public Property gameObject_Field17() As Short
		Get
			Return Me._gameObject_Field17
		End Get
		Set
			If ((Me._gameObject_Field17 = value)  _
						= false) Then
				Me.OngameObject_Field17Changing(value)
				Me.SendPropertyChanging
				Me._gameObject_Field17 = value
				Me.SendPropertyChanged("gameObject_Field17")
				Me.OngameObject_Field17Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_gameObject_Field18", DbType:="SmallInt NOT NULL")>  _
	Public Property gameObject_Field18() As Short
		Get
			Return Me._gameObject_Field18
		End Get
		Set
			If ((Me._gameObject_Field18 = value)  _
						= false) Then
				Me.OngameObject_Field18Changing(value)
				Me.SendPropertyChanging
				Me._gameObject_Field18 = value
				Me.SendPropertyChanged("gameObject_Field18")
				Me.OngameObject_Field18Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_gameObject_Field19", DbType:="Int NOT NULL")>  _
	Public Property gameObject_Field19() As Integer
		Get
			Return Me._gameObject_Field19
		End Get
		Set
			If ((Me._gameObject_Field19 = value)  _
						= false) Then
				Me.OngameObject_Field19Changing(value)
				Me.SendPropertyChanging
				Me._gameObject_Field19 = value
				Me.SendPropertyChanged("gameObject_Field19")
				Me.OngameObject_Field19Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_gameObject_Field20", DbType:="Int NOT NULL")>  _
	Public Property gameObject_Field20() As Integer
		Get
			Return Me._gameObject_Field20
		End Get
		Set
			If ((Me._gameObject_Field20 = value)  _
						= false) Then
				Me.OngameObject_Field20Changing(value)
				Me.SendPropertyChanging
				Me._gameObject_Field20 = value
				Me.SendPropertyChanged("gameObject_Field20")
				Me.OngameObject_Field20Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_gameObject_Field21", DbType:="Int NOT NULL")>  _
	Public Property gameObject_Field21() As Integer
		Get
			Return Me._gameObject_Field21
		End Get
		Set
			If ((Me._gameObject_Field21 = value)  _
						= false) Then
				Me.OngameObject_Field21Changing(value)
				Me.SendPropertyChanging
				Me._gameObject_Field21 = value
				Me.SendPropertyChanged("gameObject_Field21")
				Me.OngameObject_Field21Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_gameObject_Field22", DbType:="Int NOT NULL")>  _
	Public Property gameObject_Field22() As Integer
		Get
			Return Me._gameObject_Field22
		End Get
		Set
			If ((Me._gameObject_Field22 = value)  _
						= false) Then
				Me.OngameObject_Field22Changing(value)
				Me.SendPropertyChanging
				Me._gameObject_Field22 = value
				Me.SendPropertyChanged("gameObject_Field22")
				Me.OngameObject_Field22Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_gameObject_Field23", DbType:="Int NOT NULL")>  _
	Public Property gameObject_Field23() As Integer
		Get
			Return Me._gameObject_Field23
		End Get
		Set
			If ((Me._gameObject_Field23 = value)  _
						= false) Then
				Me.OngameObject_Field23Changing(value)
				Me.SendPropertyChanging
				Me._gameObject_Field23 = value
				Me.SendPropertyChanged("gameObject_Field23")
				Me.OngameObject_Field23Changed
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.spawns_gameobjects")>  _
Partial Public Class spawns_gameobject
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _spawn_id As Integer
	
	Private _spawn_entry As Integer
	
	Private _spawn_positionX As Single
	
	Private _spawn_positionY As Single
	
	Private _spawn_positionZ As Single
	
	Private _spawn_orientation As Single
	
	Private _spawn_orientation1 As Single
	
	Private _spawn_orientation2 As Single
	
	Private _spawn_orientation3 As Single
	
	Private _spawn_orientation4 As Single
	
	Private _spawn_map As Integer
	
	Private _spawn_state As Byte
	
	Private _spawn_flags As Integer
	
	Private _spawn_faction As Integer
	
	Private _spawn_scale As Single
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onspawn_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onspawn_idChanged()
    End Sub
    Partial Private Sub Onspawn_entryChanging(value As Integer)
    End Sub
    Partial Private Sub Onspawn_entryChanged()
    End Sub
    Partial Private Sub Onspawn_positionXChanging(value As Single)
    End Sub
    Partial Private Sub Onspawn_positionXChanged()
    End Sub
    Partial Private Sub Onspawn_positionYChanging(value As Single)
    End Sub
    Partial Private Sub Onspawn_positionYChanged()
    End Sub
    Partial Private Sub Onspawn_positionZChanging(value As Single)
    End Sub
    Partial Private Sub Onspawn_positionZChanged()
    End Sub
    Partial Private Sub Onspawn_orientationChanging(value As Single)
    End Sub
    Partial Private Sub Onspawn_orientationChanged()
    End Sub
    Partial Private Sub Onspawn_orientation1Changing(value As Single)
    End Sub
    Partial Private Sub Onspawn_orientation1Changed()
    End Sub
    Partial Private Sub Onspawn_orientation2Changing(value As Single)
    End Sub
    Partial Private Sub Onspawn_orientation2Changed()
    End Sub
    Partial Private Sub Onspawn_orientation3Changing(value As Single)
    End Sub
    Partial Private Sub Onspawn_orientation3Changed()
    End Sub
    Partial Private Sub Onspawn_orientation4Changing(value As Single)
    End Sub
    Partial Private Sub Onspawn_orientation4Changed()
    End Sub
    Partial Private Sub Onspawn_mapChanging(value As Integer)
    End Sub
    Partial Private Sub Onspawn_mapChanged()
    End Sub
    Partial Private Sub Onspawn_stateChanging(value As Byte)
    End Sub
    Partial Private Sub Onspawn_stateChanged()
    End Sub
    Partial Private Sub Onspawn_flagsChanging(value As Integer)
    End Sub
    Partial Private Sub Onspawn_flagsChanged()
    End Sub
    Partial Private Sub Onspawn_factionChanging(value As Integer)
    End Sub
    Partial Private Sub Onspawn_factionChanged()
    End Sub
    Partial Private Sub Onspawn_scaleChanging(value As Single)
    End Sub
    Partial Private Sub Onspawn_scaleChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_spawn_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property spawn_id() As Integer
		Get
			Return Me._spawn_id
		End Get
		Set
			If ((Me._spawn_id = value)  _
						= false) Then
				Me.Onspawn_idChanging(value)
				Me.SendPropertyChanging
				Me._spawn_id = value
				Me.SendPropertyChanged("spawn_id")
				Me.Onspawn_idChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_spawn_entry", DbType:="Int NOT NULL")>  _
	Public Property spawn_entry() As Integer
		Get
			Return Me._spawn_entry
		End Get
		Set
			If ((Me._spawn_entry = value)  _
						= false) Then
				Me.Onspawn_entryChanging(value)
				Me.SendPropertyChanging
				Me._spawn_entry = value
				Me.SendPropertyChanged("spawn_entry")
				Me.Onspawn_entryChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_spawn_positionX", DbType:="Real NOT NULL")>  _
	Public Property spawn_positionX() As Single
		Get
			Return Me._spawn_positionX
		End Get
		Set
			If ((Me._spawn_positionX = value)  _
						= false) Then
				Me.Onspawn_positionXChanging(value)
				Me.SendPropertyChanging
				Me._spawn_positionX = value
				Me.SendPropertyChanged("spawn_positionX")
				Me.Onspawn_positionXChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_spawn_positionY", DbType:="Real NOT NULL")>  _
	Public Property spawn_positionY() As Single
		Get
			Return Me._spawn_positionY
		End Get
		Set
			If ((Me._spawn_positionY = value)  _
						= false) Then
				Me.Onspawn_positionYChanging(value)
				Me.SendPropertyChanging
				Me._spawn_positionY = value
				Me.SendPropertyChanged("spawn_positionY")
				Me.Onspawn_positionYChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_spawn_positionZ", DbType:="Real NOT NULL")>  _
	Public Property spawn_positionZ() As Single
		Get
			Return Me._spawn_positionZ
		End Get
		Set
			If ((Me._spawn_positionZ = value)  _
						= false) Then
				Me.Onspawn_positionZChanging(value)
				Me.SendPropertyChanging
				Me._spawn_positionZ = value
				Me.SendPropertyChanged("spawn_positionZ")
				Me.Onspawn_positionZChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_spawn_orientation", DbType:="Real NOT NULL")>  _
	Public Property spawn_orientation() As Single
		Get
			Return Me._spawn_orientation
		End Get
		Set
			If ((Me._spawn_orientation = value)  _
						= false) Then
				Me.Onspawn_orientationChanging(value)
				Me.SendPropertyChanging
				Me._spawn_orientation = value
				Me.SendPropertyChanged("spawn_orientation")
				Me.Onspawn_orientationChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_spawn_orientation1", DbType:="Real NOT NULL")>  _
	Public Property spawn_orientation1() As Single
		Get
			Return Me._spawn_orientation1
		End Get
		Set
			If ((Me._spawn_orientation1 = value)  _
						= false) Then
				Me.Onspawn_orientation1Changing(value)
				Me.SendPropertyChanging
				Me._spawn_orientation1 = value
				Me.SendPropertyChanged("spawn_orientation1")
				Me.Onspawn_orientation1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spawn_orientation2", DbType:="Real NOT NULL")>  _
	Public Property spawn_orientation2() As Single
		Get
			Return Me._spawn_orientation2
		End Get
		Set
			If ((Me._spawn_orientation2 = value)  _
						= false) Then
				Me.Onspawn_orientation2Changing(value)
				Me.SendPropertyChanging
				Me._spawn_orientation2 = value
				Me.SendPropertyChanged("spawn_orientation2")
				Me.Onspawn_orientation2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spawn_orientation3", DbType:="Real NOT NULL")>  _
	Public Property spawn_orientation3() As Single
		Get
			Return Me._spawn_orientation3
		End Get
		Set
			If ((Me._spawn_orientation3 = value)  _
						= false) Then
				Me.Onspawn_orientation3Changing(value)
				Me.SendPropertyChanging
				Me._spawn_orientation3 = value
				Me.SendPropertyChanged("spawn_orientation3")
				Me.Onspawn_orientation3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spawn_orientation4", DbType:="Real NOT NULL")>  _
	Public Property spawn_orientation4() As Single
		Get
			Return Me._spawn_orientation4
		End Get
		Set
			If ((Me._spawn_orientation4 = value)  _
						= false) Then
				Me.Onspawn_orientation4Changing(value)
				Me.SendPropertyChanging
				Me._spawn_orientation4 = value
				Me.SendPropertyChanged("spawn_orientation4")
				Me.Onspawn_orientation4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spawn_map", DbType:="Int NOT NULL")>  _
	Public Property spawn_map() As Integer
		Get
			Return Me._spawn_map
		End Get
		Set
			If ((Me._spawn_map = value)  _
						= false) Then
				Me.Onspawn_mapChanging(value)
				Me.SendPropertyChanging
				Me._spawn_map = value
				Me.SendPropertyChanged("spawn_map")
				Me.Onspawn_mapChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_spawn_state", DbType:="TinyInt NOT NULL")>  _
	Public Property spawn_state() As Byte
		Get
			Return Me._spawn_state
		End Get
		Set
			If ((Me._spawn_state = value)  _
						= false) Then
				Me.Onspawn_stateChanging(value)
				Me.SendPropertyChanging
				Me._spawn_state = value
				Me.SendPropertyChanged("spawn_state")
				Me.Onspawn_stateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_spawn_flags", DbType:="Int NOT NULL")>  _
	Public Property spawn_flags() As Integer
		Get
			Return Me._spawn_flags
		End Get
		Set
			If ((Me._spawn_flags = value)  _
						= false) Then
				Me.Onspawn_flagsChanging(value)
				Me.SendPropertyChanging
				Me._spawn_flags = value
				Me.SendPropertyChanged("spawn_flags")
				Me.Onspawn_flagsChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_spawn_faction", DbType:="Int NOT NULL")>  _
	Public Property spawn_faction() As Integer
		Get
			Return Me._spawn_faction
		End Get
		Set
			If ((Me._spawn_faction = value)  _
						= false) Then
				Me.Onspawn_factionChanging(value)
				Me.SendPropertyChanging
				Me._spawn_faction = value
				Me.SendPropertyChanged("spawn_faction")
				Me.Onspawn_factionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_spawn_scale", DbType:="Real NOT NULL")>  _
	Public Property spawn_scale() As Single
		Get
			Return Me._spawn_scale
		End Get
		Set
			If ((Me._spawn_scale = value)  _
						= false) Then
				Me.Onspawn_scaleChanging(value)
				Me.SendPropertyChanging
				Me._spawn_scale = value
				Me.SendPropertyChanged("spawn_scale")
				Me.Onspawn_scaleChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.items")>  _
Partial Public Class item
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _entry As Integer
	
	Private _class As Short
	
	Private _subclass As Short
	
	Private _field4 As Short
	
	Private _name1 As String
	
	Private _name2 As String
	
	Private _name3 As String
	
	Private _name4 As String
	
	Private _displayid As Integer
	
	Private _quality As Short
	
	Private _flags As Integer
	
	Private _buycount As Integer
	
	Private _buyprice As Integer
	
	Private _sellprice As Integer
	
	Private _inventorytype As Short
	
	Private _allowableclass As Integer
	
	Private _allowablerace As Integer
	
	Private _itemlevel As Short
	
	Private _requiredlevel As Short
	
	Private _RequiredSkill As Short
	
	Private _RequiredSkillRank As Short
	
	Private _RequiredSkillSubRank As Integer
	
	Private _RequiredPlayerRank1 As Short
	
	Private _RequiredPlayerRank2 As Short
	
	Private _RequiredFaction As Short
	
	Private _RequiredFactionStanding As Short
	
	Private _Unique As Integer
	
	Private _maxcount As Integer
	
	Private _ContainerSlots As Short
	
	Private _stat_type1 As Short
	
	Private _stat_value1 As Short
	
	Private _stat_type2 As Short
	
	Private _stat_value2 As Short
	
	Private _stat_type3 As Short
	
	Private _stat_value3 As Short
	
	Private _stat_type4 As Short
	
	Private _stat_value4 As Short
	
	Private _stat_type5 As Short
	
	Private _stat_value5 As Short
	
	Private _stat_type6 As Short
	
	Private _stat_value6 As Short
	
	Private _stat_type7 As Short
	
	Private _stat_value7 As Short
	
	Private _stat_type8 As Short
	
	Private _stat_value8 As Short
	
	Private _stat_type9 As Short
	
	Private _stat_value9 As Short
	
	Private _stat_type10 As Short
	
	Private _stat_value10 As Short
	
	Private _dmg_min1 As Single
	
	Private _dmg_max1 As Single
	
	Private _dmg_type1 As Short
	
	Private _dmg_min2 As Single
	
	Private _dmg_max2 As Single
	
	Private _dmg_type2 As Short
	
	Private _dmg_min3 As Single
	
	Private _dmg_max3 As Single
	
	Private _dmg_type3 As Short
	
	Private _dmg_min4 As Single
	
	Private _dmg_max4 As Single
	
	Private _dmg_type4 As Short
	
	Private _dmg_min5 As Single
	
	Private _dmg_max5 As Single
	
	Private _dmg_type5 As Short
	
	Private _armor As Short
	
	Private _holy_res As Short
	
	Private _fire_res As Short
	
	Private _nature_res As Short
	
	Private _frost_res As Short
	
	Private _shadow_res As Short
	
	Private _arcane_res As Short
	
	Private _delay As Short
	
	Private _ammo_type As Short
	
	Private _range As Single
	
	Private _spellid_1 As Integer
	
	Private _spelltrigger_1 As Short
	
	Private _spellcharges_1 As Short
	
	Private _spellcooldown_1 As Integer
	
	Private _spellcategory_1 As Short
	
	Private _spellcategorycooldown_1 As Integer
	
	Private _spellid_2 As Integer
	
	Private _spelltrigger_2 As Short
	
	Private _spellcharges_2 As Short
	
	Private _spellcooldown_2 As Integer
	
	Private _spellcategory_2 As Short
	
	Private _spellcategorycooldown_2 As Integer
	
	Private _spellid_3 As Integer
	
	Private _spelltrigger_3 As Short
	
	Private _spellcharges_3 As Short
	
	Private _spellcooldown_3 As Integer
	
	Private _spellcategory_3 As Short
	
	Private _spellcategorycooldown_3 As Integer
	
	Private _spellid_4 As Integer
	
	Private _spelltrigger_4 As Short
	
	Private _spellcharges_4 As Short
	
	Private _spellcooldown_4 As Integer
	
	Private _spellcategory_4 As Short
	
	Private _spellcategorycooldown_4 As Integer
	
	Private _spellid_5 As Integer
	
	Private _spelltrigger_5 As Short
	
	Private _spellcharges_5 As Short
	
	Private _spellcooldown_5 As Integer
	
	Private _spellcategory_5 As Short
	
	Private _spellcategorycooldown_5 As Integer
	
	Private _bonding As Short
	
	Private _description As String
	
	Private _page_id As Short
	
	Private _page_language As Short
	
	Private _page_material As Short
	
	Private _quest_id As Short
	
	Private _lock_id As Short
	
	Private _lock_material As Short
	
	Private _sheathID As Short
	
	Private _randomprop As Short
	
	Private _randomsuffix As Short
	
	Private _block As Short
	
	Private _itemset As Short
	
	Private _MaxDurability As Short
	
	Private _ZoneNameID As Short
	
	Private _mapid As Short
	
	Private _bagfamily As Short
	
	Private _TotemCategory As Integer
	
	Private _socket_color_1 As Short
	
	Private _socket_content_1 As Integer
	
	Private _socket_color_2 As Short
	
	Private _socket_content_2 As Integer
	
	Private _socket_color_3 As Short
	
	Private _socket_content_3 As Integer
	
	Private _socket_bonus As Short
	
	Private _GemProperties As Short
	
	Private _ReqDisenchantSkill As Short
	
	Private _armorDamageModifier As Single
	
	Private _ExistingDuration As Integer
	
	Private _DisenchantID As Integer
	
	Private _FoodType As Byte
	
	Private _minMoneyLoot As Integer
	
	Private _maxMoneyLoot As Integer
	
	Private _ExtraFlags As Byte
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnentryChanging(value As Integer)
    End Sub
    Partial Private Sub OnentryChanged()
    End Sub
    Partial Private Sub OnclassChanging(value As Short)
    End Sub
    Partial Private Sub OnclassChanged()
    End Sub
    Partial Private Sub OnsubclassChanging(value As Short)
    End Sub
    Partial Private Sub OnsubclassChanged()
    End Sub
    Partial Private Sub Onfield4Changing(value As Short)
    End Sub
    Partial Private Sub Onfield4Changed()
    End Sub
    Partial Private Sub Onname1Changing(value As String)
    End Sub
    Partial Private Sub Onname1Changed()
    End Sub
    Partial Private Sub Onname2Changing(value As String)
    End Sub
    Partial Private Sub Onname2Changed()
    End Sub
    Partial Private Sub Onname3Changing(value As String)
    End Sub
    Partial Private Sub Onname3Changed()
    End Sub
    Partial Private Sub Onname4Changing(value As String)
    End Sub
    Partial Private Sub Onname4Changed()
    End Sub
    Partial Private Sub OndisplayidChanging(value As Integer)
    End Sub
    Partial Private Sub OndisplayidChanged()
    End Sub
    Partial Private Sub OnqualityChanging(value As Short)
    End Sub
    Partial Private Sub OnqualityChanged()
    End Sub
    Partial Private Sub OnflagsChanging(value As Integer)
    End Sub
    Partial Private Sub OnflagsChanged()
    End Sub
    Partial Private Sub OnbuycountChanging(value As Integer)
    End Sub
    Partial Private Sub OnbuycountChanged()
    End Sub
    Partial Private Sub OnbuypriceChanging(value As Integer)
    End Sub
    Partial Private Sub OnbuypriceChanged()
    End Sub
    Partial Private Sub OnsellpriceChanging(value As Integer)
    End Sub
    Partial Private Sub OnsellpriceChanged()
    End Sub
    Partial Private Sub OninventorytypeChanging(value As Short)
    End Sub
    Partial Private Sub OninventorytypeChanged()
    End Sub
    Partial Private Sub OnallowableclassChanging(value As Integer)
    End Sub
    Partial Private Sub OnallowableclassChanged()
    End Sub
    Partial Private Sub OnallowableraceChanging(value As Integer)
    End Sub
    Partial Private Sub OnallowableraceChanged()
    End Sub
    Partial Private Sub OnitemlevelChanging(value As Short)
    End Sub
    Partial Private Sub OnitemlevelChanged()
    End Sub
    Partial Private Sub OnrequiredlevelChanging(value As Short)
    End Sub
    Partial Private Sub OnrequiredlevelChanged()
    End Sub
    Partial Private Sub OnRequiredSkillChanging(value As Short)
    End Sub
    Partial Private Sub OnRequiredSkillChanged()
    End Sub
    Partial Private Sub OnRequiredSkillRankChanging(value As Short)
    End Sub
    Partial Private Sub OnRequiredSkillRankChanged()
    End Sub
    Partial Private Sub OnRequiredSkillSubRankChanging(value As Integer)
    End Sub
    Partial Private Sub OnRequiredSkillSubRankChanged()
    End Sub
    Partial Private Sub OnRequiredPlayerRank1Changing(value As Short)
    End Sub
    Partial Private Sub OnRequiredPlayerRank1Changed()
    End Sub
    Partial Private Sub OnRequiredPlayerRank2Changing(value As Short)
    End Sub
    Partial Private Sub OnRequiredPlayerRank2Changed()
    End Sub
    Partial Private Sub OnRequiredFactionChanging(value As Short)
    End Sub
    Partial Private Sub OnRequiredFactionChanged()
    End Sub
    Partial Private Sub OnRequiredFactionStandingChanging(value As Short)
    End Sub
    Partial Private Sub OnRequiredFactionStandingChanged()
    End Sub
    Partial Private Sub OnUniqueChanging(value As Integer)
    End Sub
    Partial Private Sub OnUniqueChanged()
    End Sub
    Partial Private Sub OnmaxcountChanging(value As Integer)
    End Sub
    Partial Private Sub OnmaxcountChanged()
    End Sub
    Partial Private Sub OnContainerSlotsChanging(value As Short)
    End Sub
    Partial Private Sub OnContainerSlotsChanged()
    End Sub
    Partial Private Sub Onstat_type1Changing(value As Short)
    End Sub
    Partial Private Sub Onstat_type1Changed()
    End Sub
    Partial Private Sub Onstat_value1Changing(value As Short)
    End Sub
    Partial Private Sub Onstat_value1Changed()
    End Sub
    Partial Private Sub Onstat_type2Changing(value As Short)
    End Sub
    Partial Private Sub Onstat_type2Changed()
    End Sub
    Partial Private Sub Onstat_value2Changing(value As Short)
    End Sub
    Partial Private Sub Onstat_value2Changed()
    End Sub
    Partial Private Sub Onstat_type3Changing(value As Short)
    End Sub
    Partial Private Sub Onstat_type3Changed()
    End Sub
    Partial Private Sub Onstat_value3Changing(value As Short)
    End Sub
    Partial Private Sub Onstat_value3Changed()
    End Sub
    Partial Private Sub Onstat_type4Changing(value As Short)
    End Sub
    Partial Private Sub Onstat_type4Changed()
    End Sub
    Partial Private Sub Onstat_value4Changing(value As Short)
    End Sub
    Partial Private Sub Onstat_value4Changed()
    End Sub
    Partial Private Sub Onstat_type5Changing(value As Short)
    End Sub
    Partial Private Sub Onstat_type5Changed()
    End Sub
    Partial Private Sub Onstat_value5Changing(value As Short)
    End Sub
    Partial Private Sub Onstat_value5Changed()
    End Sub
    Partial Private Sub Onstat_type6Changing(value As Short)
    End Sub
    Partial Private Sub Onstat_type6Changed()
    End Sub
    Partial Private Sub Onstat_value6Changing(value As Short)
    End Sub
    Partial Private Sub Onstat_value6Changed()
    End Sub
    Partial Private Sub Onstat_type7Changing(value As Short)
    End Sub
    Partial Private Sub Onstat_type7Changed()
    End Sub
    Partial Private Sub Onstat_value7Changing(value As Short)
    End Sub
    Partial Private Sub Onstat_value7Changed()
    End Sub
    Partial Private Sub Onstat_type8Changing(value As Short)
    End Sub
    Partial Private Sub Onstat_type8Changed()
    End Sub
    Partial Private Sub Onstat_value8Changing(value As Short)
    End Sub
    Partial Private Sub Onstat_value8Changed()
    End Sub
    Partial Private Sub Onstat_type9Changing(value As Short)
    End Sub
    Partial Private Sub Onstat_type9Changed()
    End Sub
    Partial Private Sub Onstat_value9Changing(value As Short)
    End Sub
    Partial Private Sub Onstat_value9Changed()
    End Sub
    Partial Private Sub Onstat_type10Changing(value As Short)
    End Sub
    Partial Private Sub Onstat_type10Changed()
    End Sub
    Partial Private Sub Onstat_value10Changing(value As Short)
    End Sub
    Partial Private Sub Onstat_value10Changed()
    End Sub
    Partial Private Sub Ondmg_min1Changing(value As Single)
    End Sub
    Partial Private Sub Ondmg_min1Changed()
    End Sub
    Partial Private Sub Ondmg_max1Changing(value As Single)
    End Sub
    Partial Private Sub Ondmg_max1Changed()
    End Sub
    Partial Private Sub Ondmg_type1Changing(value As Short)
    End Sub
    Partial Private Sub Ondmg_type1Changed()
    End Sub
    Partial Private Sub Ondmg_min2Changing(value As Single)
    End Sub
    Partial Private Sub Ondmg_min2Changed()
    End Sub
    Partial Private Sub Ondmg_max2Changing(value As Single)
    End Sub
    Partial Private Sub Ondmg_max2Changed()
    End Sub
    Partial Private Sub Ondmg_type2Changing(value As Short)
    End Sub
    Partial Private Sub Ondmg_type2Changed()
    End Sub
    Partial Private Sub Ondmg_min3Changing(value As Single)
    End Sub
    Partial Private Sub Ondmg_min3Changed()
    End Sub
    Partial Private Sub Ondmg_max3Changing(value As Single)
    End Sub
    Partial Private Sub Ondmg_max3Changed()
    End Sub
    Partial Private Sub Ondmg_type3Changing(value As Short)
    End Sub
    Partial Private Sub Ondmg_type3Changed()
    End Sub
    Partial Private Sub Ondmg_min4Changing(value As Single)
    End Sub
    Partial Private Sub Ondmg_min4Changed()
    End Sub
    Partial Private Sub Ondmg_max4Changing(value As Single)
    End Sub
    Partial Private Sub Ondmg_max4Changed()
    End Sub
    Partial Private Sub Ondmg_type4Changing(value As Short)
    End Sub
    Partial Private Sub Ondmg_type4Changed()
    End Sub
    Partial Private Sub Ondmg_min5Changing(value As Single)
    End Sub
    Partial Private Sub Ondmg_min5Changed()
    End Sub
    Partial Private Sub Ondmg_max5Changing(value As Single)
    End Sub
    Partial Private Sub Ondmg_max5Changed()
    End Sub
    Partial Private Sub Ondmg_type5Changing(value As Short)
    End Sub
    Partial Private Sub Ondmg_type5Changed()
    End Sub
    Partial Private Sub OnarmorChanging(value As Short)
    End Sub
    Partial Private Sub OnarmorChanged()
    End Sub
    Partial Private Sub Onholy_resChanging(value As Short)
    End Sub
    Partial Private Sub Onholy_resChanged()
    End Sub
    Partial Private Sub Onfire_resChanging(value As Short)
    End Sub
    Partial Private Sub Onfire_resChanged()
    End Sub
    Partial Private Sub Onnature_resChanging(value As Short)
    End Sub
    Partial Private Sub Onnature_resChanged()
    End Sub
    Partial Private Sub Onfrost_resChanging(value As Short)
    End Sub
    Partial Private Sub Onfrost_resChanged()
    End Sub
    Partial Private Sub Onshadow_resChanging(value As Short)
    End Sub
    Partial Private Sub Onshadow_resChanged()
    End Sub
    Partial Private Sub Onarcane_resChanging(value As Short)
    End Sub
    Partial Private Sub Onarcane_resChanged()
    End Sub
    Partial Private Sub OndelayChanging(value As Short)
    End Sub
    Partial Private Sub OndelayChanged()
    End Sub
    Partial Private Sub Onammo_typeChanging(value As Short)
    End Sub
    Partial Private Sub Onammo_typeChanged()
    End Sub
    Partial Private Sub OnrangeChanging(value As Single)
    End Sub
    Partial Private Sub OnrangeChanged()
    End Sub
    Partial Private Sub Onspellid_1Changing(value As Integer)
    End Sub
    Partial Private Sub Onspellid_1Changed()
    End Sub
    Partial Private Sub Onspelltrigger_1Changing(value As Short)
    End Sub
    Partial Private Sub Onspelltrigger_1Changed()
    End Sub
    Partial Private Sub Onspellcharges_1Changing(value As Short)
    End Sub
    Partial Private Sub Onspellcharges_1Changed()
    End Sub
    Partial Private Sub Onspellcooldown_1Changing(value As Integer)
    End Sub
    Partial Private Sub Onspellcooldown_1Changed()
    End Sub
    Partial Private Sub Onspellcategory_1Changing(value As Short)
    End Sub
    Partial Private Sub Onspellcategory_1Changed()
    End Sub
    Partial Private Sub Onspellcategorycooldown_1Changing(value As Integer)
    End Sub
    Partial Private Sub Onspellcategorycooldown_1Changed()
    End Sub
    Partial Private Sub Onspellid_2Changing(value As Integer)
    End Sub
    Partial Private Sub Onspellid_2Changed()
    End Sub
    Partial Private Sub Onspelltrigger_2Changing(value As Short)
    End Sub
    Partial Private Sub Onspelltrigger_2Changed()
    End Sub
    Partial Private Sub Onspellcharges_2Changing(value As Short)
    End Sub
    Partial Private Sub Onspellcharges_2Changed()
    End Sub
    Partial Private Sub Onspellcooldown_2Changing(value As Integer)
    End Sub
    Partial Private Sub Onspellcooldown_2Changed()
    End Sub
    Partial Private Sub Onspellcategory_2Changing(value As Short)
    End Sub
    Partial Private Sub Onspellcategory_2Changed()
    End Sub
    Partial Private Sub Onspellcategorycooldown_2Changing(value As Integer)
    End Sub
    Partial Private Sub Onspellcategorycooldown_2Changed()
    End Sub
    Partial Private Sub Onspellid_3Changing(value As Integer)
    End Sub
    Partial Private Sub Onspellid_3Changed()
    End Sub
    Partial Private Sub Onspelltrigger_3Changing(value As Short)
    End Sub
    Partial Private Sub Onspelltrigger_3Changed()
    End Sub
    Partial Private Sub Onspellcharges_3Changing(value As Short)
    End Sub
    Partial Private Sub Onspellcharges_3Changed()
    End Sub
    Partial Private Sub Onspellcooldown_3Changing(value As Integer)
    End Sub
    Partial Private Sub Onspellcooldown_3Changed()
    End Sub
    Partial Private Sub Onspellcategory_3Changing(value As Short)
    End Sub
    Partial Private Sub Onspellcategory_3Changed()
    End Sub
    Partial Private Sub Onspellcategorycooldown_3Changing(value As Integer)
    End Sub
    Partial Private Sub Onspellcategorycooldown_3Changed()
    End Sub
    Partial Private Sub Onspellid_4Changing(value As Integer)
    End Sub
    Partial Private Sub Onspellid_4Changed()
    End Sub
    Partial Private Sub Onspelltrigger_4Changing(value As Short)
    End Sub
    Partial Private Sub Onspelltrigger_4Changed()
    End Sub
    Partial Private Sub Onspellcharges_4Changing(value As Short)
    End Sub
    Partial Private Sub Onspellcharges_4Changed()
    End Sub
    Partial Private Sub Onspellcooldown_4Changing(value As Integer)
    End Sub
    Partial Private Sub Onspellcooldown_4Changed()
    End Sub
    Partial Private Sub Onspellcategory_4Changing(value As Short)
    End Sub
    Partial Private Sub Onspellcategory_4Changed()
    End Sub
    Partial Private Sub Onspellcategorycooldown_4Changing(value As Integer)
    End Sub
    Partial Private Sub Onspellcategorycooldown_4Changed()
    End Sub
    Partial Private Sub Onspellid_5Changing(value As Integer)
    End Sub
    Partial Private Sub Onspellid_5Changed()
    End Sub
    Partial Private Sub Onspelltrigger_5Changing(value As Short)
    End Sub
    Partial Private Sub Onspelltrigger_5Changed()
    End Sub
    Partial Private Sub Onspellcharges_5Changing(value As Short)
    End Sub
    Partial Private Sub Onspellcharges_5Changed()
    End Sub
    Partial Private Sub Onspellcooldown_5Changing(value As Integer)
    End Sub
    Partial Private Sub Onspellcooldown_5Changed()
    End Sub
    Partial Private Sub Onspellcategory_5Changing(value As Short)
    End Sub
    Partial Private Sub Onspellcategory_5Changed()
    End Sub
    Partial Private Sub Onspellcategorycooldown_5Changing(value As Integer)
    End Sub
    Partial Private Sub Onspellcategorycooldown_5Changed()
    End Sub
    Partial Private Sub OnbondingChanging(value As Short)
    End Sub
    Partial Private Sub OnbondingChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    Partial Private Sub Onpage_idChanging(value As Short)
    End Sub
    Partial Private Sub Onpage_idChanged()
    End Sub
    Partial Private Sub Onpage_languageChanging(value As Short)
    End Sub
    Partial Private Sub Onpage_languageChanged()
    End Sub
    Partial Private Sub Onpage_materialChanging(value As Short)
    End Sub
    Partial Private Sub Onpage_materialChanged()
    End Sub
    Partial Private Sub Onquest_idChanging(value As Short)
    End Sub
    Partial Private Sub Onquest_idChanged()
    End Sub
    Partial Private Sub Onlock_idChanging(value As Short)
    End Sub
    Partial Private Sub Onlock_idChanged()
    End Sub
    Partial Private Sub Onlock_materialChanging(value As Short)
    End Sub
    Partial Private Sub Onlock_materialChanged()
    End Sub
    Partial Private Sub OnsheathIDChanging(value As Short)
    End Sub
    Partial Private Sub OnsheathIDChanged()
    End Sub
    Partial Private Sub OnrandompropChanging(value As Short)
    End Sub
    Partial Private Sub OnrandompropChanged()
    End Sub
    Partial Private Sub OnrandomsuffixChanging(value As Short)
    End Sub
    Partial Private Sub OnrandomsuffixChanged()
    End Sub
    Partial Private Sub OnblockChanging(value As Short)
    End Sub
    Partial Private Sub OnblockChanged()
    End Sub
    Partial Private Sub OnitemsetChanging(value As Short)
    End Sub
    Partial Private Sub OnitemsetChanged()
    End Sub
    Partial Private Sub OnMaxDurabilityChanging(value As Short)
    End Sub
    Partial Private Sub OnMaxDurabilityChanged()
    End Sub
    Partial Private Sub OnZoneNameIDChanging(value As Short)
    End Sub
    Partial Private Sub OnZoneNameIDChanged()
    End Sub
    Partial Private Sub OnmapidChanging(value As Short)
    End Sub
    Partial Private Sub OnmapidChanged()
    End Sub
    Partial Private Sub OnbagfamilyChanging(value As Short)
    End Sub
    Partial Private Sub OnbagfamilyChanged()
    End Sub
    Partial Private Sub OnTotemCategoryChanging(value As Integer)
    End Sub
    Partial Private Sub OnTotemCategoryChanged()
    End Sub
    Partial Private Sub Onsocket_color_1Changing(value As Short)
    End Sub
    Partial Private Sub Onsocket_color_1Changed()
    End Sub
    Partial Private Sub Onsocket_content_1Changing(value As Integer)
    End Sub
    Partial Private Sub Onsocket_content_1Changed()
    End Sub
    Partial Private Sub Onsocket_color_2Changing(value As Short)
    End Sub
    Partial Private Sub Onsocket_color_2Changed()
    End Sub
    Partial Private Sub Onsocket_content_2Changing(value As Integer)
    End Sub
    Partial Private Sub Onsocket_content_2Changed()
    End Sub
    Partial Private Sub Onsocket_color_3Changing(value As Short)
    End Sub
    Partial Private Sub Onsocket_color_3Changed()
    End Sub
    Partial Private Sub Onsocket_content_3Changing(value As Integer)
    End Sub
    Partial Private Sub Onsocket_content_3Changed()
    End Sub
    Partial Private Sub Onsocket_bonusChanging(value As Short)
    End Sub
    Partial Private Sub Onsocket_bonusChanged()
    End Sub
    Partial Private Sub OnGemPropertiesChanging(value As Short)
    End Sub
    Partial Private Sub OnGemPropertiesChanged()
    End Sub
    Partial Private Sub OnReqDisenchantSkillChanging(value As Short)
    End Sub
    Partial Private Sub OnReqDisenchantSkillChanged()
    End Sub
    Partial Private Sub OnarmorDamageModifierChanging(value As Single)
    End Sub
    Partial Private Sub OnarmorDamageModifierChanged()
    End Sub
    Partial Private Sub OnExistingDurationChanging(value As Integer)
    End Sub
    Partial Private Sub OnExistingDurationChanged()
    End Sub
    Partial Private Sub OnDisenchantIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDisenchantIDChanged()
    End Sub
    Partial Private Sub OnFoodTypeChanging(value As Byte)
    End Sub
    Partial Private Sub OnFoodTypeChanged()
    End Sub
    Partial Private Sub OnminMoneyLootChanging(value As Integer)
    End Sub
    Partial Private Sub OnminMoneyLootChanged()
    End Sub
    Partial Private Sub OnmaxMoneyLootChanging(value As Integer)
    End Sub
    Partial Private Sub OnmaxMoneyLootChanged()
    End Sub
    Partial Private Sub OnExtraFlagsChanging(value As Byte)
    End Sub
    Partial Private Sub OnExtraFlagsChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_entry", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property entry() As Integer
		Get
			Return Me._entry
		End Get
		Set
			If ((Me._entry = value)  _
						= false) Then
				Me.OnentryChanging(value)
				Me.SendPropertyChanging
				Me._entry = value
				Me.SendPropertyChanged("entry")
				Me.OnentryChanged
			End If
		End Set
	End Property
	
	<Column(Name:="class", Storage:="_class", DbType:="SmallInt NOT NULL")>  _
	Public Property [class]() As Short
		Get
			Return Me._class
		End Get
		Set
			If ((Me._class = value)  _
						= false) Then
				Me.OnclassChanging(value)
				Me.SendPropertyChanging
				Me._class = value
				Me.SendPropertyChanged("[class]")
				Me.OnclassChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_subclass", DbType:="SmallInt NOT NULL")>  _
	Public Property subclass() As Short
		Get
			Return Me._subclass
		End Get
		Set
			If ((Me._subclass = value)  _
						= false) Then
				Me.OnsubclassChanging(value)
				Me.SendPropertyChanging
				Me._subclass = value
				Me.SendPropertyChanged("subclass")
				Me.OnsubclassChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_field4", DbType:="SmallInt NOT NULL")>  _
	Public Property field4() As Short
		Get
			Return Me._field4
		End Get
		Set
			If ((Me._field4 = value)  _
						= false) Then
				Me.Onfield4Changing(value)
				Me.SendPropertyChanging
				Me._field4 = value
				Me.SendPropertyChanged("field4")
				Me.Onfield4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_name1", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property name1() As String
		Get
			Return Me._name1
		End Get
		Set
			If (String.Equals(Me._name1, value) = false) Then
				Me.Onname1Changing(value)
				Me.SendPropertyChanging
				Me._name1 = value
				Me.SendPropertyChanged("name1")
				Me.Onname1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_name2", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property name2() As String
		Get
			Return Me._name2
		End Get
		Set
			If (String.Equals(Me._name2, value) = false) Then
				Me.Onname2Changing(value)
				Me.SendPropertyChanging
				Me._name2 = value
				Me.SendPropertyChanged("name2")
				Me.Onname2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_name3", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property name3() As String
		Get
			Return Me._name3
		End Get
		Set
			If (String.Equals(Me._name3, value) = false) Then
				Me.Onname3Changing(value)
				Me.SendPropertyChanging
				Me._name3 = value
				Me.SendPropertyChanged("name3")
				Me.Onname3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_name4", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property name4() As String
		Get
			Return Me._name4
		End Get
		Set
			If (String.Equals(Me._name4, value) = false) Then
				Me.Onname4Changing(value)
				Me.SendPropertyChanging
				Me._name4 = value
				Me.SendPropertyChanged("name4")
				Me.Onname4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_displayid", DbType:="Int NOT NULL")>  _
	Public Property displayid() As Integer
		Get
			Return Me._displayid
		End Get
		Set
			If ((Me._displayid = value)  _
						= false) Then
				Me.OndisplayidChanging(value)
				Me.SendPropertyChanging
				Me._displayid = value
				Me.SendPropertyChanged("displayid")
				Me.OndisplayidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_quality", DbType:="SmallInt NOT NULL")>  _
	Public Property quality() As Short
		Get
			Return Me._quality
		End Get
		Set
			If ((Me._quality = value)  _
						= false) Then
				Me.OnqualityChanging(value)
				Me.SendPropertyChanging
				Me._quality = value
				Me.SendPropertyChanged("quality")
				Me.OnqualityChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_flags", DbType:="Int NOT NULL")>  _
	Public Property flags() As Integer
		Get
			Return Me._flags
		End Get
		Set
			If ((Me._flags = value)  _
						= false) Then
				Me.OnflagsChanging(value)
				Me.SendPropertyChanging
				Me._flags = value
				Me.SendPropertyChanged("flags")
				Me.OnflagsChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_buycount", DbType:="Int NOT NULL")>  _
	Public Property buycount() As Integer
		Get
			Return Me._buycount
		End Get
		Set
			If ((Me._buycount = value)  _
						= false) Then
				Me.OnbuycountChanging(value)
				Me.SendPropertyChanging
				Me._buycount = value
				Me.SendPropertyChanged("buycount")
				Me.OnbuycountChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_buyprice", DbType:="Int NOT NULL")>  _
	Public Property buyprice() As Integer
		Get
			Return Me._buyprice
		End Get
		Set
			If ((Me._buyprice = value)  _
						= false) Then
				Me.OnbuypriceChanging(value)
				Me.SendPropertyChanging
				Me._buyprice = value
				Me.SendPropertyChanged("buyprice")
				Me.OnbuypriceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_sellprice", DbType:="Int NOT NULL")>  _
	Public Property sellprice() As Integer
		Get
			Return Me._sellprice
		End Get
		Set
			If ((Me._sellprice = value)  _
						= false) Then
				Me.OnsellpriceChanging(value)
				Me.SendPropertyChanging
				Me._sellprice = value
				Me.SendPropertyChanged("sellprice")
				Me.OnsellpriceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_inventorytype", DbType:="SmallInt NOT NULL")>  _
	Public Property inventorytype() As Short
		Get
			Return Me._inventorytype
		End Get
		Set
			If ((Me._inventorytype = value)  _
						= false) Then
				Me.OninventorytypeChanging(value)
				Me.SendPropertyChanging
				Me._inventorytype = value
				Me.SendPropertyChanged("inventorytype")
				Me.OninventorytypeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_allowableclass", DbType:="Int NOT NULL")>  _
	Public Property allowableclass() As Integer
		Get
			Return Me._allowableclass
		End Get
		Set
			If ((Me._allowableclass = value)  _
						= false) Then
				Me.OnallowableclassChanging(value)
				Me.SendPropertyChanging
				Me._allowableclass = value
				Me.SendPropertyChanged("allowableclass")
				Me.OnallowableclassChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_allowablerace", DbType:="Int NOT NULL")>  _
	Public Property allowablerace() As Integer
		Get
			Return Me._allowablerace
		End Get
		Set
			If ((Me._allowablerace = value)  _
						= false) Then
				Me.OnallowableraceChanging(value)
				Me.SendPropertyChanging
				Me._allowablerace = value
				Me.SendPropertyChanged("allowablerace")
				Me.OnallowableraceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_itemlevel", DbType:="SmallInt NOT NULL")>  _
	Public Property itemlevel() As Short
		Get
			Return Me._itemlevel
		End Get
		Set
			If ((Me._itemlevel = value)  _
						= false) Then
				Me.OnitemlevelChanging(value)
				Me.SendPropertyChanging
				Me._itemlevel = value
				Me.SendPropertyChanged("itemlevel")
				Me.OnitemlevelChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_requiredlevel", DbType:="SmallInt NOT NULL")>  _
	Public Property requiredlevel() As Short
		Get
			Return Me._requiredlevel
		End Get
		Set
			If ((Me._requiredlevel = value)  _
						= false) Then
				Me.OnrequiredlevelChanging(value)
				Me.SendPropertyChanging
				Me._requiredlevel = value
				Me.SendPropertyChanged("requiredlevel")
				Me.OnrequiredlevelChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RequiredSkill", DbType:="SmallInt NOT NULL")>  _
	Public Property RequiredSkill() As Short
		Get
			Return Me._RequiredSkill
		End Get
		Set
			If ((Me._RequiredSkill = value)  _
						= false) Then
				Me.OnRequiredSkillChanging(value)
				Me.SendPropertyChanging
				Me._RequiredSkill = value
				Me.SendPropertyChanged("RequiredSkill")
				Me.OnRequiredSkillChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RequiredSkillRank", DbType:="SmallInt NOT NULL")>  _
	Public Property RequiredSkillRank() As Short
		Get
			Return Me._RequiredSkillRank
		End Get
		Set
			If ((Me._RequiredSkillRank = value)  _
						= false) Then
				Me.OnRequiredSkillRankChanging(value)
				Me.SendPropertyChanging
				Me._RequiredSkillRank = value
				Me.SendPropertyChanged("RequiredSkillRank")
				Me.OnRequiredSkillRankChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RequiredSkillSubRank", DbType:="Int NOT NULL")>  _
	Public Property RequiredSkillSubRank() As Integer
		Get
			Return Me._RequiredSkillSubRank
		End Get
		Set
			If ((Me._RequiredSkillSubRank = value)  _
						= false) Then
				Me.OnRequiredSkillSubRankChanging(value)
				Me.SendPropertyChanging
				Me._RequiredSkillSubRank = value
				Me.SendPropertyChanged("RequiredSkillSubRank")
				Me.OnRequiredSkillSubRankChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RequiredPlayerRank1", DbType:="SmallInt NOT NULL")>  _
	Public Property RequiredPlayerRank1() As Short
		Get
			Return Me._RequiredPlayerRank1
		End Get
		Set
			If ((Me._RequiredPlayerRank1 = value)  _
						= false) Then
				Me.OnRequiredPlayerRank1Changing(value)
				Me.SendPropertyChanging
				Me._RequiredPlayerRank1 = value
				Me.SendPropertyChanged("RequiredPlayerRank1")
				Me.OnRequiredPlayerRank1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_RequiredPlayerRank2", DbType:="SmallInt NOT NULL")>  _
	Public Property RequiredPlayerRank2() As Short
		Get
			Return Me._RequiredPlayerRank2
		End Get
		Set
			If ((Me._RequiredPlayerRank2 = value)  _
						= false) Then
				Me.OnRequiredPlayerRank2Changing(value)
				Me.SendPropertyChanging
				Me._RequiredPlayerRank2 = value
				Me.SendPropertyChanged("RequiredPlayerRank2")
				Me.OnRequiredPlayerRank2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_RequiredFaction", DbType:="SmallInt NOT NULL")>  _
	Public Property RequiredFaction() As Short
		Get
			Return Me._RequiredFaction
		End Get
		Set
			If ((Me._RequiredFaction = value)  _
						= false) Then
				Me.OnRequiredFactionChanging(value)
				Me.SendPropertyChanging
				Me._RequiredFaction = value
				Me.SendPropertyChanged("RequiredFaction")
				Me.OnRequiredFactionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RequiredFactionStanding", DbType:="SmallInt NOT NULL")>  _
	Public Property RequiredFactionStanding() As Short
		Get
			Return Me._RequiredFactionStanding
		End Get
		Set
			If ((Me._RequiredFactionStanding = value)  _
						= false) Then
				Me.OnRequiredFactionStandingChanging(value)
				Me.SendPropertyChanging
				Me._RequiredFactionStanding = value
				Me.SendPropertyChanged("RequiredFactionStanding")
				Me.OnRequiredFactionStandingChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[Unique]", Storage:="_Unique", DbType:="Int NOT NULL")>  _
	Public Property Unique() As Integer
		Get
			Return Me._Unique
		End Get
		Set
			If ((Me._Unique = value)  _
						= false) Then
				Me.OnUniqueChanging(value)
				Me.SendPropertyChanging
				Me._Unique = value
				Me.SendPropertyChanged("Unique")
				Me.OnUniqueChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_maxcount", DbType:="Int NOT NULL")>  _
	Public Property maxcount() As Integer
		Get
			Return Me._maxcount
		End Get
		Set
			If ((Me._maxcount = value)  _
						= false) Then
				Me.OnmaxcountChanging(value)
				Me.SendPropertyChanging
				Me._maxcount = value
				Me.SendPropertyChanged("maxcount")
				Me.OnmaxcountChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ContainerSlots", DbType:="SmallInt NOT NULL")>  _
	Public Property ContainerSlots() As Short
		Get
			Return Me._ContainerSlots
		End Get
		Set
			If ((Me._ContainerSlots = value)  _
						= false) Then
				Me.OnContainerSlotsChanging(value)
				Me.SendPropertyChanging
				Me._ContainerSlots = value
				Me.SendPropertyChanged("ContainerSlots")
				Me.OnContainerSlotsChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_stat_type1", DbType:="SmallInt NOT NULL")>  _
	Public Property stat_type1() As Short
		Get
			Return Me._stat_type1
		End Get
		Set
			If ((Me._stat_type1 = value)  _
						= false) Then
				Me.Onstat_type1Changing(value)
				Me.SendPropertyChanging
				Me._stat_type1 = value
				Me.SendPropertyChanged("stat_type1")
				Me.Onstat_type1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_stat_value1", DbType:="SmallInt NOT NULL")>  _
	Public Property stat_value1() As Short
		Get
			Return Me._stat_value1
		End Get
		Set
			If ((Me._stat_value1 = value)  _
						= false) Then
				Me.Onstat_value1Changing(value)
				Me.SendPropertyChanging
				Me._stat_value1 = value
				Me.SendPropertyChanged("stat_value1")
				Me.Onstat_value1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_stat_type2", DbType:="SmallInt NOT NULL")>  _
	Public Property stat_type2() As Short
		Get
			Return Me._stat_type2
		End Get
		Set
			If ((Me._stat_type2 = value)  _
						= false) Then
				Me.Onstat_type2Changing(value)
				Me.SendPropertyChanging
				Me._stat_type2 = value
				Me.SendPropertyChanged("stat_type2")
				Me.Onstat_type2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_stat_value2", DbType:="SmallInt NOT NULL")>  _
	Public Property stat_value2() As Short
		Get
			Return Me._stat_value2
		End Get
		Set
			If ((Me._stat_value2 = value)  _
						= false) Then
				Me.Onstat_value2Changing(value)
				Me.SendPropertyChanging
				Me._stat_value2 = value
				Me.SendPropertyChanged("stat_value2")
				Me.Onstat_value2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_stat_type3", DbType:="SmallInt NOT NULL")>  _
	Public Property stat_type3() As Short
		Get
			Return Me._stat_type3
		End Get
		Set
			If ((Me._stat_type3 = value)  _
						= false) Then
				Me.Onstat_type3Changing(value)
				Me.SendPropertyChanging
				Me._stat_type3 = value
				Me.SendPropertyChanged("stat_type3")
				Me.Onstat_type3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_stat_value3", DbType:="SmallInt NOT NULL")>  _
	Public Property stat_value3() As Short
		Get
			Return Me._stat_value3
		End Get
		Set
			If ((Me._stat_value3 = value)  _
						= false) Then
				Me.Onstat_value3Changing(value)
				Me.SendPropertyChanging
				Me._stat_value3 = value
				Me.SendPropertyChanged("stat_value3")
				Me.Onstat_value3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_stat_type4", DbType:="SmallInt NOT NULL")>  _
	Public Property stat_type4() As Short
		Get
			Return Me._stat_type4
		End Get
		Set
			If ((Me._stat_type4 = value)  _
						= false) Then
				Me.Onstat_type4Changing(value)
				Me.SendPropertyChanging
				Me._stat_type4 = value
				Me.SendPropertyChanged("stat_type4")
				Me.Onstat_type4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_stat_value4", DbType:="SmallInt NOT NULL")>  _
	Public Property stat_value4() As Short
		Get
			Return Me._stat_value4
		End Get
		Set
			If ((Me._stat_value4 = value)  _
						= false) Then
				Me.Onstat_value4Changing(value)
				Me.SendPropertyChanging
				Me._stat_value4 = value
				Me.SendPropertyChanged("stat_value4")
				Me.Onstat_value4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_stat_type5", DbType:="SmallInt NOT NULL")>  _
	Public Property stat_type5() As Short
		Get
			Return Me._stat_type5
		End Get
		Set
			If ((Me._stat_type5 = value)  _
						= false) Then
				Me.Onstat_type5Changing(value)
				Me.SendPropertyChanging
				Me._stat_type5 = value
				Me.SendPropertyChanged("stat_type5")
				Me.Onstat_type5Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_stat_value5", DbType:="SmallInt NOT NULL")>  _
	Public Property stat_value5() As Short
		Get
			Return Me._stat_value5
		End Get
		Set
			If ((Me._stat_value5 = value)  _
						= false) Then
				Me.Onstat_value5Changing(value)
				Me.SendPropertyChanging
				Me._stat_value5 = value
				Me.SendPropertyChanged("stat_value5")
				Me.Onstat_value5Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_stat_type6", DbType:="SmallInt NOT NULL")>  _
	Public Property stat_type6() As Short
		Get
			Return Me._stat_type6
		End Get
		Set
			If ((Me._stat_type6 = value)  _
						= false) Then
				Me.Onstat_type6Changing(value)
				Me.SendPropertyChanging
				Me._stat_type6 = value
				Me.SendPropertyChanged("stat_type6")
				Me.Onstat_type6Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_stat_value6", DbType:="SmallInt NOT NULL")>  _
	Public Property stat_value6() As Short
		Get
			Return Me._stat_value6
		End Get
		Set
			If ((Me._stat_value6 = value)  _
						= false) Then
				Me.Onstat_value6Changing(value)
				Me.SendPropertyChanging
				Me._stat_value6 = value
				Me.SendPropertyChanged("stat_value6")
				Me.Onstat_value6Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_stat_type7", DbType:="SmallInt NOT NULL")>  _
	Public Property stat_type7() As Short
		Get
			Return Me._stat_type7
		End Get
		Set
			If ((Me._stat_type7 = value)  _
						= false) Then
				Me.Onstat_type7Changing(value)
				Me.SendPropertyChanging
				Me._stat_type7 = value
				Me.SendPropertyChanged("stat_type7")
				Me.Onstat_type7Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_stat_value7", DbType:="SmallInt NOT NULL")>  _
	Public Property stat_value7() As Short
		Get
			Return Me._stat_value7
		End Get
		Set
			If ((Me._stat_value7 = value)  _
						= false) Then
				Me.Onstat_value7Changing(value)
				Me.SendPropertyChanging
				Me._stat_value7 = value
				Me.SendPropertyChanged("stat_value7")
				Me.Onstat_value7Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_stat_type8", DbType:="SmallInt NOT NULL")>  _
	Public Property stat_type8() As Short
		Get
			Return Me._stat_type8
		End Get
		Set
			If ((Me._stat_type8 = value)  _
						= false) Then
				Me.Onstat_type8Changing(value)
				Me.SendPropertyChanging
				Me._stat_type8 = value
				Me.SendPropertyChanged("stat_type8")
				Me.Onstat_type8Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_stat_value8", DbType:="SmallInt NOT NULL")>  _
	Public Property stat_value8() As Short
		Get
			Return Me._stat_value8
		End Get
		Set
			If ((Me._stat_value8 = value)  _
						= false) Then
				Me.Onstat_value8Changing(value)
				Me.SendPropertyChanging
				Me._stat_value8 = value
				Me.SendPropertyChanged("stat_value8")
				Me.Onstat_value8Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_stat_type9", DbType:="SmallInt NOT NULL")>  _
	Public Property stat_type9() As Short
		Get
			Return Me._stat_type9
		End Get
		Set
			If ((Me._stat_type9 = value)  _
						= false) Then
				Me.Onstat_type9Changing(value)
				Me.SendPropertyChanging
				Me._stat_type9 = value
				Me.SendPropertyChanged("stat_type9")
				Me.Onstat_type9Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_stat_value9", DbType:="SmallInt NOT NULL")>  _
	Public Property stat_value9() As Short
		Get
			Return Me._stat_value9
		End Get
		Set
			If ((Me._stat_value9 = value)  _
						= false) Then
				Me.Onstat_value9Changing(value)
				Me.SendPropertyChanging
				Me._stat_value9 = value
				Me.SendPropertyChanged("stat_value9")
				Me.Onstat_value9Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_stat_type10", DbType:="SmallInt NOT NULL")>  _
	Public Property stat_type10() As Short
		Get
			Return Me._stat_type10
		End Get
		Set
			If ((Me._stat_type10 = value)  _
						= false) Then
				Me.Onstat_type10Changing(value)
				Me.SendPropertyChanging
				Me._stat_type10 = value
				Me.SendPropertyChanged("stat_type10")
				Me.Onstat_type10Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_stat_value10", DbType:="SmallInt NOT NULL")>  _
	Public Property stat_value10() As Short
		Get
			Return Me._stat_value10
		End Get
		Set
			If ((Me._stat_value10 = value)  _
						= false) Then
				Me.Onstat_value10Changing(value)
				Me.SendPropertyChanging
				Me._stat_value10 = value
				Me.SendPropertyChanged("stat_value10")
				Me.Onstat_value10Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_dmg_min1", DbType:="Real NOT NULL")>  _
	Public Property dmg_min1() As Single
		Get
			Return Me._dmg_min1
		End Get
		Set
			If ((Me._dmg_min1 = value)  _
						= false) Then
				Me.Ondmg_min1Changing(value)
				Me.SendPropertyChanging
				Me._dmg_min1 = value
				Me.SendPropertyChanged("dmg_min1")
				Me.Ondmg_min1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_dmg_max1", DbType:="Real NOT NULL")>  _
	Public Property dmg_max1() As Single
		Get
			Return Me._dmg_max1
		End Get
		Set
			If ((Me._dmg_max1 = value)  _
						= false) Then
				Me.Ondmg_max1Changing(value)
				Me.SendPropertyChanging
				Me._dmg_max1 = value
				Me.SendPropertyChanged("dmg_max1")
				Me.Ondmg_max1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_dmg_type1", DbType:="SmallInt NOT NULL")>  _
	Public Property dmg_type1() As Short
		Get
			Return Me._dmg_type1
		End Get
		Set
			If ((Me._dmg_type1 = value)  _
						= false) Then
				Me.Ondmg_type1Changing(value)
				Me.SendPropertyChanging
				Me._dmg_type1 = value
				Me.SendPropertyChanged("dmg_type1")
				Me.Ondmg_type1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_dmg_min2", DbType:="Real NOT NULL")>  _
	Public Property dmg_min2() As Single
		Get
			Return Me._dmg_min2
		End Get
		Set
			If ((Me._dmg_min2 = value)  _
						= false) Then
				Me.Ondmg_min2Changing(value)
				Me.SendPropertyChanging
				Me._dmg_min2 = value
				Me.SendPropertyChanged("dmg_min2")
				Me.Ondmg_min2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_dmg_max2", DbType:="Real NOT NULL")>  _
	Public Property dmg_max2() As Single
		Get
			Return Me._dmg_max2
		End Get
		Set
			If ((Me._dmg_max2 = value)  _
						= false) Then
				Me.Ondmg_max2Changing(value)
				Me.SendPropertyChanging
				Me._dmg_max2 = value
				Me.SendPropertyChanged("dmg_max2")
				Me.Ondmg_max2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_dmg_type2", DbType:="SmallInt NOT NULL")>  _
	Public Property dmg_type2() As Short
		Get
			Return Me._dmg_type2
		End Get
		Set
			If ((Me._dmg_type2 = value)  _
						= false) Then
				Me.Ondmg_type2Changing(value)
				Me.SendPropertyChanging
				Me._dmg_type2 = value
				Me.SendPropertyChanged("dmg_type2")
				Me.Ondmg_type2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_dmg_min3", DbType:="Real NOT NULL")>  _
	Public Property dmg_min3() As Single
		Get
			Return Me._dmg_min3
		End Get
		Set
			If ((Me._dmg_min3 = value)  _
						= false) Then
				Me.Ondmg_min3Changing(value)
				Me.SendPropertyChanging
				Me._dmg_min3 = value
				Me.SendPropertyChanged("dmg_min3")
				Me.Ondmg_min3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_dmg_max3", DbType:="Real NOT NULL")>  _
	Public Property dmg_max3() As Single
		Get
			Return Me._dmg_max3
		End Get
		Set
			If ((Me._dmg_max3 = value)  _
						= false) Then
				Me.Ondmg_max3Changing(value)
				Me.SendPropertyChanging
				Me._dmg_max3 = value
				Me.SendPropertyChanged("dmg_max3")
				Me.Ondmg_max3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_dmg_type3", DbType:="SmallInt NOT NULL")>  _
	Public Property dmg_type3() As Short
		Get
			Return Me._dmg_type3
		End Get
		Set
			If ((Me._dmg_type3 = value)  _
						= false) Then
				Me.Ondmg_type3Changing(value)
				Me.SendPropertyChanging
				Me._dmg_type3 = value
				Me.SendPropertyChanged("dmg_type3")
				Me.Ondmg_type3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_dmg_min4", DbType:="Real NOT NULL")>  _
	Public Property dmg_min4() As Single
		Get
			Return Me._dmg_min4
		End Get
		Set
			If ((Me._dmg_min4 = value)  _
						= false) Then
				Me.Ondmg_min4Changing(value)
				Me.SendPropertyChanging
				Me._dmg_min4 = value
				Me.SendPropertyChanged("dmg_min4")
				Me.Ondmg_min4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_dmg_max4", DbType:="Real NOT NULL")>  _
	Public Property dmg_max4() As Single
		Get
			Return Me._dmg_max4
		End Get
		Set
			If ((Me._dmg_max4 = value)  _
						= false) Then
				Me.Ondmg_max4Changing(value)
				Me.SendPropertyChanging
				Me._dmg_max4 = value
				Me.SendPropertyChanged("dmg_max4")
				Me.Ondmg_max4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_dmg_type4", DbType:="SmallInt NOT NULL")>  _
	Public Property dmg_type4() As Short
		Get
			Return Me._dmg_type4
		End Get
		Set
			If ((Me._dmg_type4 = value)  _
						= false) Then
				Me.Ondmg_type4Changing(value)
				Me.SendPropertyChanging
				Me._dmg_type4 = value
				Me.SendPropertyChanged("dmg_type4")
				Me.Ondmg_type4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_dmg_min5", DbType:="Real NOT NULL")>  _
	Public Property dmg_min5() As Single
		Get
			Return Me._dmg_min5
		End Get
		Set
			If ((Me._dmg_min5 = value)  _
						= false) Then
				Me.Ondmg_min5Changing(value)
				Me.SendPropertyChanging
				Me._dmg_min5 = value
				Me.SendPropertyChanged("dmg_min5")
				Me.Ondmg_min5Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_dmg_max5", DbType:="Real NOT NULL")>  _
	Public Property dmg_max5() As Single
		Get
			Return Me._dmg_max5
		End Get
		Set
			If ((Me._dmg_max5 = value)  _
						= false) Then
				Me.Ondmg_max5Changing(value)
				Me.SendPropertyChanging
				Me._dmg_max5 = value
				Me.SendPropertyChanged("dmg_max5")
				Me.Ondmg_max5Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_dmg_type5", DbType:="SmallInt NOT NULL")>  _
	Public Property dmg_type5() As Short
		Get
			Return Me._dmg_type5
		End Get
		Set
			If ((Me._dmg_type5 = value)  _
						= false) Then
				Me.Ondmg_type5Changing(value)
				Me.SendPropertyChanging
				Me._dmg_type5 = value
				Me.SendPropertyChanged("dmg_type5")
				Me.Ondmg_type5Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_armor", DbType:="SmallInt NOT NULL")>  _
	Public Property armor() As Short
		Get
			Return Me._armor
		End Get
		Set
			If ((Me._armor = value)  _
						= false) Then
				Me.OnarmorChanging(value)
				Me.SendPropertyChanging
				Me._armor = value
				Me.SendPropertyChanged("armor")
				Me.OnarmorChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_holy_res", DbType:="SmallInt NOT NULL")>  _
	Public Property holy_res() As Short
		Get
			Return Me._holy_res
		End Get
		Set
			If ((Me._holy_res = value)  _
						= false) Then
				Me.Onholy_resChanging(value)
				Me.SendPropertyChanging
				Me._holy_res = value
				Me.SendPropertyChanged("holy_res")
				Me.Onholy_resChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_fire_res", DbType:="SmallInt NOT NULL")>  _
	Public Property fire_res() As Short
		Get
			Return Me._fire_res
		End Get
		Set
			If ((Me._fire_res = value)  _
						= false) Then
				Me.Onfire_resChanging(value)
				Me.SendPropertyChanging
				Me._fire_res = value
				Me.SendPropertyChanged("fire_res")
				Me.Onfire_resChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_nature_res", DbType:="SmallInt NOT NULL")>  _
	Public Property nature_res() As Short
		Get
			Return Me._nature_res
		End Get
		Set
			If ((Me._nature_res = value)  _
						= false) Then
				Me.Onnature_resChanging(value)
				Me.SendPropertyChanging
				Me._nature_res = value
				Me.SendPropertyChanged("nature_res")
				Me.Onnature_resChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_frost_res", DbType:="SmallInt NOT NULL")>  _
	Public Property frost_res() As Short
		Get
			Return Me._frost_res
		End Get
		Set
			If ((Me._frost_res = value)  _
						= false) Then
				Me.Onfrost_resChanging(value)
				Me.SendPropertyChanging
				Me._frost_res = value
				Me.SendPropertyChanged("frost_res")
				Me.Onfrost_resChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_shadow_res", DbType:="SmallInt NOT NULL")>  _
	Public Property shadow_res() As Short
		Get
			Return Me._shadow_res
		End Get
		Set
			If ((Me._shadow_res = value)  _
						= false) Then
				Me.Onshadow_resChanging(value)
				Me.SendPropertyChanging
				Me._shadow_res = value
				Me.SendPropertyChanged("shadow_res")
				Me.Onshadow_resChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_arcane_res", DbType:="SmallInt NOT NULL")>  _
	Public Property arcane_res() As Short
		Get
			Return Me._arcane_res
		End Get
		Set
			If ((Me._arcane_res = value)  _
						= false) Then
				Me.Onarcane_resChanging(value)
				Me.SendPropertyChanging
				Me._arcane_res = value
				Me.SendPropertyChanged("arcane_res")
				Me.Onarcane_resChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_delay", DbType:="SmallInt NOT NULL")>  _
	Public Property delay() As Short
		Get
			Return Me._delay
		End Get
		Set
			If ((Me._delay = value)  _
						= false) Then
				Me.OndelayChanging(value)
				Me.SendPropertyChanging
				Me._delay = value
				Me.SendPropertyChanged("delay")
				Me.OndelayChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ammo_type", DbType:="SmallInt NOT NULL")>  _
	Public Property ammo_type() As Short
		Get
			Return Me._ammo_type
		End Get
		Set
			If ((Me._ammo_type = value)  _
						= false) Then
				Me.Onammo_typeChanging(value)
				Me.SendPropertyChanging
				Me._ammo_type = value
				Me.SendPropertyChanged("ammo_type")
				Me.Onammo_typeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_range", DbType:="Real NOT NULL")>  _
	Public Property range() As Single
		Get
			Return Me._range
		End Get
		Set
			If ((Me._range = value)  _
						= false) Then
				Me.OnrangeChanging(value)
				Me.SendPropertyChanging
				Me._range = value
				Me.SendPropertyChanged("range")
				Me.OnrangeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_spellid_1", DbType:="Int NOT NULL")>  _
	Public Property spellid_1() As Integer
		Get
			Return Me._spellid_1
		End Get
		Set
			If ((Me._spellid_1 = value)  _
						= false) Then
				Me.Onspellid_1Changing(value)
				Me.SendPropertyChanging
				Me._spellid_1 = value
				Me.SendPropertyChanged("spellid_1")
				Me.Onspellid_1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spelltrigger_1", DbType:="SmallInt NOT NULL")>  _
	Public Property spelltrigger_1() As Short
		Get
			Return Me._spelltrigger_1
		End Get
		Set
			If ((Me._spelltrigger_1 = value)  _
						= false) Then
				Me.Onspelltrigger_1Changing(value)
				Me.SendPropertyChanging
				Me._spelltrigger_1 = value
				Me.SendPropertyChanged("spelltrigger_1")
				Me.Onspelltrigger_1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spellcharges_1", DbType:="SmallInt NOT NULL")>  _
	Public Property spellcharges_1() As Short
		Get
			Return Me._spellcharges_1
		End Get
		Set
			If ((Me._spellcharges_1 = value)  _
						= false) Then
				Me.Onspellcharges_1Changing(value)
				Me.SendPropertyChanging
				Me._spellcharges_1 = value
				Me.SendPropertyChanged("spellcharges_1")
				Me.Onspellcharges_1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spellcooldown_1", DbType:="Int NOT NULL")>  _
	Public Property spellcooldown_1() As Integer
		Get
			Return Me._spellcooldown_1
		End Get
		Set
			If ((Me._spellcooldown_1 = value)  _
						= false) Then
				Me.Onspellcooldown_1Changing(value)
				Me.SendPropertyChanging
				Me._spellcooldown_1 = value
				Me.SendPropertyChanged("spellcooldown_1")
				Me.Onspellcooldown_1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spellcategory_1", DbType:="SmallInt NOT NULL")>  _
	Public Property spellcategory_1() As Short
		Get
			Return Me._spellcategory_1
		End Get
		Set
			If ((Me._spellcategory_1 = value)  _
						= false) Then
				Me.Onspellcategory_1Changing(value)
				Me.SendPropertyChanging
				Me._spellcategory_1 = value
				Me.SendPropertyChanged("spellcategory_1")
				Me.Onspellcategory_1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spellcategorycooldown_1", DbType:="Int NOT NULL")>  _
	Public Property spellcategorycooldown_1() As Integer
		Get
			Return Me._spellcategorycooldown_1
		End Get
		Set
			If ((Me._spellcategorycooldown_1 = value)  _
						= false) Then
				Me.Onspellcategorycooldown_1Changing(value)
				Me.SendPropertyChanging
				Me._spellcategorycooldown_1 = value
				Me.SendPropertyChanged("spellcategorycooldown_1")
				Me.Onspellcategorycooldown_1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spellid_2", DbType:="Int NOT NULL")>  _
	Public Property spellid_2() As Integer
		Get
			Return Me._spellid_2
		End Get
		Set
			If ((Me._spellid_2 = value)  _
						= false) Then
				Me.Onspellid_2Changing(value)
				Me.SendPropertyChanging
				Me._spellid_2 = value
				Me.SendPropertyChanged("spellid_2")
				Me.Onspellid_2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spelltrigger_2", DbType:="SmallInt NOT NULL")>  _
	Public Property spelltrigger_2() As Short
		Get
			Return Me._spelltrigger_2
		End Get
		Set
			If ((Me._spelltrigger_2 = value)  _
						= false) Then
				Me.Onspelltrigger_2Changing(value)
				Me.SendPropertyChanging
				Me._spelltrigger_2 = value
				Me.SendPropertyChanged("spelltrigger_2")
				Me.Onspelltrigger_2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spellcharges_2", DbType:="SmallInt NOT NULL")>  _
	Public Property spellcharges_2() As Short
		Get
			Return Me._spellcharges_2
		End Get
		Set
			If ((Me._spellcharges_2 = value)  _
						= false) Then
				Me.Onspellcharges_2Changing(value)
				Me.SendPropertyChanging
				Me._spellcharges_2 = value
				Me.SendPropertyChanged("spellcharges_2")
				Me.Onspellcharges_2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spellcooldown_2", DbType:="Int NOT NULL")>  _
	Public Property spellcooldown_2() As Integer
		Get
			Return Me._spellcooldown_2
		End Get
		Set
			If ((Me._spellcooldown_2 = value)  _
						= false) Then
				Me.Onspellcooldown_2Changing(value)
				Me.SendPropertyChanging
				Me._spellcooldown_2 = value
				Me.SendPropertyChanged("spellcooldown_2")
				Me.Onspellcooldown_2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spellcategory_2", DbType:="SmallInt NOT NULL")>  _
	Public Property spellcategory_2() As Short
		Get
			Return Me._spellcategory_2
		End Get
		Set
			If ((Me._spellcategory_2 = value)  _
						= false) Then
				Me.Onspellcategory_2Changing(value)
				Me.SendPropertyChanging
				Me._spellcategory_2 = value
				Me.SendPropertyChanged("spellcategory_2")
				Me.Onspellcategory_2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spellcategorycooldown_2", DbType:="Int NOT NULL")>  _
	Public Property spellcategorycooldown_2() As Integer
		Get
			Return Me._spellcategorycooldown_2
		End Get
		Set
			If ((Me._spellcategorycooldown_2 = value)  _
						= false) Then
				Me.Onspellcategorycooldown_2Changing(value)
				Me.SendPropertyChanging
				Me._spellcategorycooldown_2 = value
				Me.SendPropertyChanged("spellcategorycooldown_2")
				Me.Onspellcategorycooldown_2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spellid_3", DbType:="Int NOT NULL")>  _
	Public Property spellid_3() As Integer
		Get
			Return Me._spellid_3
		End Get
		Set
			If ((Me._spellid_3 = value)  _
						= false) Then
				Me.Onspellid_3Changing(value)
				Me.SendPropertyChanging
				Me._spellid_3 = value
				Me.SendPropertyChanged("spellid_3")
				Me.Onspellid_3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spelltrigger_3", DbType:="SmallInt NOT NULL")>  _
	Public Property spelltrigger_3() As Short
		Get
			Return Me._spelltrigger_3
		End Get
		Set
			If ((Me._spelltrigger_3 = value)  _
						= false) Then
				Me.Onspelltrigger_3Changing(value)
				Me.SendPropertyChanging
				Me._spelltrigger_3 = value
				Me.SendPropertyChanged("spelltrigger_3")
				Me.Onspelltrigger_3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spellcharges_3", DbType:="SmallInt NOT NULL")>  _
	Public Property spellcharges_3() As Short
		Get
			Return Me._spellcharges_3
		End Get
		Set
			If ((Me._spellcharges_3 = value)  _
						= false) Then
				Me.Onspellcharges_3Changing(value)
				Me.SendPropertyChanging
				Me._spellcharges_3 = value
				Me.SendPropertyChanged("spellcharges_3")
				Me.Onspellcharges_3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spellcooldown_3", DbType:="Int NOT NULL")>  _
	Public Property spellcooldown_3() As Integer
		Get
			Return Me._spellcooldown_3
		End Get
		Set
			If ((Me._spellcooldown_3 = value)  _
						= false) Then
				Me.Onspellcooldown_3Changing(value)
				Me.SendPropertyChanging
				Me._spellcooldown_3 = value
				Me.SendPropertyChanged("spellcooldown_3")
				Me.Onspellcooldown_3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spellcategory_3", DbType:="SmallInt NOT NULL")>  _
	Public Property spellcategory_3() As Short
		Get
			Return Me._spellcategory_3
		End Get
		Set
			If ((Me._spellcategory_3 = value)  _
						= false) Then
				Me.Onspellcategory_3Changing(value)
				Me.SendPropertyChanging
				Me._spellcategory_3 = value
				Me.SendPropertyChanged("spellcategory_3")
				Me.Onspellcategory_3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spellcategorycooldown_3", DbType:="Int NOT NULL")>  _
	Public Property spellcategorycooldown_3() As Integer
		Get
			Return Me._spellcategorycooldown_3
		End Get
		Set
			If ((Me._spellcategorycooldown_3 = value)  _
						= false) Then
				Me.Onspellcategorycooldown_3Changing(value)
				Me.SendPropertyChanging
				Me._spellcategorycooldown_3 = value
				Me.SendPropertyChanged("spellcategorycooldown_3")
				Me.Onspellcategorycooldown_3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spellid_4", DbType:="Int NOT NULL")>  _
	Public Property spellid_4() As Integer
		Get
			Return Me._spellid_4
		End Get
		Set
			If ((Me._spellid_4 = value)  _
						= false) Then
				Me.Onspellid_4Changing(value)
				Me.SendPropertyChanging
				Me._spellid_4 = value
				Me.SendPropertyChanged("spellid_4")
				Me.Onspellid_4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spelltrigger_4", DbType:="SmallInt NOT NULL")>  _
	Public Property spelltrigger_4() As Short
		Get
			Return Me._spelltrigger_4
		End Get
		Set
			If ((Me._spelltrigger_4 = value)  _
						= false) Then
				Me.Onspelltrigger_4Changing(value)
				Me.SendPropertyChanging
				Me._spelltrigger_4 = value
				Me.SendPropertyChanged("spelltrigger_4")
				Me.Onspelltrigger_4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spellcharges_4", DbType:="SmallInt NOT NULL")>  _
	Public Property spellcharges_4() As Short
		Get
			Return Me._spellcharges_4
		End Get
		Set
			If ((Me._spellcharges_4 = value)  _
						= false) Then
				Me.Onspellcharges_4Changing(value)
				Me.SendPropertyChanging
				Me._spellcharges_4 = value
				Me.SendPropertyChanged("spellcharges_4")
				Me.Onspellcharges_4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spellcooldown_4", DbType:="Int NOT NULL")>  _
	Public Property spellcooldown_4() As Integer
		Get
			Return Me._spellcooldown_4
		End Get
		Set
			If ((Me._spellcooldown_4 = value)  _
						= false) Then
				Me.Onspellcooldown_4Changing(value)
				Me.SendPropertyChanging
				Me._spellcooldown_4 = value
				Me.SendPropertyChanged("spellcooldown_4")
				Me.Onspellcooldown_4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spellcategory_4", DbType:="SmallInt NOT NULL")>  _
	Public Property spellcategory_4() As Short
		Get
			Return Me._spellcategory_4
		End Get
		Set
			If ((Me._spellcategory_4 = value)  _
						= false) Then
				Me.Onspellcategory_4Changing(value)
				Me.SendPropertyChanging
				Me._spellcategory_4 = value
				Me.SendPropertyChanged("spellcategory_4")
				Me.Onspellcategory_4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spellcategorycooldown_4", DbType:="Int NOT NULL")>  _
	Public Property spellcategorycooldown_4() As Integer
		Get
			Return Me._spellcategorycooldown_4
		End Get
		Set
			If ((Me._spellcategorycooldown_4 = value)  _
						= false) Then
				Me.Onspellcategorycooldown_4Changing(value)
				Me.SendPropertyChanging
				Me._spellcategorycooldown_4 = value
				Me.SendPropertyChanged("spellcategorycooldown_4")
				Me.Onspellcategorycooldown_4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spellid_5", DbType:="Int NOT NULL")>  _
	Public Property spellid_5() As Integer
		Get
			Return Me._spellid_5
		End Get
		Set
			If ((Me._spellid_5 = value)  _
						= false) Then
				Me.Onspellid_5Changing(value)
				Me.SendPropertyChanging
				Me._spellid_5 = value
				Me.SendPropertyChanged("spellid_5")
				Me.Onspellid_5Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spelltrigger_5", DbType:="SmallInt NOT NULL")>  _
	Public Property spelltrigger_5() As Short
		Get
			Return Me._spelltrigger_5
		End Get
		Set
			If ((Me._spelltrigger_5 = value)  _
						= false) Then
				Me.Onspelltrigger_5Changing(value)
				Me.SendPropertyChanging
				Me._spelltrigger_5 = value
				Me.SendPropertyChanged("spelltrigger_5")
				Me.Onspelltrigger_5Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spellcharges_5", DbType:="SmallInt NOT NULL")>  _
	Public Property spellcharges_5() As Short
		Get
			Return Me._spellcharges_5
		End Get
		Set
			If ((Me._spellcharges_5 = value)  _
						= false) Then
				Me.Onspellcharges_5Changing(value)
				Me.SendPropertyChanging
				Me._spellcharges_5 = value
				Me.SendPropertyChanged("spellcharges_5")
				Me.Onspellcharges_5Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spellcooldown_5", DbType:="Int NOT NULL")>  _
	Public Property spellcooldown_5() As Integer
		Get
			Return Me._spellcooldown_5
		End Get
		Set
			If ((Me._spellcooldown_5 = value)  _
						= false) Then
				Me.Onspellcooldown_5Changing(value)
				Me.SendPropertyChanging
				Me._spellcooldown_5 = value
				Me.SendPropertyChanged("spellcooldown_5")
				Me.Onspellcooldown_5Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spellcategory_5", DbType:="SmallInt NOT NULL")>  _
	Public Property spellcategory_5() As Short
		Get
			Return Me._spellcategory_5
		End Get
		Set
			If ((Me._spellcategory_5 = value)  _
						= false) Then
				Me.Onspellcategory_5Changing(value)
				Me.SendPropertyChanging
				Me._spellcategory_5 = value
				Me.SendPropertyChanged("spellcategory_5")
				Me.Onspellcategory_5Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_spellcategorycooldown_5", DbType:="Int NOT NULL")>  _
	Public Property spellcategorycooldown_5() As Integer
		Get
			Return Me._spellcategorycooldown_5
		End Get
		Set
			If ((Me._spellcategorycooldown_5 = value)  _
						= false) Then
				Me.Onspellcategorycooldown_5Changing(value)
				Me.SendPropertyChanging
				Me._spellcategorycooldown_5 = value
				Me.SendPropertyChanged("spellcategorycooldown_5")
				Me.Onspellcategorycooldown_5Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_bonding", DbType:="SmallInt NOT NULL")>  _
	Public Property bonding() As Short
		Get
			Return Me._bonding
		End Get
		Set
			If ((Me._bonding = value)  _
						= false) Then
				Me.OnbondingChanging(value)
				Me.SendPropertyChanging
				Me._bonding = value
				Me.SendPropertyChanged("bonding")
				Me.OnbondingChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_description", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me.OndescriptionChanging(value)
				Me.SendPropertyChanging
				Me._description = value
				Me.SendPropertyChanged("description")
				Me.OndescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_page_id", DbType:="SmallInt NOT NULL")>  _
	Public Property page_id() As Short
		Get
			Return Me._page_id
		End Get
		Set
			If ((Me._page_id = value)  _
						= false) Then
				Me.Onpage_idChanging(value)
				Me.SendPropertyChanging
				Me._page_id = value
				Me.SendPropertyChanged("page_id")
				Me.Onpage_idChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_page_language", DbType:="SmallInt NOT NULL")>  _
	Public Property page_language() As Short
		Get
			Return Me._page_language
		End Get
		Set
			If ((Me._page_language = value)  _
						= false) Then
				Me.Onpage_languageChanging(value)
				Me.SendPropertyChanging
				Me._page_language = value
				Me.SendPropertyChanged("page_language")
				Me.Onpage_languageChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_page_material", DbType:="SmallInt NOT NULL")>  _
	Public Property page_material() As Short
		Get
			Return Me._page_material
		End Get
		Set
			If ((Me._page_material = value)  _
						= false) Then
				Me.Onpage_materialChanging(value)
				Me.SendPropertyChanging
				Me._page_material = value
				Me.SendPropertyChanged("page_material")
				Me.Onpage_materialChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_quest_id", DbType:="SmallInt NOT NULL")>  _
	Public Property quest_id() As Short
		Get
			Return Me._quest_id
		End Get
		Set
			If ((Me._quest_id = value)  _
						= false) Then
				Me.Onquest_idChanging(value)
				Me.SendPropertyChanging
				Me._quest_id = value
				Me.SendPropertyChanged("quest_id")
				Me.Onquest_idChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_lock_id", DbType:="SmallInt NOT NULL")>  _
	Public Property lock_id() As Short
		Get
			Return Me._lock_id
		End Get
		Set
			If ((Me._lock_id = value)  _
						= false) Then
				Me.Onlock_idChanging(value)
				Me.SendPropertyChanging
				Me._lock_id = value
				Me.SendPropertyChanged("lock_id")
				Me.Onlock_idChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_lock_material", DbType:="SmallInt NOT NULL")>  _
	Public Property lock_material() As Short
		Get
			Return Me._lock_material
		End Get
		Set
			If ((Me._lock_material = value)  _
						= false) Then
				Me.Onlock_materialChanging(value)
				Me.SendPropertyChanging
				Me._lock_material = value
				Me.SendPropertyChanged("lock_material")
				Me.Onlock_materialChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_sheathID", DbType:="SmallInt NOT NULL")>  _
	Public Property sheathID() As Short
		Get
			Return Me._sheathID
		End Get
		Set
			If ((Me._sheathID = value)  _
						= false) Then
				Me.OnsheathIDChanging(value)
				Me.SendPropertyChanging
				Me._sheathID = value
				Me.SendPropertyChanged("sheathID")
				Me.OnsheathIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_randomprop", DbType:="SmallInt NOT NULL")>  _
	Public Property randomprop() As Short
		Get
			Return Me._randomprop
		End Get
		Set
			If ((Me._randomprop = value)  _
						= false) Then
				Me.OnrandompropChanging(value)
				Me.SendPropertyChanging
				Me._randomprop = value
				Me.SendPropertyChanged("randomprop")
				Me.OnrandompropChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_randomsuffix", DbType:="SmallInt NOT NULL")>  _
	Public Property randomsuffix() As Short
		Get
			Return Me._randomsuffix
		End Get
		Set
			If ((Me._randomsuffix = value)  _
						= false) Then
				Me.OnrandomsuffixChanging(value)
				Me.SendPropertyChanging
				Me._randomsuffix = value
				Me.SendPropertyChanged("randomsuffix")
				Me.OnrandomsuffixChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_block", DbType:="SmallInt NOT NULL")>  _
	Public Property block() As Short
		Get
			Return Me._block
		End Get
		Set
			If ((Me._block = value)  _
						= false) Then
				Me.OnblockChanging(value)
				Me.SendPropertyChanging
				Me._block = value
				Me.SendPropertyChanged("block")
				Me.OnblockChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_itemset", DbType:="SmallInt NOT NULL")>  _
	Public Property itemset() As Short
		Get
			Return Me._itemset
		End Get
		Set
			If ((Me._itemset = value)  _
						= false) Then
				Me.OnitemsetChanging(value)
				Me.SendPropertyChanging
				Me._itemset = value
				Me.SendPropertyChanged("itemset")
				Me.OnitemsetChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_MaxDurability", DbType:="SmallInt NOT NULL")>  _
	Public Property MaxDurability() As Short
		Get
			Return Me._MaxDurability
		End Get
		Set
			If ((Me._MaxDurability = value)  _
						= false) Then
				Me.OnMaxDurabilityChanging(value)
				Me.SendPropertyChanging
				Me._MaxDurability = value
				Me.SendPropertyChanged("MaxDurability")
				Me.OnMaxDurabilityChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ZoneNameID", DbType:="SmallInt NOT NULL")>  _
	Public Property ZoneNameID() As Short
		Get
			Return Me._ZoneNameID
		End Get
		Set
			If ((Me._ZoneNameID = value)  _
						= false) Then
				Me.OnZoneNameIDChanging(value)
				Me.SendPropertyChanging
				Me._ZoneNameID = value
				Me.SendPropertyChanged("ZoneNameID")
				Me.OnZoneNameIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_mapid", DbType:="SmallInt NOT NULL")>  _
	Public Property mapid() As Short
		Get
			Return Me._mapid
		End Get
		Set
			If ((Me._mapid = value)  _
						= false) Then
				Me.OnmapidChanging(value)
				Me.SendPropertyChanging
				Me._mapid = value
				Me.SendPropertyChanged("mapid")
				Me.OnmapidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_bagfamily", DbType:="SmallInt NOT NULL")>  _
	Public Property bagfamily() As Short
		Get
			Return Me._bagfamily
		End Get
		Set
			If ((Me._bagfamily = value)  _
						= false) Then
				Me.OnbagfamilyChanging(value)
				Me.SendPropertyChanging
				Me._bagfamily = value
				Me.SendPropertyChanged("bagfamily")
				Me.OnbagfamilyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_TotemCategory", DbType:="Int NOT NULL")>  _
	Public Property TotemCategory() As Integer
		Get
			Return Me._TotemCategory
		End Get
		Set
			If ((Me._TotemCategory = value)  _
						= false) Then
				Me.OnTotemCategoryChanging(value)
				Me.SendPropertyChanging
				Me._TotemCategory = value
				Me.SendPropertyChanged("TotemCategory")
				Me.OnTotemCategoryChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_socket_color_1", DbType:="SmallInt NOT NULL")>  _
	Public Property socket_color_1() As Short
		Get
			Return Me._socket_color_1
		End Get
		Set
			If ((Me._socket_color_1 = value)  _
						= false) Then
				Me.Onsocket_color_1Changing(value)
				Me.SendPropertyChanging
				Me._socket_color_1 = value
				Me.SendPropertyChanged("socket_color_1")
				Me.Onsocket_color_1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_socket_content_1", DbType:="Int NOT NULL")>  _
	Public Property socket_content_1() As Integer
		Get
			Return Me._socket_content_1
		End Get
		Set
			If ((Me._socket_content_1 = value)  _
						= false) Then
				Me.Onsocket_content_1Changing(value)
				Me.SendPropertyChanging
				Me._socket_content_1 = value
				Me.SendPropertyChanged("socket_content_1")
				Me.Onsocket_content_1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_socket_color_2", DbType:="SmallInt NOT NULL")>  _
	Public Property socket_color_2() As Short
		Get
			Return Me._socket_color_2
		End Get
		Set
			If ((Me._socket_color_2 = value)  _
						= false) Then
				Me.Onsocket_color_2Changing(value)
				Me.SendPropertyChanging
				Me._socket_color_2 = value
				Me.SendPropertyChanged("socket_color_2")
				Me.Onsocket_color_2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_socket_content_2", DbType:="Int NOT NULL")>  _
	Public Property socket_content_2() As Integer
		Get
			Return Me._socket_content_2
		End Get
		Set
			If ((Me._socket_content_2 = value)  _
						= false) Then
				Me.Onsocket_content_2Changing(value)
				Me.SendPropertyChanging
				Me._socket_content_2 = value
				Me.SendPropertyChanged("socket_content_2")
				Me.Onsocket_content_2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_socket_color_3", DbType:="SmallInt NOT NULL")>  _
	Public Property socket_color_3() As Short
		Get
			Return Me._socket_color_3
		End Get
		Set
			If ((Me._socket_color_3 = value)  _
						= false) Then
				Me.Onsocket_color_3Changing(value)
				Me.SendPropertyChanging
				Me._socket_color_3 = value
				Me.SendPropertyChanged("socket_color_3")
				Me.Onsocket_color_3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_socket_content_3", DbType:="Int NOT NULL")>  _
	Public Property socket_content_3() As Integer
		Get
			Return Me._socket_content_3
		End Get
		Set
			If ((Me._socket_content_3 = value)  _
						= false) Then
				Me.Onsocket_content_3Changing(value)
				Me.SendPropertyChanging
				Me._socket_content_3 = value
				Me.SendPropertyChanged("socket_content_3")
				Me.Onsocket_content_3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_socket_bonus", DbType:="SmallInt NOT NULL")>  _
	Public Property socket_bonus() As Short
		Get
			Return Me._socket_bonus
		End Get
		Set
			If ((Me._socket_bonus = value)  _
						= false) Then
				Me.Onsocket_bonusChanging(value)
				Me.SendPropertyChanging
				Me._socket_bonus = value
				Me.SendPropertyChanged("socket_bonus")
				Me.Onsocket_bonusChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_GemProperties", DbType:="SmallInt NOT NULL")>  _
	Public Property GemProperties() As Short
		Get
			Return Me._GemProperties
		End Get
		Set
			If ((Me._GemProperties = value)  _
						= false) Then
				Me.OnGemPropertiesChanging(value)
				Me.SendPropertyChanging
				Me._GemProperties = value
				Me.SendPropertyChanged("GemProperties")
				Me.OnGemPropertiesChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ReqDisenchantSkill", DbType:="SmallInt NOT NULL")>  _
	Public Property ReqDisenchantSkill() As Short
		Get
			Return Me._ReqDisenchantSkill
		End Get
		Set
			If ((Me._ReqDisenchantSkill = value)  _
						= false) Then
				Me.OnReqDisenchantSkillChanging(value)
				Me.SendPropertyChanging
				Me._ReqDisenchantSkill = value
				Me.SendPropertyChanged("ReqDisenchantSkill")
				Me.OnReqDisenchantSkillChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_armorDamageModifier", DbType:="Real NOT NULL")>  _
	Public Property armorDamageModifier() As Single
		Get
			Return Me._armorDamageModifier
		End Get
		Set
			If ((Me._armorDamageModifier = value)  _
						= false) Then
				Me.OnarmorDamageModifierChanging(value)
				Me.SendPropertyChanging
				Me._armorDamageModifier = value
				Me.SendPropertyChanged("armorDamageModifier")
				Me.OnarmorDamageModifierChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ExistingDuration", DbType:="Int NOT NULL")>  _
	Public Property ExistingDuration() As Integer
		Get
			Return Me._ExistingDuration
		End Get
		Set
			If ((Me._ExistingDuration = value)  _
						= false) Then
				Me.OnExistingDurationChanging(value)
				Me.SendPropertyChanging
				Me._ExistingDuration = value
				Me.SendPropertyChanged("ExistingDuration")
				Me.OnExistingDurationChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_DisenchantID", DbType:="Int NOT NULL")>  _
	Public Property DisenchantID() As Integer
		Get
			Return Me._DisenchantID
		End Get
		Set
			If ((Me._DisenchantID = value)  _
						= false) Then
				Me.OnDisenchantIDChanging(value)
				Me.SendPropertyChanging
				Me._DisenchantID = value
				Me.SendPropertyChanged("DisenchantID")
				Me.OnDisenchantIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_FoodType", DbType:="TinyInt NOT NULL")>  _
	Public Property FoodType() As Byte
		Get
			Return Me._FoodType
		End Get
		Set
			If ((Me._FoodType = value)  _
						= false) Then
				Me.OnFoodTypeChanging(value)
				Me.SendPropertyChanging
				Me._FoodType = value
				Me.SendPropertyChanged("FoodType")
				Me.OnFoodTypeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_minMoneyLoot", DbType:="Int NOT NULL")>  _
	Public Property minMoneyLoot() As Integer
		Get
			Return Me._minMoneyLoot
		End Get
		Set
			If ((Me._minMoneyLoot = value)  _
						= false) Then
				Me.OnminMoneyLootChanging(value)
				Me.SendPropertyChanging
				Me._minMoneyLoot = value
				Me.SendPropertyChanged("minMoneyLoot")
				Me.OnminMoneyLootChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_maxMoneyLoot", DbType:="Int NOT NULL")>  _
	Public Property maxMoneyLoot() As Integer
		Get
			Return Me._maxMoneyLoot
		End Get
		Set
			If ((Me._maxMoneyLoot = value)  _
						= false) Then
				Me.OnmaxMoneyLootChanging(value)
				Me.SendPropertyChanging
				Me._maxMoneyLoot = value
				Me.SendPropertyChanged("maxMoneyLoot")
				Me.OnmaxMoneyLootChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ExtraFlags", DbType:="TinyInt NOT NULL")>  _
	Public Property ExtraFlags() As Byte
		Get
			Return Me._ExtraFlags
		End Get
		Set
			If ((Me._ExtraFlags = value)  _
						= false) Then
				Me.OnExtraFlagsChanging(value)
				Me.SendPropertyChanging
				Me._ExtraFlags = value
				Me.SendPropertyChanged("ExtraFlags")
				Me.OnExtraFlagsChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.quests")>  _
Partial Public Class quest
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _NextQuest As Integer
	
	Private _Title As String
	
	Private _Zone As Integer
	
	Private _Type As Integer
	
	Private _Flags As Integer
	
	Private _RewTitleId As Integer
	
	Private _rewtalents As Integer
	
	Private _SpecialFlags As Integer
	
	Private _Level_Start As Short
	
	Private _Level_Normal As Short
	
	Private _Required_Quest1 As Integer
	
	Private _Required_Quest2 As Integer
	
	Private _Required_Quest3 As Integer
	
	Private _Required_Quest4 As Integer
	
	Private _Required_Race As Integer
	
	Private _Required_Class As Integer
	
	Private _Required_TradeSkill As Integer
	
	Private _Required_TradeSkillValue As Integer
	
	Private _Required_Reputation1 As Integer
	
	Private _Required_Reputation1_Faction As Integer
	
	Private _Required_Reputation2 As Integer
	
	Private _Required_Reputation2_Faction As Integer
	
	Private _Text_Objectives As String
	
	Private _Text_Description As String
	
	Private _Text_End As String
	
	Private _Text_Incomplete As String
	
	Private _Text_Complete As String
	
	Private _Reward_XP As Integer
	
	Private _Reward_Gold As Integer
	
	Private _Reward_Spell As Integer
	
	Private _Reward_SpellCast As Integer
	
	Private _Reward_Reputation1 As Integer
	
	Private _Reward_Reputation1_Faction As Integer
	
	Private _Reward_Reputation2 As Integer
	
	Private _Reward_Reputation2_Faction As Integer
	
	Private _Reward_Reputation3 As Integer
	
	Private _Reward_Reputation3_Faction As Integer
	
	Private _Reward_Item1 As Integer
	
	Private _Reward_Item1_Count As Short
	
	Private _Reward_Item2 As Integer
	
	Private _Reward_Item2_Count As Short
	
	Private _Reward_Item3 As Integer
	
	Private _Reward_Item3_Count As Short
	
	Private _Reward_Item4 As Integer
	
	Private _Reward_Item4_Count As Short
	
	Private _Reward_Item5 As Integer
	
	Private _Reward_Item5_Count As Short
	
	Private _Reward_Item6 As Integer
	
	Private _Reward_Item6_Count As Short
	
	Private _Reward_StaticItem1 As Integer
	
	Private _Reward_StaticItem1_Count As Short
	
	Private _Reward_StaticItem2 As Integer
	
	Private _Reward_StaticItem2_Count As Short
	
	Private _Reward_StaticItem3 As Integer
	
	Private _Reward_StaticItem3_Count As Short
	
	Private _Reward_StaticItem4 As Integer
	
	Private _Reward_StaticItem4_Count As Short
	
	Private _Time_Limit As Integer
	
	Private _Objective_Trigger1 As Integer
	
	Private _Objective_Trigger2 As Integer
	
	Private _Objective_Trigger3 As Integer
	
	Private _Objective_Trigger4 As Integer
	
	Private _Objective_Cast1 As Integer
	
	Private _Objective_Cast2 As Integer
	
	Private _Objective_Cast3 As Integer
	
	Private _Objective_Cast4 As Integer
	
	Private _Objective_Kill1 As Integer
	
	Private _Objective_Kill1_Count As Short
	
	Private _Objective_Kill2 As Integer
	
	Private _Objective_Kill2_Count As Short
	
	Private _Objective_Kill3 As Integer
	
	Private _Objective_Kill3_Count As Short
	
	Private _Objective_Kill4 As Integer
	
	Private _Objective_Kill4_Count As Short
	
	Private _Objective_Item1 As Integer
	
	Private _Objective_Item1_Count As Short
	
	Private _Objective_Item2 As Integer
	
	Private _Objective_Item2_Count As Short
	
	Private _Objective_Item3 As Integer
	
	Private _Objective_Item3_Count As Short
	
	Private _Objective_Item4 As Integer
	
	Private _Objective_Item4_Count As Short
	
	Private _Objective_Deliver1 As Integer
	
	Private _Objective_Text1 As String
	
	Private _Objective_Text2 As String
	
	Private _Objective_Text3 As String
	
	Private _Objective_Text4 As String
	
	Private _SuggestedPlayers As Short
	
	Private _PointMap As Integer
	
	Private _PointX As Single
	
	Private _PointY As Single
	
	Private _PointOpt As Integer
	
	Private _MoneyAtMaxLevel As Integer
	
	Private _IsActive As Short
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnNextQuestChanging(value As Integer)
    End Sub
    Partial Private Sub OnNextQuestChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnZoneChanging(value As Integer)
    End Sub
    Partial Private Sub OnZoneChanged()
    End Sub
    Partial Private Sub OnTypeChanging(value As Integer)
    End Sub
    Partial Private Sub OnTypeChanged()
    End Sub
    Partial Private Sub OnFlagsChanging(value As Integer)
    End Sub
    Partial Private Sub OnFlagsChanged()
    End Sub
    Partial Private Sub OnRewTitleIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnRewTitleIdChanged()
    End Sub
    Partial Private Sub OnrewtalentsChanging(value As Integer)
    End Sub
    Partial Private Sub OnrewtalentsChanged()
    End Sub
    Partial Private Sub OnSpecialFlagsChanging(value As Integer)
    End Sub
    Partial Private Sub OnSpecialFlagsChanged()
    End Sub
    Partial Private Sub OnLevel_StartChanging(value As Short)
    End Sub
    Partial Private Sub OnLevel_StartChanged()
    End Sub
    Partial Private Sub OnLevel_NormalChanging(value As Short)
    End Sub
    Partial Private Sub OnLevel_NormalChanged()
    End Sub
    Partial Private Sub OnRequired_Quest1Changing(value As Integer)
    End Sub
    Partial Private Sub OnRequired_Quest1Changed()
    End Sub
    Partial Private Sub OnRequired_Quest2Changing(value As Integer)
    End Sub
    Partial Private Sub OnRequired_Quest2Changed()
    End Sub
    Partial Private Sub OnRequired_Quest3Changing(value As Integer)
    End Sub
    Partial Private Sub OnRequired_Quest3Changed()
    End Sub
    Partial Private Sub OnRequired_Quest4Changing(value As Integer)
    End Sub
    Partial Private Sub OnRequired_Quest4Changed()
    End Sub
    Partial Private Sub OnRequired_RaceChanging(value As Integer)
    End Sub
    Partial Private Sub OnRequired_RaceChanged()
    End Sub
    Partial Private Sub OnRequired_ClassChanging(value As Integer)
    End Sub
    Partial Private Sub OnRequired_ClassChanged()
    End Sub
    Partial Private Sub OnRequired_TradeSkillChanging(value As Integer)
    End Sub
    Partial Private Sub OnRequired_TradeSkillChanged()
    End Sub
    Partial Private Sub OnRequired_TradeSkillValueChanging(value As Integer)
    End Sub
    Partial Private Sub OnRequired_TradeSkillValueChanged()
    End Sub
    Partial Private Sub OnRequired_Reputation1Changing(value As Integer)
    End Sub
    Partial Private Sub OnRequired_Reputation1Changed()
    End Sub
    Partial Private Sub OnRequired_Reputation1_FactionChanging(value As Integer)
    End Sub
    Partial Private Sub OnRequired_Reputation1_FactionChanged()
    End Sub
    Partial Private Sub OnRequired_Reputation2Changing(value As Integer)
    End Sub
    Partial Private Sub OnRequired_Reputation2Changed()
    End Sub
    Partial Private Sub OnRequired_Reputation2_FactionChanging(value As Integer)
    End Sub
    Partial Private Sub OnRequired_Reputation2_FactionChanged()
    End Sub
    Partial Private Sub OnText_ObjectivesChanging(value As String)
    End Sub
    Partial Private Sub OnText_ObjectivesChanged()
    End Sub
    Partial Private Sub OnText_DescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnText_DescriptionChanged()
    End Sub
    Partial Private Sub OnText_EndChanging(value As String)
    End Sub
    Partial Private Sub OnText_EndChanged()
    End Sub
    Partial Private Sub OnText_IncompleteChanging(value As String)
    End Sub
    Partial Private Sub OnText_IncompleteChanged()
    End Sub
    Partial Private Sub OnText_CompleteChanging(value As String)
    End Sub
    Partial Private Sub OnText_CompleteChanged()
    End Sub
    Partial Private Sub OnReward_XPChanging(value As Integer)
    End Sub
    Partial Private Sub OnReward_XPChanged()
    End Sub
    Partial Private Sub OnReward_GoldChanging(value As Integer)
    End Sub
    Partial Private Sub OnReward_GoldChanged()
    End Sub
    Partial Private Sub OnReward_SpellChanging(value As Integer)
    End Sub
    Partial Private Sub OnReward_SpellChanged()
    End Sub
    Partial Private Sub OnReward_SpellCastChanging(value As Integer)
    End Sub
    Partial Private Sub OnReward_SpellCastChanged()
    End Sub
    Partial Private Sub OnReward_Reputation1Changing(value As Integer)
    End Sub
    Partial Private Sub OnReward_Reputation1Changed()
    End Sub
    Partial Private Sub OnReward_Reputation1_FactionChanging(value As Integer)
    End Sub
    Partial Private Sub OnReward_Reputation1_FactionChanged()
    End Sub
    Partial Private Sub OnReward_Reputation2Changing(value As Integer)
    End Sub
    Partial Private Sub OnReward_Reputation2Changed()
    End Sub
    Partial Private Sub OnReward_Reputation2_FactionChanging(value As Integer)
    End Sub
    Partial Private Sub OnReward_Reputation2_FactionChanged()
    End Sub
    Partial Private Sub OnReward_Reputation3Changing(value As Integer)
    End Sub
    Partial Private Sub OnReward_Reputation3Changed()
    End Sub
    Partial Private Sub OnReward_Reputation3_FactionChanging(value As Integer)
    End Sub
    Partial Private Sub OnReward_Reputation3_FactionChanged()
    End Sub
    Partial Private Sub OnReward_Item1Changing(value As Integer)
    End Sub
    Partial Private Sub OnReward_Item1Changed()
    End Sub
    Partial Private Sub OnReward_Item1_CountChanging(value As Short)
    End Sub
    Partial Private Sub OnReward_Item1_CountChanged()
    End Sub
    Partial Private Sub OnReward_Item2Changing(value As Integer)
    End Sub
    Partial Private Sub OnReward_Item2Changed()
    End Sub
    Partial Private Sub OnReward_Item2_CountChanging(value As Short)
    End Sub
    Partial Private Sub OnReward_Item2_CountChanged()
    End Sub
    Partial Private Sub OnReward_Item3Changing(value As Integer)
    End Sub
    Partial Private Sub OnReward_Item3Changed()
    End Sub
    Partial Private Sub OnReward_Item3_CountChanging(value As Short)
    End Sub
    Partial Private Sub OnReward_Item3_CountChanged()
    End Sub
    Partial Private Sub OnReward_Item4Changing(value As Integer)
    End Sub
    Partial Private Sub OnReward_Item4Changed()
    End Sub
    Partial Private Sub OnReward_Item4_CountChanging(value As Short)
    End Sub
    Partial Private Sub OnReward_Item4_CountChanged()
    End Sub
    Partial Private Sub OnReward_Item5Changing(value As Integer)
    End Sub
    Partial Private Sub OnReward_Item5Changed()
    End Sub
    Partial Private Sub OnReward_Item5_CountChanging(value As Short)
    End Sub
    Partial Private Sub OnReward_Item5_CountChanged()
    End Sub
    Partial Private Sub OnReward_Item6Changing(value As Integer)
    End Sub
    Partial Private Sub OnReward_Item6Changed()
    End Sub
    Partial Private Sub OnReward_Item6_CountChanging(value As Short)
    End Sub
    Partial Private Sub OnReward_Item6_CountChanged()
    End Sub
    Partial Private Sub OnReward_StaticItem1Changing(value As Integer)
    End Sub
    Partial Private Sub OnReward_StaticItem1Changed()
    End Sub
    Partial Private Sub OnReward_StaticItem1_CountChanging(value As Short)
    End Sub
    Partial Private Sub OnReward_StaticItem1_CountChanged()
    End Sub
    Partial Private Sub OnReward_StaticItem2Changing(value As Integer)
    End Sub
    Partial Private Sub OnReward_StaticItem2Changed()
    End Sub
    Partial Private Sub OnReward_StaticItem2_CountChanging(value As Short)
    End Sub
    Partial Private Sub OnReward_StaticItem2_CountChanged()
    End Sub
    Partial Private Sub OnReward_StaticItem3Changing(value As Integer)
    End Sub
    Partial Private Sub OnReward_StaticItem3Changed()
    End Sub
    Partial Private Sub OnReward_StaticItem3_CountChanging(value As Short)
    End Sub
    Partial Private Sub OnReward_StaticItem3_CountChanged()
    End Sub
    Partial Private Sub OnReward_StaticItem4Changing(value As Integer)
    End Sub
    Partial Private Sub OnReward_StaticItem4Changed()
    End Sub
    Partial Private Sub OnReward_StaticItem4_CountChanging(value As Short)
    End Sub
    Partial Private Sub OnReward_StaticItem4_CountChanged()
    End Sub
    Partial Private Sub OnTime_LimitChanging(value As Integer)
    End Sub
    Partial Private Sub OnTime_LimitChanged()
    End Sub
    Partial Private Sub OnObjective_Trigger1Changing(value As Integer)
    End Sub
    Partial Private Sub OnObjective_Trigger1Changed()
    End Sub
    Partial Private Sub OnObjective_Trigger2Changing(value As Integer)
    End Sub
    Partial Private Sub OnObjective_Trigger2Changed()
    End Sub
    Partial Private Sub OnObjective_Trigger3Changing(value As Integer)
    End Sub
    Partial Private Sub OnObjective_Trigger3Changed()
    End Sub
    Partial Private Sub OnObjective_Trigger4Changing(value As Integer)
    End Sub
    Partial Private Sub OnObjective_Trigger4Changed()
    End Sub
    Partial Private Sub OnObjective_Cast1Changing(value As Integer)
    End Sub
    Partial Private Sub OnObjective_Cast1Changed()
    End Sub
    Partial Private Sub OnObjective_Cast2Changing(value As Integer)
    End Sub
    Partial Private Sub OnObjective_Cast2Changed()
    End Sub
    Partial Private Sub OnObjective_Cast3Changing(value As Integer)
    End Sub
    Partial Private Sub OnObjective_Cast3Changed()
    End Sub
    Partial Private Sub OnObjective_Cast4Changing(value As Integer)
    End Sub
    Partial Private Sub OnObjective_Cast4Changed()
    End Sub
    Partial Private Sub OnObjective_Kill1Changing(value As Integer)
    End Sub
    Partial Private Sub OnObjective_Kill1Changed()
    End Sub
    Partial Private Sub OnObjective_Kill1_CountChanging(value As Short)
    End Sub
    Partial Private Sub OnObjective_Kill1_CountChanged()
    End Sub
    Partial Private Sub OnObjective_Kill2Changing(value As Integer)
    End Sub
    Partial Private Sub OnObjective_Kill2Changed()
    End Sub
    Partial Private Sub OnObjective_Kill2_CountChanging(value As Short)
    End Sub
    Partial Private Sub OnObjective_Kill2_CountChanged()
    End Sub
    Partial Private Sub OnObjective_Kill3Changing(value As Integer)
    End Sub
    Partial Private Sub OnObjective_Kill3Changed()
    End Sub
    Partial Private Sub OnObjective_Kill3_CountChanging(value As Short)
    End Sub
    Partial Private Sub OnObjective_Kill3_CountChanged()
    End Sub
    Partial Private Sub OnObjective_Kill4Changing(value As Integer)
    End Sub
    Partial Private Sub OnObjective_Kill4Changed()
    End Sub
    Partial Private Sub OnObjective_Kill4_CountChanging(value As Short)
    End Sub
    Partial Private Sub OnObjective_Kill4_CountChanged()
    End Sub
    Partial Private Sub OnObjective_Item1Changing(value As Integer)
    End Sub
    Partial Private Sub OnObjective_Item1Changed()
    End Sub
    Partial Private Sub OnObjective_Item1_CountChanging(value As Short)
    End Sub
    Partial Private Sub OnObjective_Item1_CountChanged()
    End Sub
    Partial Private Sub OnObjective_Item2Changing(value As Integer)
    End Sub
    Partial Private Sub OnObjective_Item2Changed()
    End Sub
    Partial Private Sub OnObjective_Item2_CountChanging(value As Short)
    End Sub
    Partial Private Sub OnObjective_Item2_CountChanged()
    End Sub
    Partial Private Sub OnObjective_Item3Changing(value As Integer)
    End Sub
    Partial Private Sub OnObjective_Item3Changed()
    End Sub
    Partial Private Sub OnObjective_Item3_CountChanging(value As Short)
    End Sub
    Partial Private Sub OnObjective_Item3_CountChanged()
    End Sub
    Partial Private Sub OnObjective_Item4Changing(value As Integer)
    End Sub
    Partial Private Sub OnObjective_Item4Changed()
    End Sub
    Partial Private Sub OnObjective_Item4_CountChanging(value As Short)
    End Sub
    Partial Private Sub OnObjective_Item4_CountChanged()
    End Sub
    Partial Private Sub OnObjective_Deliver1Changing(value As Integer)
    End Sub
    Partial Private Sub OnObjective_Deliver1Changed()
    End Sub
    Partial Private Sub OnObjective_Text1Changing(value As String)
    End Sub
    Partial Private Sub OnObjective_Text1Changed()
    End Sub
    Partial Private Sub OnObjective_Text2Changing(value As String)
    End Sub
    Partial Private Sub OnObjective_Text2Changed()
    End Sub
    Partial Private Sub OnObjective_Text3Changing(value As String)
    End Sub
    Partial Private Sub OnObjective_Text3Changed()
    End Sub
    Partial Private Sub OnObjective_Text4Changing(value As String)
    End Sub
    Partial Private Sub OnObjective_Text4Changed()
    End Sub
    Partial Private Sub OnSuggestedPlayersChanging(value As Short)
    End Sub
    Partial Private Sub OnSuggestedPlayersChanged()
    End Sub
    Partial Private Sub OnPointMapChanging(value As Integer)
    End Sub
    Partial Private Sub OnPointMapChanged()
    End Sub
    Partial Private Sub OnPointXChanging(value As Single)
    End Sub
    Partial Private Sub OnPointXChanged()
    End Sub
    Partial Private Sub OnPointYChanging(value As Single)
    End Sub
    Partial Private Sub OnPointYChanged()
    End Sub
    Partial Private Sub OnPointOptChanging(value As Integer)
    End Sub
    Partial Private Sub OnPointOptChanged()
    End Sub
    Partial Private Sub OnMoneyAtMaxLevelChanging(value As Integer)
    End Sub
    Partial Private Sub OnMoneyAtMaxLevelChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As Short)
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_NextQuest", DbType:="Int NOT NULL")>  _
	Public Property NextQuest() As Integer
		Get
			Return Me._NextQuest
		End Get
		Set
			If ((Me._NextQuest = value)  _
						= false) Then
				Me.OnNextQuestChanging(value)
				Me.SendPropertyChanging
				Me._NextQuest = value
				Me.SendPropertyChanged("NextQuest")
				Me.OnNextQuestChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Title", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Zone", DbType:="Int NOT NULL")>  _
	Public Property Zone() As Integer
		Get
			Return Me._Zone
		End Get
		Set
			If ((Me._Zone = value)  _
						= false) Then
				Me.OnZoneChanging(value)
				Me.SendPropertyChanging
				Me._Zone = value
				Me.SendPropertyChanged("Zone")
				Me.OnZoneChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Type", DbType:="Int NOT NULL")>  _
	Public Property Type() As Integer
		Get
			Return Me._Type
		End Get
		Set
			If ((Me._Type = value)  _
						= false) Then
				Me.OnTypeChanging(value)
				Me.SendPropertyChanging
				Me._Type = value
				Me.SendPropertyChanged("Type")
				Me.OnTypeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Flags", DbType:="Int NOT NULL")>  _
	Public Property Flags() As Integer
		Get
			Return Me._Flags
		End Get
		Set
			If ((Me._Flags = value)  _
						= false) Then
				Me.OnFlagsChanging(value)
				Me.SendPropertyChanging
				Me._Flags = value
				Me.SendPropertyChanged("Flags")
				Me.OnFlagsChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RewTitleId", DbType:="Int NOT NULL")>  _
	Public Property RewTitleId() As Integer
		Get
			Return Me._RewTitleId
		End Get
		Set
			If ((Me._RewTitleId = value)  _
						= false) Then
				Me.OnRewTitleIdChanging(value)
				Me.SendPropertyChanging
				Me._RewTitleId = value
				Me.SendPropertyChanged("RewTitleId")
				Me.OnRewTitleIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_rewtalents", DbType:="Int NOT NULL")>  _
	Public Property rewtalents() As Integer
		Get
			Return Me._rewtalents
		End Get
		Set
			If ((Me._rewtalents = value)  _
						= false) Then
				Me.OnrewtalentsChanging(value)
				Me.SendPropertyChanging
				Me._rewtalents = value
				Me.SendPropertyChanged("rewtalents")
				Me.OnrewtalentsChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_SpecialFlags", DbType:="Int NOT NULL")>  _
	Public Property SpecialFlags() As Integer
		Get
			Return Me._SpecialFlags
		End Get
		Set
			If ((Me._SpecialFlags = value)  _
						= false) Then
				Me.OnSpecialFlagsChanging(value)
				Me.SendPropertyChanging
				Me._SpecialFlags = value
				Me.SendPropertyChanged("SpecialFlags")
				Me.OnSpecialFlagsChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Level_Start", DbType:="SmallInt NOT NULL")>  _
	Public Property Level_Start() As Short
		Get
			Return Me._Level_Start
		End Get
		Set
			If ((Me._Level_Start = value)  _
						= false) Then
				Me.OnLevel_StartChanging(value)
				Me.SendPropertyChanging
				Me._Level_Start = value
				Me.SendPropertyChanged("Level_Start")
				Me.OnLevel_StartChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Level_Normal", DbType:="SmallInt NOT NULL")>  _
	Public Property Level_Normal() As Short
		Get
			Return Me._Level_Normal
		End Get
		Set
			If ((Me._Level_Normal = value)  _
						= false) Then
				Me.OnLevel_NormalChanging(value)
				Me.SendPropertyChanging
				Me._Level_Normal = value
				Me.SendPropertyChanged("Level_Normal")
				Me.OnLevel_NormalChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Required_Quest1", DbType:="Int NOT NULL")>  _
	Public Property Required_Quest1() As Integer
		Get
			Return Me._Required_Quest1
		End Get
		Set
			If ((Me._Required_Quest1 = value)  _
						= false) Then
				Me.OnRequired_Quest1Changing(value)
				Me.SendPropertyChanging
				Me._Required_Quest1 = value
				Me.SendPropertyChanged("Required_Quest1")
				Me.OnRequired_Quest1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_Required_Quest2", DbType:="Int NOT NULL")>  _
	Public Property Required_Quest2() As Integer
		Get
			Return Me._Required_Quest2
		End Get
		Set
			If ((Me._Required_Quest2 = value)  _
						= false) Then
				Me.OnRequired_Quest2Changing(value)
				Me.SendPropertyChanging
				Me._Required_Quest2 = value
				Me.SendPropertyChanged("Required_Quest2")
				Me.OnRequired_Quest2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_Required_Quest3", DbType:="Int NOT NULL")>  _
	Public Property Required_Quest3() As Integer
		Get
			Return Me._Required_Quest3
		End Get
		Set
			If ((Me._Required_Quest3 = value)  _
						= false) Then
				Me.OnRequired_Quest3Changing(value)
				Me.SendPropertyChanging
				Me._Required_Quest3 = value
				Me.SendPropertyChanged("Required_Quest3")
				Me.OnRequired_Quest3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_Required_Quest4", DbType:="Int NOT NULL")>  _
	Public Property Required_Quest4() As Integer
		Get
			Return Me._Required_Quest4
		End Get
		Set
			If ((Me._Required_Quest4 = value)  _
						= false) Then
				Me.OnRequired_Quest4Changing(value)
				Me.SendPropertyChanging
				Me._Required_Quest4 = value
				Me.SendPropertyChanged("Required_Quest4")
				Me.OnRequired_Quest4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_Required_Race", DbType:="Int NOT NULL")>  _
	Public Property Required_Race() As Integer
		Get
			Return Me._Required_Race
		End Get
		Set
			If ((Me._Required_Race = value)  _
						= false) Then
				Me.OnRequired_RaceChanging(value)
				Me.SendPropertyChanging
				Me._Required_Race = value
				Me.SendPropertyChanged("Required_Race")
				Me.OnRequired_RaceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Required_Class", DbType:="Int NOT NULL")>  _
	Public Property Required_Class() As Integer
		Get
			Return Me._Required_Class
		End Get
		Set
			If ((Me._Required_Class = value)  _
						= false) Then
				Me.OnRequired_ClassChanging(value)
				Me.SendPropertyChanging
				Me._Required_Class = value
				Me.SendPropertyChanged("Required_Class")
				Me.OnRequired_ClassChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Required_TradeSkill", DbType:="Int NOT NULL")>  _
	Public Property Required_TradeSkill() As Integer
		Get
			Return Me._Required_TradeSkill
		End Get
		Set
			If ((Me._Required_TradeSkill = value)  _
						= false) Then
				Me.OnRequired_TradeSkillChanging(value)
				Me.SendPropertyChanging
				Me._Required_TradeSkill = value
				Me.SendPropertyChanged("Required_TradeSkill")
				Me.OnRequired_TradeSkillChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Required_TradeSkillValue", DbType:="Int NOT NULL")>  _
	Public Property Required_TradeSkillValue() As Integer
		Get
			Return Me._Required_TradeSkillValue
		End Get
		Set
			If ((Me._Required_TradeSkillValue = value)  _
						= false) Then
				Me.OnRequired_TradeSkillValueChanging(value)
				Me.SendPropertyChanging
				Me._Required_TradeSkillValue = value
				Me.SendPropertyChanged("Required_TradeSkillValue")
				Me.OnRequired_TradeSkillValueChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Required_Reputation1", DbType:="Int NOT NULL")>  _
	Public Property Required_Reputation1() As Integer
		Get
			Return Me._Required_Reputation1
		End Get
		Set
			If ((Me._Required_Reputation1 = value)  _
						= false) Then
				Me.OnRequired_Reputation1Changing(value)
				Me.SendPropertyChanging
				Me._Required_Reputation1 = value
				Me.SendPropertyChanged("Required_Reputation1")
				Me.OnRequired_Reputation1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_Required_Reputation1_Faction", DbType:="Int NOT NULL")>  _
	Public Property Required_Reputation1_Faction() As Integer
		Get
			Return Me._Required_Reputation1_Faction
		End Get
		Set
			If ((Me._Required_Reputation1_Faction = value)  _
						= false) Then
				Me.OnRequired_Reputation1_FactionChanging(value)
				Me.SendPropertyChanging
				Me._Required_Reputation1_Faction = value
				Me.SendPropertyChanged("Required_Reputation1_Faction")
				Me.OnRequired_Reputation1_FactionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Required_Reputation2", DbType:="Int NOT NULL")>  _
	Public Property Required_Reputation2() As Integer
		Get
			Return Me._Required_Reputation2
		End Get
		Set
			If ((Me._Required_Reputation2 = value)  _
						= false) Then
				Me.OnRequired_Reputation2Changing(value)
				Me.SendPropertyChanging
				Me._Required_Reputation2 = value
				Me.SendPropertyChanged("Required_Reputation2")
				Me.OnRequired_Reputation2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_Required_Reputation2_Faction", DbType:="Int NOT NULL")>  _
	Public Property Required_Reputation2_Faction() As Integer
		Get
			Return Me._Required_Reputation2_Faction
		End Get
		Set
			If ((Me._Required_Reputation2_Faction = value)  _
						= false) Then
				Me.OnRequired_Reputation2_FactionChanging(value)
				Me.SendPropertyChanging
				Me._Required_Reputation2_Faction = value
				Me.SendPropertyChanged("Required_Reputation2_Faction")
				Me.OnRequired_Reputation2_FactionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Text_Objectives", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Text_Objectives() As String
		Get
			Return Me._Text_Objectives
		End Get
		Set
			If (String.Equals(Me._Text_Objectives, value) = false) Then
				Me.OnText_ObjectivesChanging(value)
				Me.SendPropertyChanging
				Me._Text_Objectives = value
				Me.SendPropertyChanged("Text_Objectives")
				Me.OnText_ObjectivesChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Text_Description", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Text_Description() As String
		Get
			Return Me._Text_Description
		End Get
		Set
			If (String.Equals(Me._Text_Description, value) = false) Then
				Me.OnText_DescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Text_Description = value
				Me.SendPropertyChanged("Text_Description")
				Me.OnText_DescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Text_End", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Text_End() As String
		Get
			Return Me._Text_End
		End Get
		Set
			If (String.Equals(Me._Text_End, value) = false) Then
				Me.OnText_EndChanging(value)
				Me.SendPropertyChanging
				Me._Text_End = value
				Me.SendPropertyChanged("Text_End")
				Me.OnText_EndChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Text_Incomplete", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Text_Incomplete() As String
		Get
			Return Me._Text_Incomplete
		End Get
		Set
			If (String.Equals(Me._Text_Incomplete, value) = false) Then
				Me.OnText_IncompleteChanging(value)
				Me.SendPropertyChanging
				Me._Text_Incomplete = value
				Me.SendPropertyChanged("Text_Incomplete")
				Me.OnText_IncompleteChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Text_Complete", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Text_Complete() As String
		Get
			Return Me._Text_Complete
		End Get
		Set
			If (String.Equals(Me._Text_Complete, value) = false) Then
				Me.OnText_CompleteChanging(value)
				Me.SendPropertyChanging
				Me._Text_Complete = value
				Me.SendPropertyChanged("Text_Complete")
				Me.OnText_CompleteChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Reward_XP", DbType:="Int NOT NULL")>  _
	Public Property Reward_XP() As Integer
		Get
			Return Me._Reward_XP
		End Get
		Set
			If ((Me._Reward_XP = value)  _
						= false) Then
				Me.OnReward_XPChanging(value)
				Me.SendPropertyChanging
				Me._Reward_XP = value
				Me.SendPropertyChanged("Reward_XP")
				Me.OnReward_XPChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Reward_Gold", DbType:="Int NOT NULL")>  _
	Public Property Reward_Gold() As Integer
		Get
			Return Me._Reward_Gold
		End Get
		Set
			If ((Me._Reward_Gold = value)  _
						= false) Then
				Me.OnReward_GoldChanging(value)
				Me.SendPropertyChanging
				Me._Reward_Gold = value
				Me.SendPropertyChanged("Reward_Gold")
				Me.OnReward_GoldChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Reward_Spell", DbType:="Int NOT NULL")>  _
	Public Property Reward_Spell() As Integer
		Get
			Return Me._Reward_Spell
		End Get
		Set
			If ((Me._Reward_Spell = value)  _
						= false) Then
				Me.OnReward_SpellChanging(value)
				Me.SendPropertyChanging
				Me._Reward_Spell = value
				Me.SendPropertyChanged("Reward_Spell")
				Me.OnReward_SpellChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Reward_SpellCast", DbType:="Int NOT NULL")>  _
	Public Property Reward_SpellCast() As Integer
		Get
			Return Me._Reward_SpellCast
		End Get
		Set
			If ((Me._Reward_SpellCast = value)  _
						= false) Then
				Me.OnReward_SpellCastChanging(value)
				Me.SendPropertyChanging
				Me._Reward_SpellCast = value
				Me.SendPropertyChanged("Reward_SpellCast")
				Me.OnReward_SpellCastChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Reward_Reputation1", DbType:="Int NOT NULL")>  _
	Public Property Reward_Reputation1() As Integer
		Get
			Return Me._Reward_Reputation1
		End Get
		Set
			If ((Me._Reward_Reputation1 = value)  _
						= false) Then
				Me.OnReward_Reputation1Changing(value)
				Me.SendPropertyChanging
				Me._Reward_Reputation1 = value
				Me.SendPropertyChanged("Reward_Reputation1")
				Me.OnReward_Reputation1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_Reward_Reputation1_Faction", DbType:="Int NOT NULL")>  _
	Public Property Reward_Reputation1_Faction() As Integer
		Get
			Return Me._Reward_Reputation1_Faction
		End Get
		Set
			If ((Me._Reward_Reputation1_Faction = value)  _
						= false) Then
				Me.OnReward_Reputation1_FactionChanging(value)
				Me.SendPropertyChanging
				Me._Reward_Reputation1_Faction = value
				Me.SendPropertyChanged("Reward_Reputation1_Faction")
				Me.OnReward_Reputation1_FactionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Reward_Reputation2", DbType:="Int NOT NULL")>  _
	Public Property Reward_Reputation2() As Integer
		Get
			Return Me._Reward_Reputation2
		End Get
		Set
			If ((Me._Reward_Reputation2 = value)  _
						= false) Then
				Me.OnReward_Reputation2Changing(value)
				Me.SendPropertyChanging
				Me._Reward_Reputation2 = value
				Me.SendPropertyChanged("Reward_Reputation2")
				Me.OnReward_Reputation2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_Reward_Reputation2_Faction", DbType:="Int NOT NULL")>  _
	Public Property Reward_Reputation2_Faction() As Integer
		Get
			Return Me._Reward_Reputation2_Faction
		End Get
		Set
			If ((Me._Reward_Reputation2_Faction = value)  _
						= false) Then
				Me.OnReward_Reputation2_FactionChanging(value)
				Me.SendPropertyChanging
				Me._Reward_Reputation2_Faction = value
				Me.SendPropertyChanged("Reward_Reputation2_Faction")
				Me.OnReward_Reputation2_FactionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Reward_Reputation3", DbType:="Int NOT NULL")>  _
	Public Property Reward_Reputation3() As Integer
		Get
			Return Me._Reward_Reputation3
		End Get
		Set
			If ((Me._Reward_Reputation3 = value)  _
						= false) Then
				Me.OnReward_Reputation3Changing(value)
				Me.SendPropertyChanging
				Me._Reward_Reputation3 = value
				Me.SendPropertyChanged("Reward_Reputation3")
				Me.OnReward_Reputation3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_Reward_Reputation3_Faction", DbType:="Int NOT NULL")>  _
	Public Property Reward_Reputation3_Faction() As Integer
		Get
			Return Me._Reward_Reputation3_Faction
		End Get
		Set
			If ((Me._Reward_Reputation3_Faction = value)  _
						= false) Then
				Me.OnReward_Reputation3_FactionChanging(value)
				Me.SendPropertyChanging
				Me._Reward_Reputation3_Faction = value
				Me.SendPropertyChanged("Reward_Reputation3_Faction")
				Me.OnReward_Reputation3_FactionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Reward_Item1", DbType:="Int NOT NULL")>  _
	Public Property Reward_Item1() As Integer
		Get
			Return Me._Reward_Item1
		End Get
		Set
			If ((Me._Reward_Item1 = value)  _
						= false) Then
				Me.OnReward_Item1Changing(value)
				Me.SendPropertyChanging
				Me._Reward_Item1 = value
				Me.SendPropertyChanged("Reward_Item1")
				Me.OnReward_Item1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_Reward_Item1_Count", DbType:="SmallInt NOT NULL")>  _
	Public Property Reward_Item1_Count() As Short
		Get
			Return Me._Reward_Item1_Count
		End Get
		Set
			If ((Me._Reward_Item1_Count = value)  _
						= false) Then
				Me.OnReward_Item1_CountChanging(value)
				Me.SendPropertyChanging
				Me._Reward_Item1_Count = value
				Me.SendPropertyChanged("Reward_Item1_Count")
				Me.OnReward_Item1_CountChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Reward_Item2", DbType:="Int NOT NULL")>  _
	Public Property Reward_Item2() As Integer
		Get
			Return Me._Reward_Item2
		End Get
		Set
			If ((Me._Reward_Item2 = value)  _
						= false) Then
				Me.OnReward_Item2Changing(value)
				Me.SendPropertyChanging
				Me._Reward_Item2 = value
				Me.SendPropertyChanged("Reward_Item2")
				Me.OnReward_Item2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_Reward_Item2_Count", DbType:="SmallInt NOT NULL")>  _
	Public Property Reward_Item2_Count() As Short
		Get
			Return Me._Reward_Item2_Count
		End Get
		Set
			If ((Me._Reward_Item2_Count = value)  _
						= false) Then
				Me.OnReward_Item2_CountChanging(value)
				Me.SendPropertyChanging
				Me._Reward_Item2_Count = value
				Me.SendPropertyChanged("Reward_Item2_Count")
				Me.OnReward_Item2_CountChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Reward_Item3", DbType:="Int NOT NULL")>  _
	Public Property Reward_Item3() As Integer
		Get
			Return Me._Reward_Item3
		End Get
		Set
			If ((Me._Reward_Item3 = value)  _
						= false) Then
				Me.OnReward_Item3Changing(value)
				Me.SendPropertyChanging
				Me._Reward_Item3 = value
				Me.SendPropertyChanged("Reward_Item3")
				Me.OnReward_Item3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_Reward_Item3_Count", DbType:="SmallInt NOT NULL")>  _
	Public Property Reward_Item3_Count() As Short
		Get
			Return Me._Reward_Item3_Count
		End Get
		Set
			If ((Me._Reward_Item3_Count = value)  _
						= false) Then
				Me.OnReward_Item3_CountChanging(value)
				Me.SendPropertyChanging
				Me._Reward_Item3_Count = value
				Me.SendPropertyChanged("Reward_Item3_Count")
				Me.OnReward_Item3_CountChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Reward_Item4", DbType:="Int NOT NULL")>  _
	Public Property Reward_Item4() As Integer
		Get
			Return Me._Reward_Item4
		End Get
		Set
			If ((Me._Reward_Item4 = value)  _
						= false) Then
				Me.OnReward_Item4Changing(value)
				Me.SendPropertyChanging
				Me._Reward_Item4 = value
				Me.SendPropertyChanged("Reward_Item4")
				Me.OnReward_Item4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_Reward_Item4_Count", DbType:="SmallInt NOT NULL")>  _
	Public Property Reward_Item4_Count() As Short
		Get
			Return Me._Reward_Item4_Count
		End Get
		Set
			If ((Me._Reward_Item4_Count = value)  _
						= false) Then
				Me.OnReward_Item4_CountChanging(value)
				Me.SendPropertyChanging
				Me._Reward_Item4_Count = value
				Me.SendPropertyChanged("Reward_Item4_Count")
				Me.OnReward_Item4_CountChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Reward_Item5", DbType:="Int NOT NULL")>  _
	Public Property Reward_Item5() As Integer
		Get
			Return Me._Reward_Item5
		End Get
		Set
			If ((Me._Reward_Item5 = value)  _
						= false) Then
				Me.OnReward_Item5Changing(value)
				Me.SendPropertyChanging
				Me._Reward_Item5 = value
				Me.SendPropertyChanged("Reward_Item5")
				Me.OnReward_Item5Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_Reward_Item5_Count", DbType:="SmallInt NOT NULL")>  _
	Public Property Reward_Item5_Count() As Short
		Get
			Return Me._Reward_Item5_Count
		End Get
		Set
			If ((Me._Reward_Item5_Count = value)  _
						= false) Then
				Me.OnReward_Item5_CountChanging(value)
				Me.SendPropertyChanging
				Me._Reward_Item5_Count = value
				Me.SendPropertyChanged("Reward_Item5_Count")
				Me.OnReward_Item5_CountChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Reward_Item6", DbType:="Int NOT NULL")>  _
	Public Property Reward_Item6() As Integer
		Get
			Return Me._Reward_Item6
		End Get
		Set
			If ((Me._Reward_Item6 = value)  _
						= false) Then
				Me.OnReward_Item6Changing(value)
				Me.SendPropertyChanging
				Me._Reward_Item6 = value
				Me.SendPropertyChanged("Reward_Item6")
				Me.OnReward_Item6Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_Reward_Item6_Count", DbType:="SmallInt NOT NULL")>  _
	Public Property Reward_Item6_Count() As Short
		Get
			Return Me._Reward_Item6_Count
		End Get
		Set
			If ((Me._Reward_Item6_Count = value)  _
						= false) Then
				Me.OnReward_Item6_CountChanging(value)
				Me.SendPropertyChanging
				Me._Reward_Item6_Count = value
				Me.SendPropertyChanged("Reward_Item6_Count")
				Me.OnReward_Item6_CountChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Reward_StaticItem1", DbType:="Int NOT NULL")>  _
	Public Property Reward_StaticItem1() As Integer
		Get
			Return Me._Reward_StaticItem1
		End Get
		Set
			If ((Me._Reward_StaticItem1 = value)  _
						= false) Then
				Me.OnReward_StaticItem1Changing(value)
				Me.SendPropertyChanging
				Me._Reward_StaticItem1 = value
				Me.SendPropertyChanged("Reward_StaticItem1")
				Me.OnReward_StaticItem1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_Reward_StaticItem1_Count", DbType:="SmallInt NOT NULL")>  _
	Public Property Reward_StaticItem1_Count() As Short
		Get
			Return Me._Reward_StaticItem1_Count
		End Get
		Set
			If ((Me._Reward_StaticItem1_Count = value)  _
						= false) Then
				Me.OnReward_StaticItem1_CountChanging(value)
				Me.SendPropertyChanging
				Me._Reward_StaticItem1_Count = value
				Me.SendPropertyChanged("Reward_StaticItem1_Count")
				Me.OnReward_StaticItem1_CountChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Reward_StaticItem2", DbType:="Int NOT NULL")>  _
	Public Property Reward_StaticItem2() As Integer
		Get
			Return Me._Reward_StaticItem2
		End Get
		Set
			If ((Me._Reward_StaticItem2 = value)  _
						= false) Then
				Me.OnReward_StaticItem2Changing(value)
				Me.SendPropertyChanging
				Me._Reward_StaticItem2 = value
				Me.SendPropertyChanged("Reward_StaticItem2")
				Me.OnReward_StaticItem2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_Reward_StaticItem2_Count", DbType:="SmallInt NOT NULL")>  _
	Public Property Reward_StaticItem2_Count() As Short
		Get
			Return Me._Reward_StaticItem2_Count
		End Get
		Set
			If ((Me._Reward_StaticItem2_Count = value)  _
						= false) Then
				Me.OnReward_StaticItem2_CountChanging(value)
				Me.SendPropertyChanging
				Me._Reward_StaticItem2_Count = value
				Me.SendPropertyChanged("Reward_StaticItem2_Count")
				Me.OnReward_StaticItem2_CountChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Reward_StaticItem3", DbType:="Int NOT NULL")>  _
	Public Property Reward_StaticItem3() As Integer
		Get
			Return Me._Reward_StaticItem3
		End Get
		Set
			If ((Me._Reward_StaticItem3 = value)  _
						= false) Then
				Me.OnReward_StaticItem3Changing(value)
				Me.SendPropertyChanging
				Me._Reward_StaticItem3 = value
				Me.SendPropertyChanged("Reward_StaticItem3")
				Me.OnReward_StaticItem3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_Reward_StaticItem3_Count", DbType:="SmallInt NOT NULL")>  _
	Public Property Reward_StaticItem3_Count() As Short
		Get
			Return Me._Reward_StaticItem3_Count
		End Get
		Set
			If ((Me._Reward_StaticItem3_Count = value)  _
						= false) Then
				Me.OnReward_StaticItem3_CountChanging(value)
				Me.SendPropertyChanging
				Me._Reward_StaticItem3_Count = value
				Me.SendPropertyChanged("Reward_StaticItem3_Count")
				Me.OnReward_StaticItem3_CountChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Reward_StaticItem4", DbType:="Int NOT NULL")>  _
	Public Property Reward_StaticItem4() As Integer
		Get
			Return Me._Reward_StaticItem4
		End Get
		Set
			If ((Me._Reward_StaticItem4 = value)  _
						= false) Then
				Me.OnReward_StaticItem4Changing(value)
				Me.SendPropertyChanging
				Me._Reward_StaticItem4 = value
				Me.SendPropertyChanged("Reward_StaticItem4")
				Me.OnReward_StaticItem4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_Reward_StaticItem4_Count", DbType:="SmallInt NOT NULL")>  _
	Public Property Reward_StaticItem4_Count() As Short
		Get
			Return Me._Reward_StaticItem4_Count
		End Get
		Set
			If ((Me._Reward_StaticItem4_Count = value)  _
						= false) Then
				Me.OnReward_StaticItem4_CountChanging(value)
				Me.SendPropertyChanging
				Me._Reward_StaticItem4_Count = value
				Me.SendPropertyChanged("Reward_StaticItem4_Count")
				Me.OnReward_StaticItem4_CountChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Time_Limit", DbType:="Int NOT NULL")>  _
	Public Property Time_Limit() As Integer
		Get
			Return Me._Time_Limit
		End Get
		Set
			If ((Me._Time_Limit = value)  _
						= false) Then
				Me.OnTime_LimitChanging(value)
				Me.SendPropertyChanging
				Me._Time_Limit = value
				Me.SendPropertyChanged("Time_Limit")
				Me.OnTime_LimitChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Objective_Trigger1", DbType:="Int NOT NULL")>  _
	Public Property Objective_Trigger1() As Integer
		Get
			Return Me._Objective_Trigger1
		End Get
		Set
			If ((Me._Objective_Trigger1 = value)  _
						= false) Then
				Me.OnObjective_Trigger1Changing(value)
				Me.SendPropertyChanging
				Me._Objective_Trigger1 = value
				Me.SendPropertyChanged("Objective_Trigger1")
				Me.OnObjective_Trigger1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_Objective_Trigger2", DbType:="Int NOT NULL")>  _
	Public Property Objective_Trigger2() As Integer
		Get
			Return Me._Objective_Trigger2
		End Get
		Set
			If ((Me._Objective_Trigger2 = value)  _
						= false) Then
				Me.OnObjective_Trigger2Changing(value)
				Me.SendPropertyChanging
				Me._Objective_Trigger2 = value
				Me.SendPropertyChanged("Objective_Trigger2")
				Me.OnObjective_Trigger2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_Objective_Trigger3", DbType:="Int NOT NULL")>  _
	Public Property Objective_Trigger3() As Integer
		Get
			Return Me._Objective_Trigger3
		End Get
		Set
			If ((Me._Objective_Trigger3 = value)  _
						= false) Then
				Me.OnObjective_Trigger3Changing(value)
				Me.SendPropertyChanging
				Me._Objective_Trigger3 = value
				Me.SendPropertyChanged("Objective_Trigger3")
				Me.OnObjective_Trigger3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_Objective_Trigger4", DbType:="Int NOT NULL")>  _
	Public Property Objective_Trigger4() As Integer
		Get
			Return Me._Objective_Trigger4
		End Get
		Set
			If ((Me._Objective_Trigger4 = value)  _
						= false) Then
				Me.OnObjective_Trigger4Changing(value)
				Me.SendPropertyChanging
				Me._Objective_Trigger4 = value
				Me.SendPropertyChanged("Objective_Trigger4")
				Me.OnObjective_Trigger4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_Objective_Cast1", DbType:="Int NOT NULL")>  _
	Public Property Objective_Cast1() As Integer
		Get
			Return Me._Objective_Cast1
		End Get
		Set
			If ((Me._Objective_Cast1 = value)  _
						= false) Then
				Me.OnObjective_Cast1Changing(value)
				Me.SendPropertyChanging
				Me._Objective_Cast1 = value
				Me.SendPropertyChanged("Objective_Cast1")
				Me.OnObjective_Cast1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_Objective_Cast2", DbType:="Int NOT NULL")>  _
	Public Property Objective_Cast2() As Integer
		Get
			Return Me._Objective_Cast2
		End Get
		Set
			If ((Me._Objective_Cast2 = value)  _
						= false) Then
				Me.OnObjective_Cast2Changing(value)
				Me.SendPropertyChanging
				Me._Objective_Cast2 = value
				Me.SendPropertyChanged("Objective_Cast2")
				Me.OnObjective_Cast2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_Objective_Cast3", DbType:="Int NOT NULL")>  _
	Public Property Objective_Cast3() As Integer
		Get
			Return Me._Objective_Cast3
		End Get
		Set
			If ((Me._Objective_Cast3 = value)  _
						= false) Then
				Me.OnObjective_Cast3Changing(value)
				Me.SendPropertyChanging
				Me._Objective_Cast3 = value
				Me.SendPropertyChanged("Objective_Cast3")
				Me.OnObjective_Cast3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_Objective_Cast4", DbType:="Int NOT NULL")>  _
	Public Property Objective_Cast4() As Integer
		Get
			Return Me._Objective_Cast4
		End Get
		Set
			If ((Me._Objective_Cast4 = value)  _
						= false) Then
				Me.OnObjective_Cast4Changing(value)
				Me.SendPropertyChanging
				Me._Objective_Cast4 = value
				Me.SendPropertyChanged("Objective_Cast4")
				Me.OnObjective_Cast4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_Objective_Kill1", DbType:="Int NOT NULL")>  _
	Public Property Objective_Kill1() As Integer
		Get
			Return Me._Objective_Kill1
		End Get
		Set
			If ((Me._Objective_Kill1 = value)  _
						= false) Then
				Me.OnObjective_Kill1Changing(value)
				Me.SendPropertyChanging
				Me._Objective_Kill1 = value
				Me.SendPropertyChanged("Objective_Kill1")
				Me.OnObjective_Kill1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_Objective_Kill1_Count", DbType:="SmallInt NOT NULL")>  _
	Public Property Objective_Kill1_Count() As Short
		Get
			Return Me._Objective_Kill1_Count
		End Get
		Set
			If ((Me._Objective_Kill1_Count = value)  _
						= false) Then
				Me.OnObjective_Kill1_CountChanging(value)
				Me.SendPropertyChanging
				Me._Objective_Kill1_Count = value
				Me.SendPropertyChanged("Objective_Kill1_Count")
				Me.OnObjective_Kill1_CountChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Objective_Kill2", DbType:="Int NOT NULL")>  _
	Public Property Objective_Kill2() As Integer
		Get
			Return Me._Objective_Kill2
		End Get
		Set
			If ((Me._Objective_Kill2 = value)  _
						= false) Then
				Me.OnObjective_Kill2Changing(value)
				Me.SendPropertyChanging
				Me._Objective_Kill2 = value
				Me.SendPropertyChanged("Objective_Kill2")
				Me.OnObjective_Kill2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_Objective_Kill2_Count", DbType:="SmallInt NOT NULL")>  _
	Public Property Objective_Kill2_Count() As Short
		Get
			Return Me._Objective_Kill2_Count
		End Get
		Set
			If ((Me._Objective_Kill2_Count = value)  _
						= false) Then
				Me.OnObjective_Kill2_CountChanging(value)
				Me.SendPropertyChanging
				Me._Objective_Kill2_Count = value
				Me.SendPropertyChanged("Objective_Kill2_Count")
				Me.OnObjective_Kill2_CountChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Objective_Kill3", DbType:="Int NOT NULL")>  _
	Public Property Objective_Kill3() As Integer
		Get
			Return Me._Objective_Kill3
		End Get
		Set
			If ((Me._Objective_Kill3 = value)  _
						= false) Then
				Me.OnObjective_Kill3Changing(value)
				Me.SendPropertyChanging
				Me._Objective_Kill3 = value
				Me.SendPropertyChanged("Objective_Kill3")
				Me.OnObjective_Kill3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_Objective_Kill3_Count", DbType:="SmallInt NOT NULL")>  _
	Public Property Objective_Kill3_Count() As Short
		Get
			Return Me._Objective_Kill3_Count
		End Get
		Set
			If ((Me._Objective_Kill3_Count = value)  _
						= false) Then
				Me.OnObjective_Kill3_CountChanging(value)
				Me.SendPropertyChanging
				Me._Objective_Kill3_Count = value
				Me.SendPropertyChanged("Objective_Kill3_Count")
				Me.OnObjective_Kill3_CountChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Objective_Kill4", DbType:="Int NOT NULL")>  _
	Public Property Objective_Kill4() As Integer
		Get
			Return Me._Objective_Kill4
		End Get
		Set
			If ((Me._Objective_Kill4 = value)  _
						= false) Then
				Me.OnObjective_Kill4Changing(value)
				Me.SendPropertyChanging
				Me._Objective_Kill4 = value
				Me.SendPropertyChanged("Objective_Kill4")
				Me.OnObjective_Kill4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_Objective_Kill4_Count", DbType:="SmallInt NOT NULL")>  _
	Public Property Objective_Kill4_Count() As Short
		Get
			Return Me._Objective_Kill4_Count
		End Get
		Set
			If ((Me._Objective_Kill4_Count = value)  _
						= false) Then
				Me.OnObjective_Kill4_CountChanging(value)
				Me.SendPropertyChanging
				Me._Objective_Kill4_Count = value
				Me.SendPropertyChanged("Objective_Kill4_Count")
				Me.OnObjective_Kill4_CountChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Objective_Item1", DbType:="Int NOT NULL")>  _
	Public Property Objective_Item1() As Integer
		Get
			Return Me._Objective_Item1
		End Get
		Set
			If ((Me._Objective_Item1 = value)  _
						= false) Then
				Me.OnObjective_Item1Changing(value)
				Me.SendPropertyChanging
				Me._Objective_Item1 = value
				Me.SendPropertyChanged("Objective_Item1")
				Me.OnObjective_Item1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_Objective_Item1_Count", DbType:="SmallInt NOT NULL")>  _
	Public Property Objective_Item1_Count() As Short
		Get
			Return Me._Objective_Item1_Count
		End Get
		Set
			If ((Me._Objective_Item1_Count = value)  _
						= false) Then
				Me.OnObjective_Item1_CountChanging(value)
				Me.SendPropertyChanging
				Me._Objective_Item1_Count = value
				Me.SendPropertyChanged("Objective_Item1_Count")
				Me.OnObjective_Item1_CountChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Objective_Item2", DbType:="Int NOT NULL")>  _
	Public Property Objective_Item2() As Integer
		Get
			Return Me._Objective_Item2
		End Get
		Set
			If ((Me._Objective_Item2 = value)  _
						= false) Then
				Me.OnObjective_Item2Changing(value)
				Me.SendPropertyChanging
				Me._Objective_Item2 = value
				Me.SendPropertyChanged("Objective_Item2")
				Me.OnObjective_Item2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_Objective_Item2_Count", DbType:="SmallInt NOT NULL")>  _
	Public Property Objective_Item2_Count() As Short
		Get
			Return Me._Objective_Item2_Count
		End Get
		Set
			If ((Me._Objective_Item2_Count = value)  _
						= false) Then
				Me.OnObjective_Item2_CountChanging(value)
				Me.SendPropertyChanging
				Me._Objective_Item2_Count = value
				Me.SendPropertyChanged("Objective_Item2_Count")
				Me.OnObjective_Item2_CountChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Objective_Item3", DbType:="Int NOT NULL")>  _
	Public Property Objective_Item3() As Integer
		Get
			Return Me._Objective_Item3
		End Get
		Set
			If ((Me._Objective_Item3 = value)  _
						= false) Then
				Me.OnObjective_Item3Changing(value)
				Me.SendPropertyChanging
				Me._Objective_Item3 = value
				Me.SendPropertyChanged("Objective_Item3")
				Me.OnObjective_Item3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_Objective_Item3_Count", DbType:="SmallInt NOT NULL")>  _
	Public Property Objective_Item3_Count() As Short
		Get
			Return Me._Objective_Item3_Count
		End Get
		Set
			If ((Me._Objective_Item3_Count = value)  _
						= false) Then
				Me.OnObjective_Item3_CountChanging(value)
				Me.SendPropertyChanging
				Me._Objective_Item3_Count = value
				Me.SendPropertyChanged("Objective_Item3_Count")
				Me.OnObjective_Item3_CountChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Objective_Item4", DbType:="Int NOT NULL")>  _
	Public Property Objective_Item4() As Integer
		Get
			Return Me._Objective_Item4
		End Get
		Set
			If ((Me._Objective_Item4 = value)  _
						= false) Then
				Me.OnObjective_Item4Changing(value)
				Me.SendPropertyChanging
				Me._Objective_Item4 = value
				Me.SendPropertyChanged("Objective_Item4")
				Me.OnObjective_Item4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_Objective_Item4_Count", DbType:="SmallInt NOT NULL")>  _
	Public Property Objective_Item4_Count() As Short
		Get
			Return Me._Objective_Item4_Count
		End Get
		Set
			If ((Me._Objective_Item4_Count = value)  _
						= false) Then
				Me.OnObjective_Item4_CountChanging(value)
				Me.SendPropertyChanging
				Me._Objective_Item4_Count = value
				Me.SendPropertyChanged("Objective_Item4_Count")
				Me.OnObjective_Item4_CountChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Objective_Deliver1", DbType:="Int NOT NULL")>  _
	Public Property Objective_Deliver1() As Integer
		Get
			Return Me._Objective_Deliver1
		End Get
		Set
			If ((Me._Objective_Deliver1 = value)  _
						= false) Then
				Me.OnObjective_Deliver1Changing(value)
				Me.SendPropertyChanging
				Me._Objective_Deliver1 = value
				Me.SendPropertyChanged("Objective_Deliver1")
				Me.OnObjective_Deliver1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_Objective_Text1", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property Objective_Text1() As String
		Get
			Return Me._Objective_Text1
		End Get
		Set
			If (String.Equals(Me._Objective_Text1, value) = false) Then
				Me.OnObjective_Text1Changing(value)
				Me.SendPropertyChanging
				Me._Objective_Text1 = value
				Me.SendPropertyChanged("Objective_Text1")
				Me.OnObjective_Text1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_Objective_Text2", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property Objective_Text2() As String
		Get
			Return Me._Objective_Text2
		End Get
		Set
			If (String.Equals(Me._Objective_Text2, value) = false) Then
				Me.OnObjective_Text2Changing(value)
				Me.SendPropertyChanging
				Me._Objective_Text2 = value
				Me.SendPropertyChanged("Objective_Text2")
				Me.OnObjective_Text2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_Objective_Text3", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property Objective_Text3() As String
		Get
			Return Me._Objective_Text3
		End Get
		Set
			If (String.Equals(Me._Objective_Text3, value) = false) Then
				Me.OnObjective_Text3Changing(value)
				Me.SendPropertyChanging
				Me._Objective_Text3 = value
				Me.SendPropertyChanged("Objective_Text3")
				Me.OnObjective_Text3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_Objective_Text4", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property Objective_Text4() As String
		Get
			Return Me._Objective_Text4
		End Get
		Set
			If (String.Equals(Me._Objective_Text4, value) = false) Then
				Me.OnObjective_Text4Changing(value)
				Me.SendPropertyChanging
				Me._Objective_Text4 = value
				Me.SendPropertyChanged("Objective_Text4")
				Me.OnObjective_Text4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_SuggestedPlayers", DbType:="SmallInt NOT NULL")>  _
	Public Property SuggestedPlayers() As Short
		Get
			Return Me._SuggestedPlayers
		End Get
		Set
			If ((Me._SuggestedPlayers = value)  _
						= false) Then
				Me.OnSuggestedPlayersChanging(value)
				Me.SendPropertyChanging
				Me._SuggestedPlayers = value
				Me.SendPropertyChanged("SuggestedPlayers")
				Me.OnSuggestedPlayersChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_PointMap", DbType:="Int NOT NULL")>  _
	Public Property PointMap() As Integer
		Get
			Return Me._PointMap
		End Get
		Set
			If ((Me._PointMap = value)  _
						= false) Then
				Me.OnPointMapChanging(value)
				Me.SendPropertyChanging
				Me._PointMap = value
				Me.SendPropertyChanged("PointMap")
				Me.OnPointMapChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_PointX", DbType:="Real NOT NULL")>  _
	Public Property PointX() As Single
		Get
			Return Me._PointX
		End Get
		Set
			If ((Me._PointX = value)  _
						= false) Then
				Me.OnPointXChanging(value)
				Me.SendPropertyChanging
				Me._PointX = value
				Me.SendPropertyChanged("PointX")
				Me.OnPointXChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_PointY", DbType:="Real NOT NULL")>  _
	Public Property PointY() As Single
		Get
			Return Me._PointY
		End Get
		Set
			If ((Me._PointY = value)  _
						= false) Then
				Me.OnPointYChanging(value)
				Me.SendPropertyChanging
				Me._PointY = value
				Me.SendPropertyChanged("PointY")
				Me.OnPointYChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_PointOpt", DbType:="Int NOT NULL")>  _
	Public Property PointOpt() As Integer
		Get
			Return Me._PointOpt
		End Get
		Set
			If ((Me._PointOpt = value)  _
						= false) Then
				Me.OnPointOptChanging(value)
				Me.SendPropertyChanging
				Me._PointOpt = value
				Me.SendPropertyChanged("PointOpt")
				Me.OnPointOptChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_MoneyAtMaxLevel", DbType:="Int NOT NULL")>  _
	Public Property MoneyAtMaxLevel() As Integer
		Get
			Return Me._MoneyAtMaxLevel
		End Get
		Set
			If ((Me._MoneyAtMaxLevel = value)  _
						= false) Then
				Me.OnMoneyAtMaxLevelChanging(value)
				Me.SendPropertyChanging
				Me._MoneyAtMaxLevel = value
				Me.SendPropertyChanged("MoneyAtMaxLevel")
				Me.OnMoneyAtMaxLevelChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IsActive", DbType:="SmallInt NOT NULL")>  _
	Public Property IsActive() As Short
		Get
			Return Me._IsActive
		End Get
		Set
			If ((Me._IsActive = value)  _
						= false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.queststarters")>  _
Partial Public Class queststarter
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _entry As Long
	
	Private _type As Integer
	
	Private _typeid As Integer
	
	Private _questid As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnentryChanging(value As Long)
    End Sub
    Partial Private Sub OnentryChanged()
    End Sub
    Partial Private Sub OntypeChanging(value As Integer)
    End Sub
    Partial Private Sub OntypeChanged()
    End Sub
    Partial Private Sub OntypeidChanging(value As Integer)
    End Sub
    Partial Private Sub OntypeidChanged()
    End Sub
    Partial Private Sub OnquestidChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnquestidChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_entry", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property entry() As Long
		Get
			Return Me._entry
		End Get
		Set
			If ((Me._entry = value)  _
						= false) Then
				Me.OnentryChanging(value)
				Me.SendPropertyChanging
				Me._entry = value
				Me.SendPropertyChanged("entry")
				Me.OnentryChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_type", DbType:="Int NOT NULL")>  _
	Public Property type() As Integer
		Get
			Return Me._type
		End Get
		Set
			If ((Me._type = value)  _
						= false) Then
				Me.OntypeChanging(value)
				Me.SendPropertyChanging
				Me._type = value
				Me.SendPropertyChanged("type")
				Me.OntypeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_typeid", DbType:="Int NOT NULL")>  _
	Public Property typeid() As Integer
		Get
			Return Me._typeid
		End Get
		Set
			If ((Me._typeid = value)  _
						= false) Then
				Me.OntypeidChanging(value)
				Me.SendPropertyChanging
				Me._typeid = value
				Me.SendPropertyChanged("typeid")
				Me.OntypeidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_questid", DbType:="Int")>  _
	Public Property questid() As System.Nullable(Of Integer)
		Get
			Return Me._questid
		End Get
		Set
			If (Me._questid.Equals(value) = false) Then
				Me.OnquestidChanging(value)
				Me.SendPropertyChanging
				Me._questid = value
				Me.SendPropertyChanged("questid")
				Me.OnquestidChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.questfinishers")>  _
Partial Public Class questfinisher
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _entry As Long
	
	Private _type As Integer
	
	Private _typeid As Integer
	
	Private _questid As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnentryChanging(value As Long)
    End Sub
    Partial Private Sub OnentryChanged()
    End Sub
    Partial Private Sub OntypeChanging(value As Integer)
    End Sub
    Partial Private Sub OntypeChanged()
    End Sub
    Partial Private Sub OntypeidChanging(value As Integer)
    End Sub
    Partial Private Sub OntypeidChanged()
    End Sub
    Partial Private Sub OnquestidChanging(value As Integer)
    End Sub
    Partial Private Sub OnquestidChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_entry", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property entry() As Long
		Get
			Return Me._entry
		End Get
		Set
			If ((Me._entry = value)  _
						= false) Then
				Me.OnentryChanging(value)
				Me.SendPropertyChanging
				Me._entry = value
				Me.SendPropertyChanged("entry")
				Me.OnentryChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_type", DbType:="Int NOT NULL")>  _
	Public Property type() As Integer
		Get
			Return Me._type
		End Get
		Set
			If ((Me._type = value)  _
						= false) Then
				Me.OntypeChanging(value)
				Me.SendPropertyChanging
				Me._type = value
				Me.SendPropertyChanged("type")
				Me.OntypeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_typeid", DbType:="Int NOT NULL")>  _
	Public Property typeid() As Integer
		Get
			Return Me._typeid
		End Get
		Set
			If ((Me._typeid = value)  _
						= false) Then
				Me.OntypeidChanging(value)
				Me.SendPropertyChanging
				Me._typeid = value
				Me.SendPropertyChanged("typeid")
				Me.OntypeidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_questid", DbType:="Int NOT NULL")>  _
	Public Property questid() As Integer
		Get
			Return Me._questid
		End Get
		Set
			If ((Me._questid = value)  _
						= false) Then
				Me.OnquestidChanging(value)
				Me.SendPropertyChanging
				Me._questid = value
				Me.SendPropertyChanged("questid")
				Me.OnquestidChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.battleground_battlemaster")>  _
Partial Public Class battleground_battlemaster
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _entry As Integer
	
	Private _battleground_entry As Short
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnentryChanging(value As Integer)
    End Sub
    Partial Private Sub OnentryChanged()
    End Sub
    Partial Private Sub Onbattleground_entryChanging(value As Short)
    End Sub
    Partial Private Sub Onbattleground_entryChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_entry", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property entry() As Integer
		Get
			Return Me._entry
		End Get
		Set
			If ((Me._entry = value)  _
						= false) Then
				Me.OnentryChanging(value)
				Me.SendPropertyChanging
				Me._entry = value
				Me.SendPropertyChanged("entry")
				Me.OnentryChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_battleground_entry", DbType:="SmallInt NOT NULL")>  _
	Public Property battleground_entry() As Short
		Get
			Return Me._battleground_entry
		End Get
		Set
			If ((Me._battleground_entry = value)  _
						= false) Then
				Me.Onbattleground_entryChanging(value)
				Me.SendPropertyChanging
				Me._battleground_entry = value
				Me.SendPropertyChanged("battleground_entry")
				Me.Onbattleground_entryChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.battleground_template")>  _
Partial Public Class battleground_template
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Short
	
	Private _Name As String
	
	Private _Type As Byte
	
	Private _Map1 As Short
	
	Private _Map2 As Short
	
	Private _Map3 As Short
	
	Private _MinPlayersPerTeam As Byte
	
	Private _MaxPlayersPerTeam As Byte
	
	Private _MinLvl As Short
	
	Private _MaxLvl As Short
	
	Private _Band As Byte
	
	Private _AllianceStartLoc As Short
	
	Private _AllianceStartO As Single
	
	Private _HordeStartLoc As Short
	
	Private _HordeStartO As Single
	
	Private _IsActive As Byte
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Short)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnTypeChanging(value As Byte)
    End Sub
    Partial Private Sub OnTypeChanged()
    End Sub
    Partial Private Sub OnMap1Changing(value As Short)
    End Sub
    Partial Private Sub OnMap1Changed()
    End Sub
    Partial Private Sub OnMap2Changing(value As Short)
    End Sub
    Partial Private Sub OnMap2Changed()
    End Sub
    Partial Private Sub OnMap3Changing(value As Short)
    End Sub
    Partial Private Sub OnMap3Changed()
    End Sub
    Partial Private Sub OnMinPlayersPerTeamChanging(value As Byte)
    End Sub
    Partial Private Sub OnMinPlayersPerTeamChanged()
    End Sub
    Partial Private Sub OnMaxPlayersPerTeamChanging(value As Byte)
    End Sub
    Partial Private Sub OnMaxPlayersPerTeamChanged()
    End Sub
    Partial Private Sub OnMinLvlChanging(value As Short)
    End Sub
    Partial Private Sub OnMinLvlChanged()
    End Sub
    Partial Private Sub OnMaxLvlChanging(value As Short)
    End Sub
    Partial Private Sub OnMaxLvlChanged()
    End Sub
    Partial Private Sub OnBandChanging(value As Byte)
    End Sub
    Partial Private Sub OnBandChanged()
    End Sub
    Partial Private Sub OnAllianceStartLocChanging(value As Short)
    End Sub
    Partial Private Sub OnAllianceStartLocChanged()
    End Sub
    Partial Private Sub OnAllianceStartOChanging(value As Single)
    End Sub
    Partial Private Sub OnAllianceStartOChanged()
    End Sub
    Partial Private Sub OnHordeStartLocChanging(value As Short)
    End Sub
    Partial Private Sub OnHordeStartLocChanged()
    End Sub
    Partial Private Sub OnHordeStartOChanging(value As Single)
    End Sub
    Partial Private Sub OnHordeStartOChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As Byte)
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="SmallInt NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Short
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Type", DbType:="TinyInt NOT NULL")>  _
	Public Property Type() As Byte
		Get
			Return Me._Type
		End Get
		Set
			If ((Me._Type = value)  _
						= false) Then
				Me.OnTypeChanging(value)
				Me.SendPropertyChanging
				Me._Type = value
				Me.SendPropertyChanged("Type")
				Me.OnTypeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Map1", DbType:="SmallInt NOT NULL")>  _
	Public Property Map1() As Short
		Get
			Return Me._Map1
		End Get
		Set
			If ((Me._Map1 = value)  _
						= false) Then
				Me.OnMap1Changing(value)
				Me.SendPropertyChanging
				Me._Map1 = value
				Me.SendPropertyChanged("Map1")
				Me.OnMap1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_Map2", DbType:="SmallInt NOT NULL")>  _
	Public Property Map2() As Short
		Get
			Return Me._Map2
		End Get
		Set
			If ((Me._Map2 = value)  _
						= false) Then
				Me.OnMap2Changing(value)
				Me.SendPropertyChanging
				Me._Map2 = value
				Me.SendPropertyChanged("Map2")
				Me.OnMap2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_Map3", DbType:="SmallInt NOT NULL")>  _
	Public Property Map3() As Short
		Get
			Return Me._Map3
		End Get
		Set
			If ((Me._Map3 = value)  _
						= false) Then
				Me.OnMap3Changing(value)
				Me.SendPropertyChanging
				Me._Map3 = value
				Me.SendPropertyChanged("Map3")
				Me.OnMap3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_MinPlayersPerTeam", DbType:="TinyInt NOT NULL")>  _
	Public Property MinPlayersPerTeam() As Byte
		Get
			Return Me._MinPlayersPerTeam
		End Get
		Set
			If ((Me._MinPlayersPerTeam = value)  _
						= false) Then
				Me.OnMinPlayersPerTeamChanging(value)
				Me.SendPropertyChanging
				Me._MinPlayersPerTeam = value
				Me.SendPropertyChanged("MinPlayersPerTeam")
				Me.OnMinPlayersPerTeamChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_MaxPlayersPerTeam", DbType:="TinyInt NOT NULL")>  _
	Public Property MaxPlayersPerTeam() As Byte
		Get
			Return Me._MaxPlayersPerTeam
		End Get
		Set
			If ((Me._MaxPlayersPerTeam = value)  _
						= false) Then
				Me.OnMaxPlayersPerTeamChanging(value)
				Me.SendPropertyChanging
				Me._MaxPlayersPerTeam = value
				Me.SendPropertyChanged("MaxPlayersPerTeam")
				Me.OnMaxPlayersPerTeamChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_MinLvl", DbType:="SmallInt NOT NULL")>  _
	Public Property MinLvl() As Short
		Get
			Return Me._MinLvl
		End Get
		Set
			If ((Me._MinLvl = value)  _
						= false) Then
				Me.OnMinLvlChanging(value)
				Me.SendPropertyChanging
				Me._MinLvl = value
				Me.SendPropertyChanged("MinLvl")
				Me.OnMinLvlChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_MaxLvl", DbType:="SmallInt NOT NULL")>  _
	Public Property MaxLvl() As Short
		Get
			Return Me._MaxLvl
		End Get
		Set
			If ((Me._MaxLvl = value)  _
						= false) Then
				Me.OnMaxLvlChanging(value)
				Me.SendPropertyChanging
				Me._MaxLvl = value
				Me.SendPropertyChanged("MaxLvl")
				Me.OnMaxLvlChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Band", DbType:="TinyInt NOT NULL")>  _
	Public Property Band() As Byte
		Get
			Return Me._Band
		End Get
		Set
			If ((Me._Band = value)  _
						= false) Then
				Me.OnBandChanging(value)
				Me.SendPropertyChanging
				Me._Band = value
				Me.SendPropertyChanged("Band")
				Me.OnBandChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_AllianceStartLoc", DbType:="SmallInt NOT NULL")>  _
	Public Property AllianceStartLoc() As Short
		Get
			Return Me._AllianceStartLoc
		End Get
		Set
			If ((Me._AllianceStartLoc = value)  _
						= false) Then
				Me.OnAllianceStartLocChanging(value)
				Me.SendPropertyChanging
				Me._AllianceStartLoc = value
				Me.SendPropertyChanged("AllianceStartLoc")
				Me.OnAllianceStartLocChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_AllianceStartO", DbType:="Real NOT NULL")>  _
	Public Property AllianceStartO() As Single
		Get
			Return Me._AllianceStartO
		End Get
		Set
			If ((Me._AllianceStartO = value)  _
						= false) Then
				Me.OnAllianceStartOChanging(value)
				Me.SendPropertyChanging
				Me._AllianceStartO = value
				Me.SendPropertyChanged("AllianceStartO")
				Me.OnAllianceStartOChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_HordeStartLoc", DbType:="SmallInt NOT NULL")>  _
	Public Property HordeStartLoc() As Short
		Get
			Return Me._HordeStartLoc
		End Get
		Set
			If ((Me._HordeStartLoc = value)  _
						= false) Then
				Me.OnHordeStartLocChanging(value)
				Me.SendPropertyChanging
				Me._HordeStartLoc = value
				Me.SendPropertyChanged("HordeStartLoc")
				Me.OnHordeStartLocChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_HordeStartO", DbType:="Real NOT NULL")>  _
	Public Property HordeStartO() As Single
		Get
			Return Me._HordeStartO
		End Get
		Set
			If ((Me._HordeStartO = value)  _
						= false) Then
				Me.OnHordeStartOChanging(value)
				Me.SendPropertyChanging
				Me._HordeStartO = value
				Me.SendPropertyChanged("HordeStartO")
				Me.OnHordeStartOChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IsActive", DbType:="TinyInt NOT NULL")>  _
	Public Property IsActive() As Byte
		Get
			Return Me._IsActive
		End Get
		Set
			If ((Me._IsActive = value)  _
						= false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.areatrigger_involvedrelation")>  _
Partial Public Class areatrigger_involvedrelation
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _quest As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnquestChanging(value As Integer)
    End Sub
    Partial Private Sub OnquestChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_quest", DbType:="Int NOT NULL")>  _
	Public Property quest() As Integer
		Get
			Return Me._quest
		End Get
		Set
			If ((Me._quest = value)  _
						= false) Then
				Me.OnquestChanging(value)
				Me.SendPropertyChanging
				Me._quest = value
				Me.SendPropertyChanged("quest")
				Me.OnquestChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.areatrigger_tavern")>  _
Partial Public Class areatrigger_tavern
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _name As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_name", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.areatrigger_teleport")>  _
Partial Public Class areatrigger_teleport
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _name As String
	
	Private _required_level As Byte
	
	Private _required_item As Integer
	
	Private _required_item2 As Integer
	
	Private _heroic_key As Integer
	
	Private _heroic_key2 As Integer
	
	Private _required_quest_done As Integer
	
	Private _required_quest_done_heroic As Integer
	
	Private _required_failed_text As String
	
	Private _target_map As Short
	
	Private _target_position_x As Single
	
	Private _target_position_y As Single
	
	Private _target_position_z As Single
	
	Private _target_orientation As Single
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub Onrequired_levelChanging(value As Byte)
    End Sub
    Partial Private Sub Onrequired_levelChanged()
    End Sub
    Partial Private Sub Onrequired_itemChanging(value As Integer)
    End Sub
    Partial Private Sub Onrequired_itemChanged()
    End Sub
    Partial Private Sub Onrequired_item2Changing(value As Integer)
    End Sub
    Partial Private Sub Onrequired_item2Changed()
    End Sub
    Partial Private Sub Onheroic_keyChanging(value As Integer)
    End Sub
    Partial Private Sub Onheroic_keyChanged()
    End Sub
    Partial Private Sub Onheroic_key2Changing(value As Integer)
    End Sub
    Partial Private Sub Onheroic_key2Changed()
    End Sub
    Partial Private Sub Onrequired_quest_doneChanging(value As Integer)
    End Sub
    Partial Private Sub Onrequired_quest_doneChanged()
    End Sub
    Partial Private Sub Onrequired_quest_done_heroicChanging(value As Integer)
    End Sub
    Partial Private Sub Onrequired_quest_done_heroicChanged()
    End Sub
    Partial Private Sub Onrequired_failed_textChanging(value As String)
    End Sub
    Partial Private Sub Onrequired_failed_textChanged()
    End Sub
    Partial Private Sub Ontarget_mapChanging(value As Short)
    End Sub
    Partial Private Sub Ontarget_mapChanged()
    End Sub
    Partial Private Sub Ontarget_position_xChanging(value As Single)
    End Sub
    Partial Private Sub Ontarget_position_xChanged()
    End Sub
    Partial Private Sub Ontarget_position_yChanging(value As Single)
    End Sub
    Partial Private Sub Ontarget_position_yChanged()
    End Sub
    Partial Private Sub Ontarget_position_zChanging(value As Single)
    End Sub
    Partial Private Sub Ontarget_position_zChanged()
    End Sub
    Partial Private Sub Ontarget_orientationChanging(value As Single)
    End Sub
    Partial Private Sub Ontarget_orientationChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_name", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_required_level", DbType:="TinyInt NOT NULL")>  _
	Public Property required_level() As Byte
		Get
			Return Me._required_level
		End Get
		Set
			If ((Me._required_level = value)  _
						= false) Then
				Me.Onrequired_levelChanging(value)
				Me.SendPropertyChanging
				Me._required_level = value
				Me.SendPropertyChanged("required_level")
				Me.Onrequired_levelChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_required_item", DbType:="Int NOT NULL")>  _
	Public Property required_item() As Integer
		Get
			Return Me._required_item
		End Get
		Set
			If ((Me._required_item = value)  _
						= false) Then
				Me.Onrequired_itemChanging(value)
				Me.SendPropertyChanging
				Me._required_item = value
				Me.SendPropertyChanged("required_item")
				Me.Onrequired_itemChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_required_item2", DbType:="Int NOT NULL")>  _
	Public Property required_item2() As Integer
		Get
			Return Me._required_item2
		End Get
		Set
			If ((Me._required_item2 = value)  _
						= false) Then
				Me.Onrequired_item2Changing(value)
				Me.SendPropertyChanging
				Me._required_item2 = value
				Me.SendPropertyChanged("required_item2")
				Me.Onrequired_item2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_heroic_key", DbType:="Int NOT NULL")>  _
	Public Property heroic_key() As Integer
		Get
			Return Me._heroic_key
		End Get
		Set
			If ((Me._heroic_key = value)  _
						= false) Then
				Me.Onheroic_keyChanging(value)
				Me.SendPropertyChanging
				Me._heroic_key = value
				Me.SendPropertyChanged("heroic_key")
				Me.Onheroic_keyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_heroic_key2", DbType:="Int NOT NULL")>  _
	Public Property heroic_key2() As Integer
		Get
			Return Me._heroic_key2
		End Get
		Set
			If ((Me._heroic_key2 = value)  _
						= false) Then
				Me.Onheroic_key2Changing(value)
				Me.SendPropertyChanging
				Me._heroic_key2 = value
				Me.SendPropertyChanged("heroic_key2")
				Me.Onheroic_key2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_required_quest_done", DbType:="Int NOT NULL")>  _
	Public Property required_quest_done() As Integer
		Get
			Return Me._required_quest_done
		End Get
		Set
			If ((Me._required_quest_done = value)  _
						= false) Then
				Me.Onrequired_quest_doneChanging(value)
				Me.SendPropertyChanging
				Me._required_quest_done = value
				Me.SendPropertyChanged("required_quest_done")
				Me.Onrequired_quest_doneChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_required_quest_done_heroic", DbType:="Int NOT NULL")>  _
	Public Property required_quest_done_heroic() As Integer
		Get
			Return Me._required_quest_done_heroic
		End Get
		Set
			If ((Me._required_quest_done_heroic = value)  _
						= false) Then
				Me.Onrequired_quest_done_heroicChanging(value)
				Me.SendPropertyChanging
				Me._required_quest_done_heroic = value
				Me.SendPropertyChanged("required_quest_done_heroic")
				Me.Onrequired_quest_done_heroicChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_required_failed_text", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property required_failed_text() As String
		Get
			Return Me._required_failed_text
		End Get
		Set
			If (String.Equals(Me._required_failed_text, value) = false) Then
				Me.Onrequired_failed_textChanging(value)
				Me.SendPropertyChanging
				Me._required_failed_text = value
				Me.SendPropertyChanged("required_failed_text")
				Me.Onrequired_failed_textChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_target_map", DbType:="SmallInt NOT NULL")>  _
	Public Property target_map() As Short
		Get
			Return Me._target_map
		End Get
		Set
			If ((Me._target_map = value)  _
						= false) Then
				Me.Ontarget_mapChanging(value)
				Me.SendPropertyChanging
				Me._target_map = value
				Me.SendPropertyChanged("target_map")
				Me.Ontarget_mapChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_target_position_x", DbType:="Real NOT NULL")>  _
	Public Property target_position_x() As Single
		Get
			Return Me._target_position_x
		End Get
		Set
			If ((Me._target_position_x = value)  _
						= false) Then
				Me.Ontarget_position_xChanging(value)
				Me.SendPropertyChanging
				Me._target_position_x = value
				Me.SendPropertyChanged("target_position_x")
				Me.Ontarget_position_xChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_target_position_y", DbType:="Real NOT NULL")>  _
	Public Property target_position_y() As Single
		Get
			Return Me._target_position_y
		End Get
		Set
			If ((Me._target_position_y = value)  _
						= false) Then
				Me.Ontarget_position_yChanging(value)
				Me.SendPropertyChanging
				Me._target_position_y = value
				Me.SendPropertyChanged("target_position_y")
				Me.Ontarget_position_yChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_target_position_z", DbType:="Real NOT NULL")>  _
	Public Property target_position_z() As Single
		Get
			Return Me._target_position_z
		End Get
		Set
			If ((Me._target_position_z = value)  _
						= false) Then
				Me.Ontarget_position_zChanging(value)
				Me.SendPropertyChanging
				Me._target_position_z = value
				Me.SendPropertyChanged("target_position_z")
				Me.Ontarget_position_zChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_target_orientation", DbType:="Real NOT NULL")>  _
	Public Property target_orientation() As Single
		Get
			Return Me._target_orientation
		End Get
		Set
			If ((Me._target_orientation = value)  _
						= false) Then
				Me.Ontarget_orientationChanging(value)
				Me.SendPropertyChanging
				Me._target_orientation = value
				Me.SendPropertyChanged("target_orientation")
				Me.Ontarget_orientationChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.spells_teleport_coords")>  _
Partial Public Class spells_teleport_coord
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _name As String
	
	Private _mapId As Short
	
	Private _position_x As Single
	
	Private _position_y As Single
	
	Private _position_z As Single
	
	Private _orientation As Single
	
	Private _totrigger As Short
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub OnmapIdChanging(value As Short)
    End Sub
    Partial Private Sub OnmapIdChanged()
    End Sub
    Partial Private Sub Onposition_xChanging(value As Single)
    End Sub
    Partial Private Sub Onposition_xChanged()
    End Sub
    Partial Private Sub Onposition_yChanging(value As Single)
    End Sub
    Partial Private Sub Onposition_yChanged()
    End Sub
    Partial Private Sub Onposition_zChanging(value As Single)
    End Sub
    Partial Private Sub Onposition_zChanged()
    End Sub
    Partial Private Sub OnorientationChanging(value As Single)
    End Sub
    Partial Private Sub OnorientationChanged()
    End Sub
    Partial Private Sub OntotriggerChanging(value As Short)
    End Sub
    Partial Private Sub OntotriggerChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_name", DbType:="Char(255) NOT NULL", CanBeNull:=false)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_mapId", DbType:="SmallInt NOT NULL")>  _
	Public Property mapId() As Short
		Get
			Return Me._mapId
		End Get
		Set
			If ((Me._mapId = value)  _
						= false) Then
				Me.OnmapIdChanging(value)
				Me.SendPropertyChanging
				Me._mapId = value
				Me.SendPropertyChanged("mapId")
				Me.OnmapIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_position_x", DbType:="Real NOT NULL")>  _
	Public Property position_x() As Single
		Get
			Return Me._position_x
		End Get
		Set
			If ((Me._position_x = value)  _
						= false) Then
				Me.Onposition_xChanging(value)
				Me.SendPropertyChanging
				Me._position_x = value
				Me.SendPropertyChanged("position_x")
				Me.Onposition_xChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_position_y", DbType:="Real NOT NULL")>  _
	Public Property position_y() As Single
		Get
			Return Me._position_y
		End Get
		Set
			If ((Me._position_y = value)  _
						= false) Then
				Me.Onposition_yChanging(value)
				Me.SendPropertyChanging
				Me._position_y = value
				Me.SendPropertyChanged("position_y")
				Me.Onposition_yChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_position_z", DbType:="Real NOT NULL")>  _
	Public Property position_z() As Single
		Get
			Return Me._position_z
		End Get
		Set
			If ((Me._position_z = value)  _
						= false) Then
				Me.Onposition_zChanging(value)
				Me.SendPropertyChanging
				Me._position_z = value
				Me.SendPropertyChanged("position_z")
				Me.Onposition_zChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_orientation", DbType:="Real NOT NULL")>  _
	Public Property orientation() As Single
		Get
			Return Me._orientation
		End Get
		Set
			If ((Me._orientation = value)  _
						= false) Then
				Me.OnorientationChanging(value)
				Me.SendPropertyChanging
				Me._orientation = value
				Me.SendPropertyChanged("orientation")
				Me.OnorientationChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_totrigger", DbType:="SmallInt NOT NULL")>  _
	Public Property totrigger() As Short
		Get
			Return Me._totrigger
		End Get
		Set
			If ((Me._totrigger = value)  _
						= false) Then
				Me.OntotriggerChanging(value)
				Me.SendPropertyChanging
				Me._totrigger = value
				Me.SendPropertyChanged("totrigger")
				Me.OntotriggerChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.npc_gossip_textid")>  _
Partial Public Class npc_gossip_textid
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _creatureid As Integer
	
	Private _textid As Short
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OncreatureidChanging(value As Integer)
    End Sub
    Partial Private Sub OncreatureidChanged()
    End Sub
    Partial Private Sub OntextidChanging(value As Short)
    End Sub
    Partial Private Sub OntextidChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_creatureid", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property creatureid() As Integer
		Get
			Return Me._creatureid
		End Get
		Set
			If ((Me._creatureid = value)  _
						= false) Then
				Me.OncreatureidChanging(value)
				Me.SendPropertyChanging
				Me._creatureid = value
				Me.SendPropertyChanged("creatureid")
				Me.OncreatureidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_textid", DbType:="SmallInt NOT NULL")>  _
	Public Property textid() As Short
		Get
			Return Me._textid
		End Get
		Set
			If ((Me._textid = value)  _
						= false) Then
				Me.OntextidChanging(value)
				Me.SendPropertyChanging
				Me._textid = value
				Me.SendPropertyChanged("textid")
				Me.OntextidChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.npc_monstersay")>  _
Partial Public Class npc_monstersay
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _entry As Short
	
	Private _event As Short
	
	Private _chance As Single
	
	Private _language As Short
	
	Private _type As Short
	
	Private _monstername As String
	
	Private _text0 As String
	
	Private _text1 As String
	
	Private _text2 As String
	
	Private _text3 As String
	
	Private _text4 As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnentryChanging(value As Short)
    End Sub
    Partial Private Sub OnentryChanged()
    End Sub
    Partial Private Sub OneventChanging(value As Short)
    End Sub
    Partial Private Sub OneventChanged()
    End Sub
    Partial Private Sub OnchanceChanging(value As Single)
    End Sub
    Partial Private Sub OnchanceChanged()
    End Sub
    Partial Private Sub OnlanguageChanging(value As Short)
    End Sub
    Partial Private Sub OnlanguageChanged()
    End Sub
    Partial Private Sub OntypeChanging(value As Short)
    End Sub
    Partial Private Sub OntypeChanged()
    End Sub
    Partial Private Sub OnmonsternameChanging(value As String)
    End Sub
    Partial Private Sub OnmonsternameChanged()
    End Sub
    Partial Private Sub Ontext0Changing(value As String)
    End Sub
    Partial Private Sub Ontext0Changed()
    End Sub
    Partial Private Sub Ontext1Changing(value As String)
    End Sub
    Partial Private Sub Ontext1Changed()
    End Sub
    Partial Private Sub Ontext2Changing(value As String)
    End Sub
    Partial Private Sub Ontext2Changed()
    End Sub
    Partial Private Sub Ontext3Changing(value As String)
    End Sub
    Partial Private Sub Ontext3Changed()
    End Sub
    Partial Private Sub Ontext4Changing(value As String)
    End Sub
    Partial Private Sub Ontext4Changed()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_entry", DbType:="SmallInt NOT NULL", IsPrimaryKey:=true)>  _
	Public Property entry() As Short
		Get
			Return Me._entry
		End Get
		Set
			If ((Me._entry = value)  _
						= false) Then
				Me.OnentryChanging(value)
				Me.SendPropertyChanging
				Me._entry = value
				Me.SendPropertyChanged("entry")
				Me.OnentryChanged
			End If
		End Set
	End Property
	
	<Column(Name:="event", Storage:="_event", DbType:="SmallInt NOT NULL")>  _
	Public Property [event]() As Short
		Get
			Return Me._event
		End Get
		Set
			If ((Me._event = value)  _
						= false) Then
				Me.OneventChanging(value)
				Me.SendPropertyChanging
				Me._event = value
				Me.SendPropertyChanged("[event]")
				Me.OneventChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_chance", DbType:="Real NOT NULL")>  _
	Public Property chance() As Single
		Get
			Return Me._chance
		End Get
		Set
			If ((Me._chance = value)  _
						= false) Then
				Me.OnchanceChanging(value)
				Me.SendPropertyChanging
				Me._chance = value
				Me.SendPropertyChanged("chance")
				Me.OnchanceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_language", DbType:="SmallInt NOT NULL")>  _
	Public Property language() As Short
		Get
			Return Me._language
		End Get
		Set
			If ((Me._language = value)  _
						= false) Then
				Me.OnlanguageChanging(value)
				Me.SendPropertyChanging
				Me._language = value
				Me.SendPropertyChanged("language")
				Me.OnlanguageChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_type", DbType:="SmallInt NOT NULL")>  _
	Public Property type() As Short
		Get
			Return Me._type
		End Get
		Set
			If ((Me._type = value)  _
						= false) Then
				Me.OntypeChanging(value)
				Me.SendPropertyChanging
				Me._type = value
				Me.SendPropertyChanged("type")
				Me.OntypeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_monstername", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property monstername() As String
		Get
			Return Me._monstername
		End Get
		Set
			If (String.Equals(Me._monstername, value) = false) Then
				Me.OnmonsternameChanging(value)
				Me.SendPropertyChanging
				Me._monstername = value
				Me.SendPropertyChanged("monstername")
				Me.OnmonsternameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_text0", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property text0() As String
		Get
			Return Me._text0
		End Get
		Set
			If (String.Equals(Me._text0, value) = false) Then
				Me.Ontext0Changing(value)
				Me.SendPropertyChanging
				Me._text0 = value
				Me.SendPropertyChanged("text0")
				Me.Ontext0Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_text1", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property text1() As String
		Get
			Return Me._text1
		End Get
		Set
			If (String.Equals(Me._text1, value) = false) Then
				Me.Ontext1Changing(value)
				Me.SendPropertyChanging
				Me._text1 = value
				Me.SendPropertyChanged("text1")
				Me.Ontext1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_text2", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property text2() As String
		Get
			Return Me._text2
		End Get
		Set
			If (String.Equals(Me._text2, value) = false) Then
				Me.Ontext2Changing(value)
				Me.SendPropertyChanging
				Me._text2 = value
				Me.SendPropertyChanged("text2")
				Me.Ontext2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_text3", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property text3() As String
		Get
			Return Me._text3
		End Get
		Set
			If (String.Equals(Me._text3, value) = false) Then
				Me.Ontext3Changing(value)
				Me.SendPropertyChanging
				Me._text3 = value
				Me.SendPropertyChanged("text3")
				Me.Ontext3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_text4", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property text4() As String
		Get
			Return Me._text4
		End Get
		Set
			If (String.Equals(Me._text4, value) = false) Then
				Me.Ontext4Changing(value)
				Me.SendPropertyChanging
				Me._text4 = value
				Me.SendPropertyChanged("text4")
				Me.Ontext4Changed
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.npctext")>  _
Partial Public Class npctext
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _entry As Integer
	
	Private _prob0 As Single
	
	Private _text0_0 As String
	
	Private _text0_1 As String
	
	Private _lang0 As Integer
	
	Private _em0_0 As Integer
	
	Private _em0_1 As Integer
	
	Private _em0_2 As Integer
	
	Private _em0_3 As Integer
	
	Private _em0_4 As Integer
	
	Private _em0_5 As Integer
	
	Private _prob1 As Single
	
	Private _text1_0 As String
	
	Private _text1_1 As String
	
	Private _lang1 As Integer
	
	Private _em1_0 As Integer
	
	Private _em1_1 As Integer
	
	Private _em1_2 As Integer
	
	Private _em1_3 As Integer
	
	Private _em1_4 As Integer
	
	Private _em1_5 As Integer
	
	Private _prob2 As Single
	
	Private _text2_0 As String
	
	Private _text2_1 As String
	
	Private _lang2 As Integer
	
	Private _em2_0 As Integer
	
	Private _em2_1 As Integer
	
	Private _em2_2 As Integer
	
	Private _em2_3 As Integer
	
	Private _em2_4 As Integer
	
	Private _em2_5 As Integer
	
	Private _prob3 As Single
	
	Private _text3_0 As String
	
	Private _text3_1 As String
	
	Private _lang3 As Integer
	
	Private _em3_0 As Integer
	
	Private _em3_1 As Integer
	
	Private _em3_2 As Integer
	
	Private _em3_3 As Integer
	
	Private _em3_4 As Integer
	
	Private _em3_5 As Integer
	
	Private _prob4 As Single
	
	Private _text4_0 As String
	
	Private _text4_1 As String
	
	Private _lang4 As Integer
	
	Private _em4_0 As Integer
	
	Private _em4_1 As Integer
	
	Private _em4_2 As Integer
	
	Private _em4_3 As Integer
	
	Private _em4_4 As Integer
	
	Private _em4_5 As Integer
	
	Private _prob5 As Single
	
	Private _text5_0 As String
	
	Private _text5_1 As String
	
	Private _lang5 As Integer
	
	Private _em5_0 As Integer
	
	Private _em5_1 As Integer
	
	Private _em5_2 As Integer
	
	Private _em5_3 As Integer
	
	Private _em5_4 As Integer
	
	Private _em5_5 As Integer
	
	Private _prob6 As Single
	
	Private _text6_0 As String
	
	Private _text6_1 As String
	
	Private _lang6 As Integer
	
	Private _em6_0 As Integer
	
	Private _em6_1 As Integer
	
	Private _em6_2 As Integer
	
	Private _em6_3 As Integer
	
	Private _em6_4 As Integer
	
	Private _em6_5 As Integer
	
	Private _prob7 As Single
	
	Private _text7_0 As String
	
	Private _text7_1 As String
	
	Private _lang7 As Integer
	
	Private _em7_0 As Integer
	
	Private _em7_1 As Integer
	
	Private _em7_2 As Integer
	
	Private _em7_3 As Integer
	
	Private _em7_4 As Integer
	
	Private _em7_5 As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnentryChanging(value As Integer)
    End Sub
    Partial Private Sub OnentryChanged()
    End Sub
    Partial Private Sub Onprob0Changing(value As Single)
    End Sub
    Partial Private Sub Onprob0Changed()
    End Sub
    Partial Private Sub Ontext0_0Changing(value As String)
    End Sub
    Partial Private Sub Ontext0_0Changed()
    End Sub
    Partial Private Sub Ontext0_1Changing(value As String)
    End Sub
    Partial Private Sub Ontext0_1Changed()
    End Sub
    Partial Private Sub Onlang0Changing(value As Integer)
    End Sub
    Partial Private Sub Onlang0Changed()
    End Sub
    Partial Private Sub Onem0_0Changing(value As Integer)
    End Sub
    Partial Private Sub Onem0_0Changed()
    End Sub
    Partial Private Sub Onem0_1Changing(value As Integer)
    End Sub
    Partial Private Sub Onem0_1Changed()
    End Sub
    Partial Private Sub Onem0_2Changing(value As Integer)
    End Sub
    Partial Private Sub Onem0_2Changed()
    End Sub
    Partial Private Sub Onem0_3Changing(value As Integer)
    End Sub
    Partial Private Sub Onem0_3Changed()
    End Sub
    Partial Private Sub Onem0_4Changing(value As Integer)
    End Sub
    Partial Private Sub Onem0_4Changed()
    End Sub
    Partial Private Sub Onem0_5Changing(value As Integer)
    End Sub
    Partial Private Sub Onem0_5Changed()
    End Sub
    Partial Private Sub Onprob1Changing(value As Single)
    End Sub
    Partial Private Sub Onprob1Changed()
    End Sub
    Partial Private Sub Ontext1_0Changing(value As String)
    End Sub
    Partial Private Sub Ontext1_0Changed()
    End Sub
    Partial Private Sub Ontext1_1Changing(value As String)
    End Sub
    Partial Private Sub Ontext1_1Changed()
    End Sub
    Partial Private Sub Onlang1Changing(value As Integer)
    End Sub
    Partial Private Sub Onlang1Changed()
    End Sub
    Partial Private Sub Onem1_0Changing(value As Integer)
    End Sub
    Partial Private Sub Onem1_0Changed()
    End Sub
    Partial Private Sub Onem1_1Changing(value As Integer)
    End Sub
    Partial Private Sub Onem1_1Changed()
    End Sub
    Partial Private Sub Onem1_2Changing(value As Integer)
    End Sub
    Partial Private Sub Onem1_2Changed()
    End Sub
    Partial Private Sub Onem1_3Changing(value As Integer)
    End Sub
    Partial Private Sub Onem1_3Changed()
    End Sub
    Partial Private Sub Onem1_4Changing(value As Integer)
    End Sub
    Partial Private Sub Onem1_4Changed()
    End Sub
    Partial Private Sub Onem1_5Changing(value As Integer)
    End Sub
    Partial Private Sub Onem1_5Changed()
    End Sub
    Partial Private Sub Onprob2Changing(value As Single)
    End Sub
    Partial Private Sub Onprob2Changed()
    End Sub
    Partial Private Sub Ontext2_0Changing(value As String)
    End Sub
    Partial Private Sub Ontext2_0Changed()
    End Sub
    Partial Private Sub Ontext2_1Changing(value As String)
    End Sub
    Partial Private Sub Ontext2_1Changed()
    End Sub
    Partial Private Sub Onlang2Changing(value As Integer)
    End Sub
    Partial Private Sub Onlang2Changed()
    End Sub
    Partial Private Sub Onem2_0Changing(value As Integer)
    End Sub
    Partial Private Sub Onem2_0Changed()
    End Sub
    Partial Private Sub Onem2_1Changing(value As Integer)
    End Sub
    Partial Private Sub Onem2_1Changed()
    End Sub
    Partial Private Sub Onem2_2Changing(value As Integer)
    End Sub
    Partial Private Sub Onem2_2Changed()
    End Sub
    Partial Private Sub Onem2_3Changing(value As Integer)
    End Sub
    Partial Private Sub Onem2_3Changed()
    End Sub
    Partial Private Sub Onem2_4Changing(value As Integer)
    End Sub
    Partial Private Sub Onem2_4Changed()
    End Sub
    Partial Private Sub Onem2_5Changing(value As Integer)
    End Sub
    Partial Private Sub Onem2_5Changed()
    End Sub
    Partial Private Sub Onprob3Changing(value As Single)
    End Sub
    Partial Private Sub Onprob3Changed()
    End Sub
    Partial Private Sub Ontext3_0Changing(value As String)
    End Sub
    Partial Private Sub Ontext3_0Changed()
    End Sub
    Partial Private Sub Ontext3_1Changing(value As String)
    End Sub
    Partial Private Sub Ontext3_1Changed()
    End Sub
    Partial Private Sub Onlang3Changing(value As Integer)
    End Sub
    Partial Private Sub Onlang3Changed()
    End Sub
    Partial Private Sub Onem3_0Changing(value As Integer)
    End Sub
    Partial Private Sub Onem3_0Changed()
    End Sub
    Partial Private Sub Onem3_1Changing(value As Integer)
    End Sub
    Partial Private Sub Onem3_1Changed()
    End Sub
    Partial Private Sub Onem3_2Changing(value As Integer)
    End Sub
    Partial Private Sub Onem3_2Changed()
    End Sub
    Partial Private Sub Onem3_3Changing(value As Integer)
    End Sub
    Partial Private Sub Onem3_3Changed()
    End Sub
    Partial Private Sub Onem3_4Changing(value As Integer)
    End Sub
    Partial Private Sub Onem3_4Changed()
    End Sub
    Partial Private Sub Onem3_5Changing(value As Integer)
    End Sub
    Partial Private Sub Onem3_5Changed()
    End Sub
    Partial Private Sub Onprob4Changing(value As Single)
    End Sub
    Partial Private Sub Onprob4Changed()
    End Sub
    Partial Private Sub Ontext4_0Changing(value As String)
    End Sub
    Partial Private Sub Ontext4_0Changed()
    End Sub
    Partial Private Sub Ontext4_1Changing(value As String)
    End Sub
    Partial Private Sub Ontext4_1Changed()
    End Sub
    Partial Private Sub Onlang4Changing(value As Integer)
    End Sub
    Partial Private Sub Onlang4Changed()
    End Sub
    Partial Private Sub Onem4_0Changing(value As Integer)
    End Sub
    Partial Private Sub Onem4_0Changed()
    End Sub
    Partial Private Sub Onem4_1Changing(value As Integer)
    End Sub
    Partial Private Sub Onem4_1Changed()
    End Sub
    Partial Private Sub Onem4_2Changing(value As Integer)
    End Sub
    Partial Private Sub Onem4_2Changed()
    End Sub
    Partial Private Sub Onem4_3Changing(value As Integer)
    End Sub
    Partial Private Sub Onem4_3Changed()
    End Sub
    Partial Private Sub Onem4_4Changing(value As Integer)
    End Sub
    Partial Private Sub Onem4_4Changed()
    End Sub
    Partial Private Sub Onem4_5Changing(value As Integer)
    End Sub
    Partial Private Sub Onem4_5Changed()
    End Sub
    Partial Private Sub Onprob5Changing(value As Single)
    End Sub
    Partial Private Sub Onprob5Changed()
    End Sub
    Partial Private Sub Ontext5_0Changing(value As String)
    End Sub
    Partial Private Sub Ontext5_0Changed()
    End Sub
    Partial Private Sub Ontext5_1Changing(value As String)
    End Sub
    Partial Private Sub Ontext5_1Changed()
    End Sub
    Partial Private Sub Onlang5Changing(value As Integer)
    End Sub
    Partial Private Sub Onlang5Changed()
    End Sub
    Partial Private Sub Onem5_0Changing(value As Integer)
    End Sub
    Partial Private Sub Onem5_0Changed()
    End Sub
    Partial Private Sub Onem5_1Changing(value As Integer)
    End Sub
    Partial Private Sub Onem5_1Changed()
    End Sub
    Partial Private Sub Onem5_2Changing(value As Integer)
    End Sub
    Partial Private Sub Onem5_2Changed()
    End Sub
    Partial Private Sub Onem5_3Changing(value As Integer)
    End Sub
    Partial Private Sub Onem5_3Changed()
    End Sub
    Partial Private Sub Onem5_4Changing(value As Integer)
    End Sub
    Partial Private Sub Onem5_4Changed()
    End Sub
    Partial Private Sub Onem5_5Changing(value As Integer)
    End Sub
    Partial Private Sub Onem5_5Changed()
    End Sub
    Partial Private Sub Onprob6Changing(value As Single)
    End Sub
    Partial Private Sub Onprob6Changed()
    End Sub
    Partial Private Sub Ontext6_0Changing(value As String)
    End Sub
    Partial Private Sub Ontext6_0Changed()
    End Sub
    Partial Private Sub Ontext6_1Changing(value As String)
    End Sub
    Partial Private Sub Ontext6_1Changed()
    End Sub
    Partial Private Sub Onlang6Changing(value As Integer)
    End Sub
    Partial Private Sub Onlang6Changed()
    End Sub
    Partial Private Sub Onem6_0Changing(value As Integer)
    End Sub
    Partial Private Sub Onem6_0Changed()
    End Sub
    Partial Private Sub Onem6_1Changing(value As Integer)
    End Sub
    Partial Private Sub Onem6_1Changed()
    End Sub
    Partial Private Sub Onem6_2Changing(value As Integer)
    End Sub
    Partial Private Sub Onem6_2Changed()
    End Sub
    Partial Private Sub Onem6_3Changing(value As Integer)
    End Sub
    Partial Private Sub Onem6_3Changed()
    End Sub
    Partial Private Sub Onem6_4Changing(value As Integer)
    End Sub
    Partial Private Sub Onem6_4Changed()
    End Sub
    Partial Private Sub Onem6_5Changing(value As Integer)
    End Sub
    Partial Private Sub Onem6_5Changed()
    End Sub
    Partial Private Sub Onprob7Changing(value As Single)
    End Sub
    Partial Private Sub Onprob7Changed()
    End Sub
    Partial Private Sub Ontext7_0Changing(value As String)
    End Sub
    Partial Private Sub Ontext7_0Changed()
    End Sub
    Partial Private Sub Ontext7_1Changing(value As String)
    End Sub
    Partial Private Sub Ontext7_1Changed()
    End Sub
    Partial Private Sub Onlang7Changing(value As Integer)
    End Sub
    Partial Private Sub Onlang7Changed()
    End Sub
    Partial Private Sub Onem7_0Changing(value As Integer)
    End Sub
    Partial Private Sub Onem7_0Changed()
    End Sub
    Partial Private Sub Onem7_1Changing(value As Integer)
    End Sub
    Partial Private Sub Onem7_1Changed()
    End Sub
    Partial Private Sub Onem7_2Changing(value As Integer)
    End Sub
    Partial Private Sub Onem7_2Changed()
    End Sub
    Partial Private Sub Onem7_3Changing(value As Integer)
    End Sub
    Partial Private Sub Onem7_3Changed()
    End Sub
    Partial Private Sub Onem7_4Changing(value As Integer)
    End Sub
    Partial Private Sub Onem7_4Changed()
    End Sub
    Partial Private Sub Onem7_5Changing(value As Integer)
    End Sub
    Partial Private Sub Onem7_5Changed()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_entry", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property entry() As Integer
		Get
			Return Me._entry
		End Get
		Set
			If ((Me._entry = value)  _
						= false) Then
				Me.OnentryChanging(value)
				Me.SendPropertyChanging
				Me._entry = value
				Me.SendPropertyChanged("entry")
				Me.OnentryChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_prob0", DbType:="Real NOT NULL")>  _
	Public Property prob0() As Single
		Get
			Return Me._prob0
		End Get
		Set
			If ((Me._prob0 = value)  _
						= false) Then
				Me.Onprob0Changing(value)
				Me.SendPropertyChanging
				Me._prob0 = value
				Me.SendPropertyChanged("prob0")
				Me.Onprob0Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_text0_0", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property text0_0() As String
		Get
			Return Me._text0_0
		End Get
		Set
			If (String.Equals(Me._text0_0, value) = false) Then
				Me.Ontext0_0Changing(value)
				Me.SendPropertyChanging
				Me._text0_0 = value
				Me.SendPropertyChanged("text0_0")
				Me.Ontext0_0Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_text0_1", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property text0_1() As String
		Get
			Return Me._text0_1
		End Get
		Set
			If (String.Equals(Me._text0_1, value) = false) Then
				Me.Ontext0_1Changing(value)
				Me.SendPropertyChanging
				Me._text0_1 = value
				Me.SendPropertyChanged("text0_1")
				Me.Ontext0_1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_lang0", DbType:="Int NOT NULL")>  _
	Public Property lang0() As Integer
		Get
			Return Me._lang0
		End Get
		Set
			If ((Me._lang0 = value)  _
						= false) Then
				Me.Onlang0Changing(value)
				Me.SendPropertyChanging
				Me._lang0 = value
				Me.SendPropertyChanged("lang0")
				Me.Onlang0Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em0_0", DbType:="Int NOT NULL")>  _
	Public Property em0_0() As Integer
		Get
			Return Me._em0_0
		End Get
		Set
			If ((Me._em0_0 = value)  _
						= false) Then
				Me.Onem0_0Changing(value)
				Me.SendPropertyChanging
				Me._em0_0 = value
				Me.SendPropertyChanged("em0_0")
				Me.Onem0_0Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em0_1", DbType:="Int NOT NULL")>  _
	Public Property em0_1() As Integer
		Get
			Return Me._em0_1
		End Get
		Set
			If ((Me._em0_1 = value)  _
						= false) Then
				Me.Onem0_1Changing(value)
				Me.SendPropertyChanging
				Me._em0_1 = value
				Me.SendPropertyChanged("em0_1")
				Me.Onem0_1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em0_2", DbType:="Int NOT NULL")>  _
	Public Property em0_2() As Integer
		Get
			Return Me._em0_2
		End Get
		Set
			If ((Me._em0_2 = value)  _
						= false) Then
				Me.Onem0_2Changing(value)
				Me.SendPropertyChanging
				Me._em0_2 = value
				Me.SendPropertyChanged("em0_2")
				Me.Onem0_2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em0_3", DbType:="Int NOT NULL")>  _
	Public Property em0_3() As Integer
		Get
			Return Me._em0_3
		End Get
		Set
			If ((Me._em0_3 = value)  _
						= false) Then
				Me.Onem0_3Changing(value)
				Me.SendPropertyChanging
				Me._em0_3 = value
				Me.SendPropertyChanged("em0_3")
				Me.Onem0_3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em0_4", DbType:="Int NOT NULL")>  _
	Public Property em0_4() As Integer
		Get
			Return Me._em0_4
		End Get
		Set
			If ((Me._em0_4 = value)  _
						= false) Then
				Me.Onem0_4Changing(value)
				Me.SendPropertyChanging
				Me._em0_4 = value
				Me.SendPropertyChanged("em0_4")
				Me.Onem0_4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em0_5", DbType:="Int NOT NULL")>  _
	Public Property em0_5() As Integer
		Get
			Return Me._em0_5
		End Get
		Set
			If ((Me._em0_5 = value)  _
						= false) Then
				Me.Onem0_5Changing(value)
				Me.SendPropertyChanging
				Me._em0_5 = value
				Me.SendPropertyChanged("em0_5")
				Me.Onem0_5Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_prob1", DbType:="Real NOT NULL")>  _
	Public Property prob1() As Single
		Get
			Return Me._prob1
		End Get
		Set
			If ((Me._prob1 = value)  _
						= false) Then
				Me.Onprob1Changing(value)
				Me.SendPropertyChanging
				Me._prob1 = value
				Me.SendPropertyChanged("prob1")
				Me.Onprob1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_text1_0", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property text1_0() As String
		Get
			Return Me._text1_0
		End Get
		Set
			If (String.Equals(Me._text1_0, value) = false) Then
				Me.Ontext1_0Changing(value)
				Me.SendPropertyChanging
				Me._text1_0 = value
				Me.SendPropertyChanged("text1_0")
				Me.Ontext1_0Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_text1_1", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property text1_1() As String
		Get
			Return Me._text1_1
		End Get
		Set
			If (String.Equals(Me._text1_1, value) = false) Then
				Me.Ontext1_1Changing(value)
				Me.SendPropertyChanging
				Me._text1_1 = value
				Me.SendPropertyChanged("text1_1")
				Me.Ontext1_1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_lang1", DbType:="Int NOT NULL")>  _
	Public Property lang1() As Integer
		Get
			Return Me._lang1
		End Get
		Set
			If ((Me._lang1 = value)  _
						= false) Then
				Me.Onlang1Changing(value)
				Me.SendPropertyChanging
				Me._lang1 = value
				Me.SendPropertyChanged("lang1")
				Me.Onlang1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em1_0", DbType:="Int NOT NULL")>  _
	Public Property em1_0() As Integer
		Get
			Return Me._em1_0
		End Get
		Set
			If ((Me._em1_0 = value)  _
						= false) Then
				Me.Onem1_0Changing(value)
				Me.SendPropertyChanging
				Me._em1_0 = value
				Me.SendPropertyChanged("em1_0")
				Me.Onem1_0Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em1_1", DbType:="Int NOT NULL")>  _
	Public Property em1_1() As Integer
		Get
			Return Me._em1_1
		End Get
		Set
			If ((Me._em1_1 = value)  _
						= false) Then
				Me.Onem1_1Changing(value)
				Me.SendPropertyChanging
				Me._em1_1 = value
				Me.SendPropertyChanged("em1_1")
				Me.Onem1_1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em1_2", DbType:="Int NOT NULL")>  _
	Public Property em1_2() As Integer
		Get
			Return Me._em1_2
		End Get
		Set
			If ((Me._em1_2 = value)  _
						= false) Then
				Me.Onem1_2Changing(value)
				Me.SendPropertyChanging
				Me._em1_2 = value
				Me.SendPropertyChanged("em1_2")
				Me.Onem1_2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em1_3", DbType:="Int NOT NULL")>  _
	Public Property em1_3() As Integer
		Get
			Return Me._em1_3
		End Get
		Set
			If ((Me._em1_3 = value)  _
						= false) Then
				Me.Onem1_3Changing(value)
				Me.SendPropertyChanging
				Me._em1_3 = value
				Me.SendPropertyChanged("em1_3")
				Me.Onem1_3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em1_4", DbType:="Int NOT NULL")>  _
	Public Property em1_4() As Integer
		Get
			Return Me._em1_4
		End Get
		Set
			If ((Me._em1_4 = value)  _
						= false) Then
				Me.Onem1_4Changing(value)
				Me.SendPropertyChanging
				Me._em1_4 = value
				Me.SendPropertyChanged("em1_4")
				Me.Onem1_4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em1_5", DbType:="Int NOT NULL")>  _
	Public Property em1_5() As Integer
		Get
			Return Me._em1_5
		End Get
		Set
			If ((Me._em1_5 = value)  _
						= false) Then
				Me.Onem1_5Changing(value)
				Me.SendPropertyChanging
				Me._em1_5 = value
				Me.SendPropertyChanged("em1_5")
				Me.Onem1_5Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_prob2", DbType:="Real NOT NULL")>  _
	Public Property prob2() As Single
		Get
			Return Me._prob2
		End Get
		Set
			If ((Me._prob2 = value)  _
						= false) Then
				Me.Onprob2Changing(value)
				Me.SendPropertyChanging
				Me._prob2 = value
				Me.SendPropertyChanged("prob2")
				Me.Onprob2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_text2_0", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property text2_0() As String
		Get
			Return Me._text2_0
		End Get
		Set
			If (String.Equals(Me._text2_0, value) = false) Then
				Me.Ontext2_0Changing(value)
				Me.SendPropertyChanging
				Me._text2_0 = value
				Me.SendPropertyChanged("text2_0")
				Me.Ontext2_0Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_text2_1", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property text2_1() As String
		Get
			Return Me._text2_1
		End Get
		Set
			If (String.Equals(Me._text2_1, value) = false) Then
				Me.Ontext2_1Changing(value)
				Me.SendPropertyChanging
				Me._text2_1 = value
				Me.SendPropertyChanged("text2_1")
				Me.Ontext2_1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_lang2", DbType:="Int NOT NULL")>  _
	Public Property lang2() As Integer
		Get
			Return Me._lang2
		End Get
		Set
			If ((Me._lang2 = value)  _
						= false) Then
				Me.Onlang2Changing(value)
				Me.SendPropertyChanging
				Me._lang2 = value
				Me.SendPropertyChanged("lang2")
				Me.Onlang2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em2_0", DbType:="Int NOT NULL")>  _
	Public Property em2_0() As Integer
		Get
			Return Me._em2_0
		End Get
		Set
			If ((Me._em2_0 = value)  _
						= false) Then
				Me.Onem2_0Changing(value)
				Me.SendPropertyChanging
				Me._em2_0 = value
				Me.SendPropertyChanged("em2_0")
				Me.Onem2_0Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em2_1", DbType:="Int NOT NULL")>  _
	Public Property em2_1() As Integer
		Get
			Return Me._em2_1
		End Get
		Set
			If ((Me._em2_1 = value)  _
						= false) Then
				Me.Onem2_1Changing(value)
				Me.SendPropertyChanging
				Me._em2_1 = value
				Me.SendPropertyChanged("em2_1")
				Me.Onem2_1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em2_2", DbType:="Int NOT NULL")>  _
	Public Property em2_2() As Integer
		Get
			Return Me._em2_2
		End Get
		Set
			If ((Me._em2_2 = value)  _
						= false) Then
				Me.Onem2_2Changing(value)
				Me.SendPropertyChanging
				Me._em2_2 = value
				Me.SendPropertyChanged("em2_2")
				Me.Onem2_2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em2_3", DbType:="Int NOT NULL")>  _
	Public Property em2_3() As Integer
		Get
			Return Me._em2_3
		End Get
		Set
			If ((Me._em2_3 = value)  _
						= false) Then
				Me.Onem2_3Changing(value)
				Me.SendPropertyChanging
				Me._em2_3 = value
				Me.SendPropertyChanged("em2_3")
				Me.Onem2_3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em2_4", DbType:="Int NOT NULL")>  _
	Public Property em2_4() As Integer
		Get
			Return Me._em2_4
		End Get
		Set
			If ((Me._em2_4 = value)  _
						= false) Then
				Me.Onem2_4Changing(value)
				Me.SendPropertyChanging
				Me._em2_4 = value
				Me.SendPropertyChanged("em2_4")
				Me.Onem2_4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em2_5", DbType:="Int NOT NULL")>  _
	Public Property em2_5() As Integer
		Get
			Return Me._em2_5
		End Get
		Set
			If ((Me._em2_5 = value)  _
						= false) Then
				Me.Onem2_5Changing(value)
				Me.SendPropertyChanging
				Me._em2_5 = value
				Me.SendPropertyChanged("em2_5")
				Me.Onem2_5Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_prob3", DbType:="Real NOT NULL")>  _
	Public Property prob3() As Single
		Get
			Return Me._prob3
		End Get
		Set
			If ((Me._prob3 = value)  _
						= false) Then
				Me.Onprob3Changing(value)
				Me.SendPropertyChanging
				Me._prob3 = value
				Me.SendPropertyChanged("prob3")
				Me.Onprob3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_text3_0", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property text3_0() As String
		Get
			Return Me._text3_0
		End Get
		Set
			If (String.Equals(Me._text3_0, value) = false) Then
				Me.Ontext3_0Changing(value)
				Me.SendPropertyChanging
				Me._text3_0 = value
				Me.SendPropertyChanged("text3_0")
				Me.Ontext3_0Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_text3_1", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property text3_1() As String
		Get
			Return Me._text3_1
		End Get
		Set
			If (String.Equals(Me._text3_1, value) = false) Then
				Me.Ontext3_1Changing(value)
				Me.SendPropertyChanging
				Me._text3_1 = value
				Me.SendPropertyChanged("text3_1")
				Me.Ontext3_1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_lang3", DbType:="Int NOT NULL")>  _
	Public Property lang3() As Integer
		Get
			Return Me._lang3
		End Get
		Set
			If ((Me._lang3 = value)  _
						= false) Then
				Me.Onlang3Changing(value)
				Me.SendPropertyChanging
				Me._lang3 = value
				Me.SendPropertyChanged("lang3")
				Me.Onlang3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em3_0", DbType:="Int NOT NULL")>  _
	Public Property em3_0() As Integer
		Get
			Return Me._em3_0
		End Get
		Set
			If ((Me._em3_0 = value)  _
						= false) Then
				Me.Onem3_0Changing(value)
				Me.SendPropertyChanging
				Me._em3_0 = value
				Me.SendPropertyChanged("em3_0")
				Me.Onem3_0Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em3_1", DbType:="Int NOT NULL")>  _
	Public Property em3_1() As Integer
		Get
			Return Me._em3_1
		End Get
		Set
			If ((Me._em3_1 = value)  _
						= false) Then
				Me.Onem3_1Changing(value)
				Me.SendPropertyChanging
				Me._em3_1 = value
				Me.SendPropertyChanged("em3_1")
				Me.Onem3_1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em3_2", DbType:="Int NOT NULL")>  _
	Public Property em3_2() As Integer
		Get
			Return Me._em3_2
		End Get
		Set
			If ((Me._em3_2 = value)  _
						= false) Then
				Me.Onem3_2Changing(value)
				Me.SendPropertyChanging
				Me._em3_2 = value
				Me.SendPropertyChanged("em3_2")
				Me.Onem3_2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em3_3", DbType:="Int NOT NULL")>  _
	Public Property em3_3() As Integer
		Get
			Return Me._em3_3
		End Get
		Set
			If ((Me._em3_3 = value)  _
						= false) Then
				Me.Onem3_3Changing(value)
				Me.SendPropertyChanging
				Me._em3_3 = value
				Me.SendPropertyChanged("em3_3")
				Me.Onem3_3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em3_4", DbType:="Int NOT NULL")>  _
	Public Property em3_4() As Integer
		Get
			Return Me._em3_4
		End Get
		Set
			If ((Me._em3_4 = value)  _
						= false) Then
				Me.Onem3_4Changing(value)
				Me.SendPropertyChanging
				Me._em3_4 = value
				Me.SendPropertyChanged("em3_4")
				Me.Onem3_4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em3_5", DbType:="Int NOT NULL")>  _
	Public Property em3_5() As Integer
		Get
			Return Me._em3_5
		End Get
		Set
			If ((Me._em3_5 = value)  _
						= false) Then
				Me.Onem3_5Changing(value)
				Me.SendPropertyChanging
				Me._em3_5 = value
				Me.SendPropertyChanged("em3_5")
				Me.Onem3_5Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_prob4", DbType:="Real NOT NULL")>  _
	Public Property prob4() As Single
		Get
			Return Me._prob4
		End Get
		Set
			If ((Me._prob4 = value)  _
						= false) Then
				Me.Onprob4Changing(value)
				Me.SendPropertyChanging
				Me._prob4 = value
				Me.SendPropertyChanged("prob4")
				Me.Onprob4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_text4_0", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property text4_0() As String
		Get
			Return Me._text4_0
		End Get
		Set
			If (String.Equals(Me._text4_0, value) = false) Then
				Me.Ontext4_0Changing(value)
				Me.SendPropertyChanging
				Me._text4_0 = value
				Me.SendPropertyChanged("text4_0")
				Me.Ontext4_0Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_text4_1", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property text4_1() As String
		Get
			Return Me._text4_1
		End Get
		Set
			If (String.Equals(Me._text4_1, value) = false) Then
				Me.Ontext4_1Changing(value)
				Me.SendPropertyChanging
				Me._text4_1 = value
				Me.SendPropertyChanged("text4_1")
				Me.Ontext4_1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_lang4", DbType:="Int NOT NULL")>  _
	Public Property lang4() As Integer
		Get
			Return Me._lang4
		End Get
		Set
			If ((Me._lang4 = value)  _
						= false) Then
				Me.Onlang4Changing(value)
				Me.SendPropertyChanging
				Me._lang4 = value
				Me.SendPropertyChanged("lang4")
				Me.Onlang4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em4_0", DbType:="Int NOT NULL")>  _
	Public Property em4_0() As Integer
		Get
			Return Me._em4_0
		End Get
		Set
			If ((Me._em4_0 = value)  _
						= false) Then
				Me.Onem4_0Changing(value)
				Me.SendPropertyChanging
				Me._em4_0 = value
				Me.SendPropertyChanged("em4_0")
				Me.Onem4_0Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em4_1", DbType:="Int NOT NULL")>  _
	Public Property em4_1() As Integer
		Get
			Return Me._em4_1
		End Get
		Set
			If ((Me._em4_1 = value)  _
						= false) Then
				Me.Onem4_1Changing(value)
				Me.SendPropertyChanging
				Me._em4_1 = value
				Me.SendPropertyChanged("em4_1")
				Me.Onem4_1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em4_2", DbType:="Int NOT NULL")>  _
	Public Property em4_2() As Integer
		Get
			Return Me._em4_2
		End Get
		Set
			If ((Me._em4_2 = value)  _
						= false) Then
				Me.Onem4_2Changing(value)
				Me.SendPropertyChanging
				Me._em4_2 = value
				Me.SendPropertyChanged("em4_2")
				Me.Onem4_2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em4_3", DbType:="Int NOT NULL")>  _
	Public Property em4_3() As Integer
		Get
			Return Me._em4_3
		End Get
		Set
			If ((Me._em4_3 = value)  _
						= false) Then
				Me.Onem4_3Changing(value)
				Me.SendPropertyChanging
				Me._em4_3 = value
				Me.SendPropertyChanged("em4_3")
				Me.Onem4_3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em4_4", DbType:="Int NOT NULL")>  _
	Public Property em4_4() As Integer
		Get
			Return Me._em4_4
		End Get
		Set
			If ((Me._em4_4 = value)  _
						= false) Then
				Me.Onem4_4Changing(value)
				Me.SendPropertyChanging
				Me._em4_4 = value
				Me.SendPropertyChanged("em4_4")
				Me.Onem4_4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em4_5", DbType:="Int NOT NULL")>  _
	Public Property em4_5() As Integer
		Get
			Return Me._em4_5
		End Get
		Set
			If ((Me._em4_5 = value)  _
						= false) Then
				Me.Onem4_5Changing(value)
				Me.SendPropertyChanging
				Me._em4_5 = value
				Me.SendPropertyChanged("em4_5")
				Me.Onem4_5Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_prob5", DbType:="Real NOT NULL")>  _
	Public Property prob5() As Single
		Get
			Return Me._prob5
		End Get
		Set
			If ((Me._prob5 = value)  _
						= false) Then
				Me.Onprob5Changing(value)
				Me.SendPropertyChanging
				Me._prob5 = value
				Me.SendPropertyChanged("prob5")
				Me.Onprob5Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_text5_0", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property text5_0() As String
		Get
			Return Me._text5_0
		End Get
		Set
			If (String.Equals(Me._text5_0, value) = false) Then
				Me.Ontext5_0Changing(value)
				Me.SendPropertyChanging
				Me._text5_0 = value
				Me.SendPropertyChanged("text5_0")
				Me.Ontext5_0Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_text5_1", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property text5_1() As String
		Get
			Return Me._text5_1
		End Get
		Set
			If (String.Equals(Me._text5_1, value) = false) Then
				Me.Ontext5_1Changing(value)
				Me.SendPropertyChanging
				Me._text5_1 = value
				Me.SendPropertyChanged("text5_1")
				Me.Ontext5_1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_lang5", DbType:="Int NOT NULL")>  _
	Public Property lang5() As Integer
		Get
			Return Me._lang5
		End Get
		Set
			If ((Me._lang5 = value)  _
						= false) Then
				Me.Onlang5Changing(value)
				Me.SendPropertyChanging
				Me._lang5 = value
				Me.SendPropertyChanged("lang5")
				Me.Onlang5Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em5_0", DbType:="Int NOT NULL")>  _
	Public Property em5_0() As Integer
		Get
			Return Me._em5_0
		End Get
		Set
			If ((Me._em5_0 = value)  _
						= false) Then
				Me.Onem5_0Changing(value)
				Me.SendPropertyChanging
				Me._em5_0 = value
				Me.SendPropertyChanged("em5_0")
				Me.Onem5_0Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em5_1", DbType:="Int NOT NULL")>  _
	Public Property em5_1() As Integer
		Get
			Return Me._em5_1
		End Get
		Set
			If ((Me._em5_1 = value)  _
						= false) Then
				Me.Onem5_1Changing(value)
				Me.SendPropertyChanging
				Me._em5_1 = value
				Me.SendPropertyChanged("em5_1")
				Me.Onem5_1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em5_2", DbType:="Int NOT NULL")>  _
	Public Property em5_2() As Integer
		Get
			Return Me._em5_2
		End Get
		Set
			If ((Me._em5_2 = value)  _
						= false) Then
				Me.Onem5_2Changing(value)
				Me.SendPropertyChanging
				Me._em5_2 = value
				Me.SendPropertyChanged("em5_2")
				Me.Onem5_2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em5_3", DbType:="Int NOT NULL")>  _
	Public Property em5_3() As Integer
		Get
			Return Me._em5_3
		End Get
		Set
			If ((Me._em5_3 = value)  _
						= false) Then
				Me.Onem5_3Changing(value)
				Me.SendPropertyChanging
				Me._em5_3 = value
				Me.SendPropertyChanged("em5_3")
				Me.Onem5_3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em5_4", DbType:="Int NOT NULL")>  _
	Public Property em5_4() As Integer
		Get
			Return Me._em5_4
		End Get
		Set
			If ((Me._em5_4 = value)  _
						= false) Then
				Me.Onem5_4Changing(value)
				Me.SendPropertyChanging
				Me._em5_4 = value
				Me.SendPropertyChanged("em5_4")
				Me.Onem5_4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em5_5", DbType:="Int NOT NULL")>  _
	Public Property em5_5() As Integer
		Get
			Return Me._em5_5
		End Get
		Set
			If ((Me._em5_5 = value)  _
						= false) Then
				Me.Onem5_5Changing(value)
				Me.SendPropertyChanging
				Me._em5_5 = value
				Me.SendPropertyChanged("em5_5")
				Me.Onem5_5Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_prob6", DbType:="Real NOT NULL")>  _
	Public Property prob6() As Single
		Get
			Return Me._prob6
		End Get
		Set
			If ((Me._prob6 = value)  _
						= false) Then
				Me.Onprob6Changing(value)
				Me.SendPropertyChanging
				Me._prob6 = value
				Me.SendPropertyChanged("prob6")
				Me.Onprob6Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_text6_0", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property text6_0() As String
		Get
			Return Me._text6_0
		End Get
		Set
			If (String.Equals(Me._text6_0, value) = false) Then
				Me.Ontext6_0Changing(value)
				Me.SendPropertyChanging
				Me._text6_0 = value
				Me.SendPropertyChanged("text6_0")
				Me.Ontext6_0Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_text6_1", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property text6_1() As String
		Get
			Return Me._text6_1
		End Get
		Set
			If (String.Equals(Me._text6_1, value) = false) Then
				Me.Ontext6_1Changing(value)
				Me.SendPropertyChanging
				Me._text6_1 = value
				Me.SendPropertyChanged("text6_1")
				Me.Ontext6_1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_lang6", DbType:="Int NOT NULL")>  _
	Public Property lang6() As Integer
		Get
			Return Me._lang6
		End Get
		Set
			If ((Me._lang6 = value)  _
						= false) Then
				Me.Onlang6Changing(value)
				Me.SendPropertyChanging
				Me._lang6 = value
				Me.SendPropertyChanged("lang6")
				Me.Onlang6Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em6_0", DbType:="Int NOT NULL")>  _
	Public Property em6_0() As Integer
		Get
			Return Me._em6_0
		End Get
		Set
			If ((Me._em6_0 = value)  _
						= false) Then
				Me.Onem6_0Changing(value)
				Me.SendPropertyChanging
				Me._em6_0 = value
				Me.SendPropertyChanged("em6_0")
				Me.Onem6_0Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em6_1", DbType:="Int NOT NULL")>  _
	Public Property em6_1() As Integer
		Get
			Return Me._em6_1
		End Get
		Set
			If ((Me._em6_1 = value)  _
						= false) Then
				Me.Onem6_1Changing(value)
				Me.SendPropertyChanging
				Me._em6_1 = value
				Me.SendPropertyChanged("em6_1")
				Me.Onem6_1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em6_2", DbType:="Int NOT NULL")>  _
	Public Property em6_2() As Integer
		Get
			Return Me._em6_2
		End Get
		Set
			If ((Me._em6_2 = value)  _
						= false) Then
				Me.Onem6_2Changing(value)
				Me.SendPropertyChanging
				Me._em6_2 = value
				Me.SendPropertyChanged("em6_2")
				Me.Onem6_2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em6_3", DbType:="Int NOT NULL")>  _
	Public Property em6_3() As Integer
		Get
			Return Me._em6_3
		End Get
		Set
			If ((Me._em6_3 = value)  _
						= false) Then
				Me.Onem6_3Changing(value)
				Me.SendPropertyChanging
				Me._em6_3 = value
				Me.SendPropertyChanged("em6_3")
				Me.Onem6_3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em6_4", DbType:="Int NOT NULL")>  _
	Public Property em6_4() As Integer
		Get
			Return Me._em6_4
		End Get
		Set
			If ((Me._em6_4 = value)  _
						= false) Then
				Me.Onem6_4Changing(value)
				Me.SendPropertyChanging
				Me._em6_4 = value
				Me.SendPropertyChanged("em6_4")
				Me.Onem6_4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em6_5", DbType:="Int NOT NULL")>  _
	Public Property em6_5() As Integer
		Get
			Return Me._em6_5
		End Get
		Set
			If ((Me._em6_5 = value)  _
						= false) Then
				Me.Onem6_5Changing(value)
				Me.SendPropertyChanging
				Me._em6_5 = value
				Me.SendPropertyChanged("em6_5")
				Me.Onem6_5Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_prob7", DbType:="Real NOT NULL")>  _
	Public Property prob7() As Single
		Get
			Return Me._prob7
		End Get
		Set
			If ((Me._prob7 = value)  _
						= false) Then
				Me.Onprob7Changing(value)
				Me.SendPropertyChanging
				Me._prob7 = value
				Me.SendPropertyChanged("prob7")
				Me.Onprob7Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_text7_0", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property text7_0() As String
		Get
			Return Me._text7_0
		End Get
		Set
			If (String.Equals(Me._text7_0, value) = false) Then
				Me.Ontext7_0Changing(value)
				Me.SendPropertyChanging
				Me._text7_0 = value
				Me.SendPropertyChanged("text7_0")
				Me.Ontext7_0Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_text7_1", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property text7_1() As String
		Get
			Return Me._text7_1
		End Get
		Set
			If (String.Equals(Me._text7_1, value) = false) Then
				Me.Ontext7_1Changing(value)
				Me.SendPropertyChanging
				Me._text7_1 = value
				Me.SendPropertyChanged("text7_1")
				Me.Ontext7_1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_lang7", DbType:="Int NOT NULL")>  _
	Public Property lang7() As Integer
		Get
			Return Me._lang7
		End Get
		Set
			If ((Me._lang7 = value)  _
						= false) Then
				Me.Onlang7Changing(value)
				Me.SendPropertyChanging
				Me._lang7 = value
				Me.SendPropertyChanged("lang7")
				Me.Onlang7Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em7_0", DbType:="Int NOT NULL")>  _
	Public Property em7_0() As Integer
		Get
			Return Me._em7_0
		End Get
		Set
			If ((Me._em7_0 = value)  _
						= false) Then
				Me.Onem7_0Changing(value)
				Me.SendPropertyChanging
				Me._em7_0 = value
				Me.SendPropertyChanged("em7_0")
				Me.Onem7_0Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em7_1", DbType:="Int NOT NULL")>  _
	Public Property em7_1() As Integer
		Get
			Return Me._em7_1
		End Get
		Set
			If ((Me._em7_1 = value)  _
						= false) Then
				Me.Onem7_1Changing(value)
				Me.SendPropertyChanging
				Me._em7_1 = value
				Me.SendPropertyChanged("em7_1")
				Me.Onem7_1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em7_2", DbType:="Int NOT NULL")>  _
	Public Property em7_2() As Integer
		Get
			Return Me._em7_2
		End Get
		Set
			If ((Me._em7_2 = value)  _
						= false) Then
				Me.Onem7_2Changing(value)
				Me.SendPropertyChanging
				Me._em7_2 = value
				Me.SendPropertyChanged("em7_2")
				Me.Onem7_2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em7_3", DbType:="Int NOT NULL")>  _
	Public Property em7_3() As Integer
		Get
			Return Me._em7_3
		End Get
		Set
			If ((Me._em7_3 = value)  _
						= false) Then
				Me.Onem7_3Changing(value)
				Me.SendPropertyChanging
				Me._em7_3 = value
				Me.SendPropertyChanged("em7_3")
				Me.Onem7_3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em7_4", DbType:="Int NOT NULL")>  _
	Public Property em7_4() As Integer
		Get
			Return Me._em7_4
		End Get
		Set
			If ((Me._em7_4 = value)  _
						= false) Then
				Me.Onem7_4Changing(value)
				Me.SendPropertyChanging
				Me._em7_4 = value
				Me.SendPropertyChanged("em7_4")
				Me.Onem7_4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_em7_5", DbType:="Int NOT NULL")>  _
	Public Property em7_5() As Integer
		Get
			Return Me._em7_5
		End Get
		Set
			If ((Me._em7_5 = value)  _
						= false) Then
				Me.Onem7_5Changing(value)
				Me.SendPropertyChanging
				Me._em7_5 = value
				Me.SendPropertyChanged("em7_5")
				Me.Onem7_5Changed
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.weather")>  _
Partial Public Class weather
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _zone As Integer
	
	Private _spring_rain_chance As Byte
	
	Private _spring_snow_chance As Byte
	
	Private _spring_storm_chance As Byte
	
	Private _summer_rain_chance As Byte
	
	Private _summer_snow_chance As Byte
	
	Private _summer_storm_chance As Byte
	
	Private _fall_rain_chance As Byte
	
	Private _fall_snow_chance As Byte
	
	Private _fall_storm_chance As Byte
	
	Private _winter_rain_chance As Byte
	
	Private _winter_snow_chance As Byte
	
	Private _winter_storm_chance As Byte
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnzoneChanging(value As Integer)
    End Sub
    Partial Private Sub OnzoneChanged()
    End Sub
    Partial Private Sub Onspring_rain_chanceChanging(value As Byte)
    End Sub
    Partial Private Sub Onspring_rain_chanceChanged()
    End Sub
    Partial Private Sub Onspring_snow_chanceChanging(value As Byte)
    End Sub
    Partial Private Sub Onspring_snow_chanceChanged()
    End Sub
    Partial Private Sub Onspring_storm_chanceChanging(value As Byte)
    End Sub
    Partial Private Sub Onspring_storm_chanceChanged()
    End Sub
    Partial Private Sub Onsummer_rain_chanceChanging(value As Byte)
    End Sub
    Partial Private Sub Onsummer_rain_chanceChanged()
    End Sub
    Partial Private Sub Onsummer_snow_chanceChanging(value As Byte)
    End Sub
    Partial Private Sub Onsummer_snow_chanceChanged()
    End Sub
    Partial Private Sub Onsummer_storm_chanceChanging(value As Byte)
    End Sub
    Partial Private Sub Onsummer_storm_chanceChanged()
    End Sub
    Partial Private Sub Onfall_rain_chanceChanging(value As Byte)
    End Sub
    Partial Private Sub Onfall_rain_chanceChanged()
    End Sub
    Partial Private Sub Onfall_snow_chanceChanging(value As Byte)
    End Sub
    Partial Private Sub Onfall_snow_chanceChanged()
    End Sub
    Partial Private Sub Onfall_storm_chanceChanging(value As Byte)
    End Sub
    Partial Private Sub Onfall_storm_chanceChanged()
    End Sub
    Partial Private Sub Onwinter_rain_chanceChanging(value As Byte)
    End Sub
    Partial Private Sub Onwinter_rain_chanceChanged()
    End Sub
    Partial Private Sub Onwinter_snow_chanceChanging(value As Byte)
    End Sub
    Partial Private Sub Onwinter_snow_chanceChanged()
    End Sub
    Partial Private Sub Onwinter_storm_chanceChanging(value As Byte)
    End Sub
    Partial Private Sub Onwinter_storm_chanceChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_zone", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property zone() As Integer
		Get
			Return Me._zone
		End Get
		Set
			If ((Me._zone = value)  _
						= false) Then
				Me.OnzoneChanging(value)
				Me.SendPropertyChanging
				Me._zone = value
				Me.SendPropertyChanged("zone")
				Me.OnzoneChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_spring_rain_chance", DbType:="TinyInt NOT NULL")>  _
	Public Property spring_rain_chance() As Byte
		Get
			Return Me._spring_rain_chance
		End Get
		Set
			If ((Me._spring_rain_chance = value)  _
						= false) Then
				Me.Onspring_rain_chanceChanging(value)
				Me.SendPropertyChanging
				Me._spring_rain_chance = value
				Me.SendPropertyChanged("spring_rain_chance")
				Me.Onspring_rain_chanceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_spring_snow_chance", DbType:="TinyInt NOT NULL")>  _
	Public Property spring_snow_chance() As Byte
		Get
			Return Me._spring_snow_chance
		End Get
		Set
			If ((Me._spring_snow_chance = value)  _
						= false) Then
				Me.Onspring_snow_chanceChanging(value)
				Me.SendPropertyChanging
				Me._spring_snow_chance = value
				Me.SendPropertyChanged("spring_snow_chance")
				Me.Onspring_snow_chanceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_spring_storm_chance", DbType:="TinyInt NOT NULL")>  _
	Public Property spring_storm_chance() As Byte
		Get
			Return Me._spring_storm_chance
		End Get
		Set
			If ((Me._spring_storm_chance = value)  _
						= false) Then
				Me.Onspring_storm_chanceChanging(value)
				Me.SendPropertyChanging
				Me._spring_storm_chance = value
				Me.SendPropertyChanged("spring_storm_chance")
				Me.Onspring_storm_chanceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_summer_rain_chance", DbType:="TinyInt NOT NULL")>  _
	Public Property summer_rain_chance() As Byte
		Get
			Return Me._summer_rain_chance
		End Get
		Set
			If ((Me._summer_rain_chance = value)  _
						= false) Then
				Me.Onsummer_rain_chanceChanging(value)
				Me.SendPropertyChanging
				Me._summer_rain_chance = value
				Me.SendPropertyChanged("summer_rain_chance")
				Me.Onsummer_rain_chanceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_summer_snow_chance", DbType:="TinyInt NOT NULL")>  _
	Public Property summer_snow_chance() As Byte
		Get
			Return Me._summer_snow_chance
		End Get
		Set
			If ((Me._summer_snow_chance = value)  _
						= false) Then
				Me.Onsummer_snow_chanceChanging(value)
				Me.SendPropertyChanging
				Me._summer_snow_chance = value
				Me.SendPropertyChanged("summer_snow_chance")
				Me.Onsummer_snow_chanceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_summer_storm_chance", DbType:="TinyInt NOT NULL")>  _
	Public Property summer_storm_chance() As Byte
		Get
			Return Me._summer_storm_chance
		End Get
		Set
			If ((Me._summer_storm_chance = value)  _
						= false) Then
				Me.Onsummer_storm_chanceChanging(value)
				Me.SendPropertyChanging
				Me._summer_storm_chance = value
				Me.SendPropertyChanged("summer_storm_chance")
				Me.Onsummer_storm_chanceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_fall_rain_chance", DbType:="TinyInt NOT NULL")>  _
	Public Property fall_rain_chance() As Byte
		Get
			Return Me._fall_rain_chance
		End Get
		Set
			If ((Me._fall_rain_chance = value)  _
						= false) Then
				Me.Onfall_rain_chanceChanging(value)
				Me.SendPropertyChanging
				Me._fall_rain_chance = value
				Me.SendPropertyChanged("fall_rain_chance")
				Me.Onfall_rain_chanceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_fall_snow_chance", DbType:="TinyInt NOT NULL")>  _
	Public Property fall_snow_chance() As Byte
		Get
			Return Me._fall_snow_chance
		End Get
		Set
			If ((Me._fall_snow_chance = value)  _
						= false) Then
				Me.Onfall_snow_chanceChanging(value)
				Me.SendPropertyChanging
				Me._fall_snow_chance = value
				Me.SendPropertyChanged("fall_snow_chance")
				Me.Onfall_snow_chanceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_fall_storm_chance", DbType:="TinyInt NOT NULL")>  _
	Public Property fall_storm_chance() As Byte
		Get
			Return Me._fall_storm_chance
		End Get
		Set
			If ((Me._fall_storm_chance = value)  _
						= false) Then
				Me.Onfall_storm_chanceChanging(value)
				Me.SendPropertyChanging
				Me._fall_storm_chance = value
				Me.SendPropertyChanged("fall_storm_chance")
				Me.Onfall_storm_chanceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_winter_rain_chance", DbType:="TinyInt NOT NULL")>  _
	Public Property winter_rain_chance() As Byte
		Get
			Return Me._winter_rain_chance
		End Get
		Set
			If ((Me._winter_rain_chance = value)  _
						= false) Then
				Me.Onwinter_rain_chanceChanging(value)
				Me.SendPropertyChanging
				Me._winter_rain_chance = value
				Me.SendPropertyChanged("winter_rain_chance")
				Me.Onwinter_rain_chanceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_winter_snow_chance", DbType:="TinyInt NOT NULL")>  _
	Public Property winter_snow_chance() As Byte
		Get
			Return Me._winter_snow_chance
		End Get
		Set
			If ((Me._winter_snow_chance = value)  _
						= false) Then
				Me.Onwinter_snow_chanceChanging(value)
				Me.SendPropertyChanging
				Me._winter_snow_chance = value
				Me.SendPropertyChanged("winter_snow_chance")
				Me.Onwinter_snow_chanceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_winter_storm_chance", DbType:="TinyInt NOT NULL")>  _
	Public Property winter_storm_chance() As Byte
		Get
			Return Me._winter_storm_chance
		End Get
		Set
			If ((Me._winter_storm_chance = value)  _
						= false) Then
				Me.Onwinter_storm_chanceChanging(value)
				Me.SendPropertyChanging
				Me._winter_storm_chance = value
				Me.SendPropertyChanged("winter_storm_chance")
				Me.Onwinter_storm_chanceChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.itempages")>  _
Partial Public Class itempage
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _entry As Integer
	
	Private _text As String
	
	Private _next_page As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnentryChanging(value As Integer)
    End Sub
    Partial Private Sub OnentryChanged()
    End Sub
    Partial Private Sub OntextChanging(value As String)
    End Sub
    Partial Private Sub OntextChanged()
    End Sub
    Partial Private Sub Onnext_pageChanging(value As Integer)
    End Sub
    Partial Private Sub Onnext_pageChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_entry", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property entry() As Integer
		Get
			Return Me._entry
		End Get
		Set
			If ((Me._entry = value)  _
						= false) Then
				Me.OnentryChanging(value)
				Me.SendPropertyChanging
				Me._entry = value
				Me.SendPropertyChanged("entry")
				Me.OnentryChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_text", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property text() As String
		Get
			Return Me._text
		End Get
		Set
			If (String.Equals(Me._text, value) = false) Then
				Me.OntextChanging(value)
				Me.SendPropertyChanging
				Me._text = value
				Me.SendPropertyChanged("text")
				Me.OntextChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_next_page", DbType:="Int NOT NULL")>  _
	Public Property next_page() As Integer
		Get
			Return Me._next_page
		End Get
		Set
			If ((Me._next_page = value)  _
						= false) Then
				Me.Onnext_pageChanging(value)
				Me.SendPropertyChanging
				Me._next_page = value
				Me.SendPropertyChanged("next_page")
				Me.Onnext_pageChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.itempetfood")>  _
Partial Public Class itempetfood
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _entry As Integer
	
	Private _food_type As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnentryChanging(value As Integer)
    End Sub
    Partial Private Sub OnentryChanged()
    End Sub
    Partial Private Sub Onfood_typeChanging(value As Integer)
    End Sub
    Partial Private Sub Onfood_typeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_entry", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property entry() As Integer
		Get
			Return Me._entry
		End Get
		Set
			If ((Me._entry = value)  _
						= false) Then
				Me.OnentryChanging(value)
				Me.SendPropertyChanging
				Me._entry = value
				Me.SendPropertyChanged("entry")
				Me.OnentryChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_food_type", DbType:="Int NOT NULL")>  _
	Public Property food_type() As Integer
		Get
			Return Me._food_type
		End Get
		Set
			If ((Me._food_type = value)  _
						= false) Then
				Me.Onfood_typeChanging(value)
				Me.SendPropertyChanging
				Me._food_type = value
				Me.SendPropertyChanged("food_type")
				Me.Onfood_typeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.loots_skinning")>  _
Partial Public Class loots_skinning
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _loot_id As Integer
	
	Private _loot_creature As Integer
	
	Private _loot_item As Integer
	
	Private _loot_chance As Single
	
	Private _loot_heroicchance As Single
	
	Private _loot_min As Short
	
	Private _loot_max As Short
	
	Private _loot_ffa As Short
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onloot_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onloot_idChanged()
    End Sub
    Partial Private Sub Onloot_creatureChanging(value As Integer)
    End Sub
    Partial Private Sub Onloot_creatureChanged()
    End Sub
    Partial Private Sub Onloot_itemChanging(value As Integer)
    End Sub
    Partial Private Sub Onloot_itemChanged()
    End Sub
    Partial Private Sub Onloot_chanceChanging(value As Single)
    End Sub
    Partial Private Sub Onloot_chanceChanged()
    End Sub
    Partial Private Sub Onloot_heroicchanceChanging(value As Single)
    End Sub
    Partial Private Sub Onloot_heroicchanceChanged()
    End Sub
    Partial Private Sub Onloot_minChanging(value As Short)
    End Sub
    Partial Private Sub Onloot_minChanged()
    End Sub
    Partial Private Sub Onloot_maxChanging(value As Short)
    End Sub
    Partial Private Sub Onloot_maxChanged()
    End Sub
    Partial Private Sub Onloot_ffaChanging(value As Short)
    End Sub
    Partial Private Sub Onloot_ffaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_loot_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property loot_id() As Integer
		Get
			Return Me._loot_id
		End Get
		Set
			If ((Me._loot_id = value)  _
						= false) Then
				Me.Onloot_idChanging(value)
				Me.SendPropertyChanging
				Me._loot_id = value
				Me.SendPropertyChanged("loot_id")
				Me.Onloot_idChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_loot_creature", DbType:="Int NOT NULL")>  _
	Public Property loot_creature() As Integer
		Get
			Return Me._loot_creature
		End Get
		Set
			If ((Me._loot_creature = value)  _
						= false) Then
				Me.Onloot_creatureChanging(value)
				Me.SendPropertyChanging
				Me._loot_creature = value
				Me.SendPropertyChanged("loot_creature")
				Me.Onloot_creatureChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_loot_item", DbType:="Int NOT NULL")>  _
	Public Property loot_item() As Integer
		Get
			Return Me._loot_item
		End Get
		Set
			If ((Me._loot_item = value)  _
						= false) Then
				Me.Onloot_itemChanging(value)
				Me.SendPropertyChanging
				Me._loot_item = value
				Me.SendPropertyChanged("loot_item")
				Me.Onloot_itemChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_loot_chance", DbType:="Real NOT NULL")>  _
	Public Property loot_chance() As Single
		Get
			Return Me._loot_chance
		End Get
		Set
			If ((Me._loot_chance = value)  _
						= false) Then
				Me.Onloot_chanceChanging(value)
				Me.SendPropertyChanging
				Me._loot_chance = value
				Me.SendPropertyChanged("loot_chance")
				Me.Onloot_chanceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_loot_heroicchance", DbType:="Real NOT NULL")>  _
	Public Property loot_heroicchance() As Single
		Get
			Return Me._loot_heroicchance
		End Get
		Set
			If ((Me._loot_heroicchance = value)  _
						= false) Then
				Me.Onloot_heroicchanceChanging(value)
				Me.SendPropertyChanging
				Me._loot_heroicchance = value
				Me.SendPropertyChanged("loot_heroicchance")
				Me.Onloot_heroicchanceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_loot_min", DbType:="SmallInt NOT NULL")>  _
	Public Property loot_min() As Short
		Get
			Return Me._loot_min
		End Get
		Set
			If ((Me._loot_min = value)  _
						= false) Then
				Me.Onloot_minChanging(value)
				Me.SendPropertyChanging
				Me._loot_min = value
				Me.SendPropertyChanged("loot_min")
				Me.Onloot_minChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_loot_max", DbType:="SmallInt NOT NULL")>  _
	Public Property loot_max() As Short
		Get
			Return Me._loot_max
		End Get
		Set
			If ((Me._loot_max = value)  _
						= false) Then
				Me.Onloot_maxChanging(value)
				Me.SendPropertyChanging
				Me._loot_max = value
				Me.SendPropertyChanged("loot_max")
				Me.Onloot_maxChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_loot_ffa", DbType:="SmallInt NOT NULL")>  _
	Public Property loot_ffa() As Short
		Get
			Return Me._loot_ffa
		End Get
		Set
			If ((Me._loot_ffa = value)  _
						= false) Then
				Me.Onloot_ffaChanging(value)
				Me.SendPropertyChanging
				Me._loot_ffa = value
				Me.SendPropertyChanged("loot_ffa")
				Me.Onloot_ffaChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.itemloot")>  _
Partial Public Class itemloot
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _index As Integer
	
	Private _entryid As Integer
	
	Private _itemid As Integer
	
	Private _percentchance As Single
	
	Private _heroicpercentchance As Single
	
	Private _mincount As Integer
	
	Private _maxcount As Integer
	
	Private _ffa_loot As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnindexChanging(value As Integer)
    End Sub
    Partial Private Sub OnindexChanged()
    End Sub
    Partial Private Sub OnentryidChanging(value As Integer)
    End Sub
    Partial Private Sub OnentryidChanged()
    End Sub
    Partial Private Sub OnitemidChanging(value As Integer)
    End Sub
    Partial Private Sub OnitemidChanged()
    End Sub
    Partial Private Sub OnpercentchanceChanging(value As Single)
    End Sub
    Partial Private Sub OnpercentchanceChanged()
    End Sub
    Partial Private Sub OnheroicpercentchanceChanging(value As Single)
    End Sub
    Partial Private Sub OnheroicpercentchanceChanged()
    End Sub
    Partial Private Sub OnmincountChanging(value As Integer)
    End Sub
    Partial Private Sub OnmincountChanged()
    End Sub
    Partial Private Sub OnmaxcountChanging(value As Integer)
    End Sub
    Partial Private Sub OnmaxcountChanged()
    End Sub
    Partial Private Sub Onffa_lootChanging(value As Integer)
    End Sub
    Partial Private Sub Onffa_lootChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Name:="[index]", Storage:="_index", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property index() As Integer
		Get
			Return Me._index
		End Get
		Set
			If ((Me._index = value)  _
						= false) Then
				Me.OnindexChanging(value)
				Me.SendPropertyChanging
				Me._index = value
				Me.SendPropertyChanged("index")
				Me.OnindexChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_entryid", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property entryid() As Integer
		Get
			Return Me._entryid
		End Get
		Set
			If ((Me._entryid = value)  _
						= false) Then
				Me.OnentryidChanging(value)
				Me.SendPropertyChanging
				Me._entryid = value
				Me.SendPropertyChanged("entryid")
				Me.OnentryidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_itemid", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property itemid() As Integer
		Get
			Return Me._itemid
		End Get
		Set
			If ((Me._itemid = value)  _
						= false) Then
				Me.OnitemidChanging(value)
				Me.SendPropertyChanging
				Me._itemid = value
				Me.SendPropertyChanged("itemid")
				Me.OnitemidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_percentchance", DbType:="Real NOT NULL")>  _
	Public Property percentchance() As Single
		Get
			Return Me._percentchance
		End Get
		Set
			If ((Me._percentchance = value)  _
						= false) Then
				Me.OnpercentchanceChanging(value)
				Me.SendPropertyChanging
				Me._percentchance = value
				Me.SendPropertyChanged("percentchance")
				Me.OnpercentchanceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_heroicpercentchance", DbType:="Real NOT NULL")>  _
	Public Property heroicpercentchance() As Single
		Get
			Return Me._heroicpercentchance
		End Get
		Set
			If ((Me._heroicpercentchance = value)  _
						= false) Then
				Me.OnheroicpercentchanceChanging(value)
				Me.SendPropertyChanging
				Me._heroicpercentchance = value
				Me.SendPropertyChanged("heroicpercentchance")
				Me.OnheroicpercentchanceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_mincount", DbType:="Int NOT NULL")>  _
	Public Property mincount() As Integer
		Get
			Return Me._mincount
		End Get
		Set
			If ((Me._mincount = value)  _
						= false) Then
				Me.OnmincountChanging(value)
				Me.SendPropertyChanging
				Me._mincount = value
				Me.SendPropertyChanged("mincount")
				Me.OnmincountChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_maxcount", DbType:="Int NOT NULL")>  _
	Public Property maxcount() As Integer
		Get
			Return Me._maxcount
		End Get
		Set
			If ((Me._maxcount = value)  _
						= false) Then
				Me.OnmaxcountChanging(value)
				Me.SendPropertyChanging
				Me._maxcount = value
				Me.SendPropertyChanged("maxcount")
				Me.OnmaxcountChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ffa_loot", DbType:="Int NOT NULL")>  _
	Public Property ffa_loot() As Integer
		Get
			Return Me._ffa_loot
		End Get
		Set
			If ((Me._ffa_loot = value)  _
						= false) Then
				Me.Onffa_lootChanging(value)
				Me.SendPropertyChanging
				Me._ffa_loot = value
				Me.SendPropertyChanged("ffa_loot")
				Me.Onffa_lootChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.creatures")>  _
Partial Public Class creature
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _creature_id As Integer
	
	Private _creature_name As String
	
	Private _creature_guild As String
	
	Private _info_str As String
	
	Private _KillCredit1 As Integer
	
	Private _KillCredit2 As Integer
	
	Private _creature_model As Integer
	
	Private _creature_femalemodel As Integer
	
	Private _creature_model2 As Integer
	
	Private _creature_femalemodel2 As Integer
	
	Private _creature_size As Single
	
	Private _creature_minlife As Integer
	
	Private _creature_maxlife As Integer
	
	Private _creature_minmana As Integer
	
	Private _creature_maxmana As Integer
	
	Private _creature_manaType As Integer
	
	Private _creature_elite As Integer
	
	Private _creature_leader As System.Nullable(Of Integer)
	
	Private _creature_faction As Integer
	
	Private _creature_family As Integer
	
	Private _creature_type As Integer
	
	Private _creature_spelldataid As System.Nullable(Of Integer)
	
	Private _creature_minDamage As Single
	
	Private _creature_maxDamage As Single
	
	Private _creature_minRangedDamage As Single
	
	Private _creature_maxRangedDamage As Single
	
	Private _creature_armor As Integer
	
	Private _creature_resHoly As Integer
	
	Private _creature_resFire As Integer
	
	Private _creature_resNature As Integer
	
	Private _creature_resFrost As Integer
	
	Private _creature_resShadow As Integer
	
	Private _creature_resArcane As Integer
	
	Private _creature_walkSpeed As Single
	
	Private _creature_runSpeed As Single
	
	Private _creature_flySpeed As Single
	
	Private _creature_respawnTime As Integer
	
	Private _creature_baseAttackSpeed As Integer
	
	Private _creature_baseRangedAttackSpeed As Integer
	
	Private _creature_combatReach As Single
	
	Private _creature_bondingRadius As Single
	
	Private _creature_npcFlags As Integer
	
	Private _creature_flags As Integer
	
	Private _creature_minLevel As Integer
	
	Private _creature_maxLevel As Integer
	
	Private _creature_loot As Integer
	
	Private _creature_skinloot As Integer
	
	Private _creature_pickpocketloot As Integer
	
	Private _creature_equipmententry As Integer
	
	Private _creature_equipmodel1 As Integer
	
	Private _creature_equipmodel2 As Integer
	
	Private _creature_equipmodel3 As Integer
	
	Private _creature_equipinfo1 As Integer
	
	Private _creature_equipinfo2 As Integer
	
	Private _creature_equipinfo3 As Integer
	
	Private _creature_equipslot1 As Integer
	
	Private _creature_equipslot2 As Integer
	
	Private _creature_equipslot3 As Integer
	
	Private _creature_unkfloat1 As System.Nullable(Of Single)
	
	Private _creature_unkfloat2 As System.Nullable(Of Single)
	
	Private _creature_aiScript As String
	
	Private _creature_minGold As Integer
	
	Private _creature_maxGold As Integer
	
	Private _creature_trainerType As Integer
	
	Private _creature_trainerSpell As Integer
	
	Private _creature_trainerClass As Integer
	
	Private _creature_trainerRace As Integer
	
	Private _creature_movementType As Integer
	
	Private _creature_regenHealth As Integer
	
	Private _creature_mechanicImmuneMask As Integer
	
	Private _creature_flagsExtra As Integer
	
	Private _questItem1 As Integer
	
	Private _questItem2 As Integer
	
	Private _questItem3 As Integer
	
	Private _questItem4 As Integer
	
	Private _questItem5 As Integer
	
	Private _questItem6 As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Oncreature_idChanging(value As Integer)
    End Sub
    Partial Private Sub Oncreature_idChanged()
    End Sub
    Partial Private Sub Oncreature_nameChanging(value As String)
    End Sub
    Partial Private Sub Oncreature_nameChanged()
    End Sub
    Partial Private Sub Oncreature_guildChanging(value As String)
    End Sub
    Partial Private Sub Oncreature_guildChanged()
    End Sub
    Partial Private Sub Oninfo_strChanging(value As String)
    End Sub
    Partial Private Sub Oninfo_strChanged()
    End Sub
    Partial Private Sub OnKillCredit1Changing(value As Integer)
    End Sub
    Partial Private Sub OnKillCredit1Changed()
    End Sub
    Partial Private Sub OnKillCredit2Changing(value As Integer)
    End Sub
    Partial Private Sub OnKillCredit2Changed()
    End Sub
    Partial Private Sub Oncreature_modelChanging(value As Integer)
    End Sub
    Partial Private Sub Oncreature_modelChanged()
    End Sub
    Partial Private Sub Oncreature_femalemodelChanging(value As Integer)
    End Sub
    Partial Private Sub Oncreature_femalemodelChanged()
    End Sub
    Partial Private Sub Oncreature_model2Changing(value As Integer)
    End Sub
    Partial Private Sub Oncreature_model2Changed()
    End Sub
    Partial Private Sub Oncreature_femalemodel2Changing(value As Integer)
    End Sub
    Partial Private Sub Oncreature_femalemodel2Changed()
    End Sub
    Partial Private Sub Oncreature_sizeChanging(value As Single)
    End Sub
    Partial Private Sub Oncreature_sizeChanged()
    End Sub
    Partial Private Sub Oncreature_minlifeChanging(value As Integer)
    End Sub
    Partial Private Sub Oncreature_minlifeChanged()
    End Sub
    Partial Private Sub Oncreature_maxlifeChanging(value As Integer)
    End Sub
    Partial Private Sub Oncreature_maxlifeChanged()
    End Sub
    Partial Private Sub Oncreature_minmanaChanging(value As Integer)
    End Sub
    Partial Private Sub Oncreature_minmanaChanged()
    End Sub
    Partial Private Sub Oncreature_maxmanaChanging(value As Integer)
    End Sub
    Partial Private Sub Oncreature_maxmanaChanged()
    End Sub
    Partial Private Sub Oncreature_manaTypeChanging(value As Integer)
    End Sub
    Partial Private Sub Oncreature_manaTypeChanged()
    End Sub
    Partial Private Sub Oncreature_eliteChanging(value As Integer)
    End Sub
    Partial Private Sub Oncreature_eliteChanged()
    End Sub
    Partial Private Sub Oncreature_leaderChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncreature_leaderChanged()
    End Sub
    Partial Private Sub Oncreature_factionChanging(value As Integer)
    End Sub
    Partial Private Sub Oncreature_factionChanged()
    End Sub
    Partial Private Sub Oncreature_familyChanging(value As Integer)
    End Sub
    Partial Private Sub Oncreature_familyChanged()
    End Sub
    Partial Private Sub Oncreature_typeChanging(value As Integer)
    End Sub
    Partial Private Sub Oncreature_typeChanged()
    End Sub
    Partial Private Sub Oncreature_spelldataidChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncreature_spelldataidChanged()
    End Sub
    Partial Private Sub Oncreature_minDamageChanging(value As Single)
    End Sub
    Partial Private Sub Oncreature_minDamageChanged()
    End Sub
    Partial Private Sub Oncreature_maxDamageChanging(value As Single)
    End Sub
    Partial Private Sub Oncreature_maxDamageChanged()
    End Sub
    Partial Private Sub Oncreature_minRangedDamageChanging(value As Single)
    End Sub
    Partial Private Sub Oncreature_minRangedDamageChanged()
    End Sub
    Partial Private Sub Oncreature_maxRangedDamageChanging(value As Single)
    End Sub
    Partial Private Sub Oncreature_maxRangedDamageChanged()
    End Sub
    Partial Private Sub Oncreature_armorChanging(value As Integer)
    End Sub
    Partial Private Sub Oncreature_armorChanged()
    End Sub
    Partial Private Sub Oncreature_resHolyChanging(value As Integer)
    End Sub
    Partial Private Sub Oncreature_resHolyChanged()
    End Sub
    Partial Private Sub Oncreature_resFireChanging(value As Integer)
    End Sub
    Partial Private Sub Oncreature_resFireChanged()
    End Sub
    Partial Private Sub Oncreature_resNatureChanging(value As Integer)
    End Sub
    Partial Private Sub Oncreature_resNatureChanged()
    End Sub
    Partial Private Sub Oncreature_resFrostChanging(value As Integer)
    End Sub
    Partial Private Sub Oncreature_resFrostChanged()
    End Sub
    Partial Private Sub Oncreature_resShadowChanging(value As Integer)
    End Sub
    Partial Private Sub Oncreature_resShadowChanged()
    End Sub
    Partial Private Sub Oncreature_resArcaneChanging(value As Integer)
    End Sub
    Partial Private Sub Oncreature_resArcaneChanged()
    End Sub
    Partial Private Sub Oncreature_walkSpeedChanging(value As Single)
    End Sub
    Partial Private Sub Oncreature_walkSpeedChanged()
    End Sub
    Partial Private Sub Oncreature_runSpeedChanging(value As Single)
    End Sub
    Partial Private Sub Oncreature_runSpeedChanged()
    End Sub
    Partial Private Sub Oncreature_flySpeedChanging(value As Single)
    End Sub
    Partial Private Sub Oncreature_flySpeedChanged()
    End Sub
    Partial Private Sub Oncreature_respawnTimeChanging(value As Integer)
    End Sub
    Partial Private Sub Oncreature_respawnTimeChanged()
    End Sub
    Partial Private Sub Oncreature_baseAttackSpeedChanging(value As Integer)
    End Sub
    Partial Private Sub Oncreature_baseAttackSpeedChanged()
    End Sub
    Partial Private Sub Oncreature_baseRangedAttackSpeedChanging(value As Integer)
    End Sub
    Partial Private Sub Oncreature_baseRangedAttackSpeedChanged()
    End Sub
    Partial Private Sub Oncreature_combatReachChanging(value As Single)
    End Sub
    Partial Private Sub Oncreature_combatReachChanged()
    End Sub
    Partial Private Sub Oncreature_bondingRadiusChanging(value As Single)
    End Sub
    Partial Private Sub Oncreature_bondingRadiusChanged()
    End Sub
    Partial Private Sub Oncreature_npcFlagsChanging(value As Integer)
    End Sub
    Partial Private Sub Oncreature_npcFlagsChanged()
    End Sub
    Partial Private Sub Oncreature_flagsChanging(value As Integer)
    End Sub
    Partial Private Sub Oncreature_flagsChanged()
    End Sub
    Partial Private Sub Oncreature_minLevelChanging(value As Integer)
    End Sub
    Partial Private Sub Oncreature_minLevelChanged()
    End Sub
    Partial Private Sub Oncreature_maxLevelChanging(value As Integer)
    End Sub
    Partial Private Sub Oncreature_maxLevelChanged()
    End Sub
    Partial Private Sub Oncreature_lootChanging(value As Integer)
    End Sub
    Partial Private Sub Oncreature_lootChanged()
    End Sub
    Partial Private Sub Oncreature_skinlootChanging(value As Integer)
    End Sub
    Partial Private Sub Oncreature_skinlootChanged()
    End Sub
    Partial Private Sub Oncreature_pickpocketlootChanging(value As Integer)
    End Sub
    Partial Private Sub Oncreature_pickpocketlootChanged()
    End Sub
    Partial Private Sub Oncreature_equipmententryChanging(value As Integer)
    End Sub
    Partial Private Sub Oncreature_equipmententryChanged()
    End Sub
    Partial Private Sub Oncreature_equipmodel1Changing(value As Integer)
    End Sub
    Partial Private Sub Oncreature_equipmodel1Changed()
    End Sub
    Partial Private Sub Oncreature_equipmodel2Changing(value As Integer)
    End Sub
    Partial Private Sub Oncreature_equipmodel2Changed()
    End Sub
    Partial Private Sub Oncreature_equipmodel3Changing(value As Integer)
    End Sub
    Partial Private Sub Oncreature_equipmodel3Changed()
    End Sub
    Partial Private Sub Oncreature_equipinfo1Changing(value As Integer)
    End Sub
    Partial Private Sub Oncreature_equipinfo1Changed()
    End Sub
    Partial Private Sub Oncreature_equipinfo2Changing(value As Integer)
    End Sub
    Partial Private Sub Oncreature_equipinfo2Changed()
    End Sub
    Partial Private Sub Oncreature_equipinfo3Changing(value As Integer)
    End Sub
    Partial Private Sub Oncreature_equipinfo3Changed()
    End Sub
    Partial Private Sub Oncreature_equipslot1Changing(value As Integer)
    End Sub
    Partial Private Sub Oncreature_equipslot1Changed()
    End Sub
    Partial Private Sub Oncreature_equipslot2Changing(value As Integer)
    End Sub
    Partial Private Sub Oncreature_equipslot2Changed()
    End Sub
    Partial Private Sub Oncreature_equipslot3Changing(value As Integer)
    End Sub
    Partial Private Sub Oncreature_equipslot3Changed()
    End Sub
    Partial Private Sub Oncreature_unkfloat1Changing(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Oncreature_unkfloat1Changed()
    End Sub
    Partial Private Sub Oncreature_unkfloat2Changing(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub Oncreature_unkfloat2Changed()
    End Sub
    Partial Private Sub Oncreature_aiScriptChanging(value As String)
    End Sub
    Partial Private Sub Oncreature_aiScriptChanged()
    End Sub
    Partial Private Sub Oncreature_minGoldChanging(value As Integer)
    End Sub
    Partial Private Sub Oncreature_minGoldChanged()
    End Sub
    Partial Private Sub Oncreature_maxGoldChanging(value As Integer)
    End Sub
    Partial Private Sub Oncreature_maxGoldChanged()
    End Sub
    Partial Private Sub Oncreature_trainerTypeChanging(value As Integer)
    End Sub
    Partial Private Sub Oncreature_trainerTypeChanged()
    End Sub
    Partial Private Sub Oncreature_trainerSpellChanging(value As Integer)
    End Sub
    Partial Private Sub Oncreature_trainerSpellChanged()
    End Sub
    Partial Private Sub Oncreature_trainerClassChanging(value As Integer)
    End Sub
    Partial Private Sub Oncreature_trainerClassChanged()
    End Sub
    Partial Private Sub Oncreature_trainerRaceChanging(value As Integer)
    End Sub
    Partial Private Sub Oncreature_trainerRaceChanged()
    End Sub
    Partial Private Sub Oncreature_movementTypeChanging(value As Integer)
    End Sub
    Partial Private Sub Oncreature_movementTypeChanged()
    End Sub
    Partial Private Sub Oncreature_regenHealthChanging(value As Integer)
    End Sub
    Partial Private Sub Oncreature_regenHealthChanged()
    End Sub
    Partial Private Sub Oncreature_mechanicImmuneMaskChanging(value As Integer)
    End Sub
    Partial Private Sub Oncreature_mechanicImmuneMaskChanged()
    End Sub
    Partial Private Sub Oncreature_flagsExtraChanging(value As Integer)
    End Sub
    Partial Private Sub Oncreature_flagsExtraChanged()
    End Sub
    Partial Private Sub OnquestItem1Changing(value As Integer)
    End Sub
    Partial Private Sub OnquestItem1Changed()
    End Sub
    Partial Private Sub OnquestItem2Changing(value As Integer)
    End Sub
    Partial Private Sub OnquestItem2Changed()
    End Sub
    Partial Private Sub OnquestItem3Changing(value As Integer)
    End Sub
    Partial Private Sub OnquestItem3Changed()
    End Sub
    Partial Private Sub OnquestItem4Changing(value As Integer)
    End Sub
    Partial Private Sub OnquestItem4Changed()
    End Sub
    Partial Private Sub OnquestItem5Changing(value As Integer)
    End Sub
    Partial Private Sub OnquestItem5Changed()
    End Sub
    Partial Private Sub OnquestItem6Changing(value As Integer)
    End Sub
    Partial Private Sub OnquestItem6Changed()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_creature_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property creature_id() As Integer
		Get
			Return Me._creature_id
		End Get
		Set
			If ((Me._creature_id = value)  _
						= false) Then
				Me.Oncreature_idChanging(value)
				Me.SendPropertyChanging
				Me._creature_id = value
				Me.SendPropertyChanged("creature_id")
				Me.Oncreature_idChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_name", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property creature_name() As String
		Get
			Return Me._creature_name
		End Get
		Set
			If (String.Equals(Me._creature_name, value) = false) Then
				Me.Oncreature_nameChanging(value)
				Me.SendPropertyChanging
				Me._creature_name = value
				Me.SendPropertyChanged("creature_name")
				Me.Oncreature_nameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_guild", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property creature_guild() As String
		Get
			Return Me._creature_guild
		End Get
		Set
			If (String.Equals(Me._creature_guild, value) = false) Then
				Me.Oncreature_guildChanging(value)
				Me.SendPropertyChanging
				Me._creature_guild = value
				Me.SendPropertyChanged("creature_guild")
				Me.Oncreature_guildChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_info_str", DbType:="VarChar(500)")>  _
	Public Property info_str() As String
		Get
			Return Me._info_str
		End Get
		Set
			If (String.Equals(Me._info_str, value) = false) Then
				Me.Oninfo_strChanging(value)
				Me.SendPropertyChanging
				Me._info_str = value
				Me.SendPropertyChanged("info_str")
				Me.Oninfo_strChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_KillCredit1", DbType:="Int NOT NULL")>  _
	Public Property KillCredit1() As Integer
		Get
			Return Me._KillCredit1
		End Get
		Set
			If ((Me._KillCredit1 = value)  _
						= false) Then
				Me.OnKillCredit1Changing(value)
				Me.SendPropertyChanging
				Me._KillCredit1 = value
				Me.SendPropertyChanged("KillCredit1")
				Me.OnKillCredit1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_KillCredit2", DbType:="Int NOT NULL")>  _
	Public Property KillCredit2() As Integer
		Get
			Return Me._KillCredit2
		End Get
		Set
			If ((Me._KillCredit2 = value)  _
						= false) Then
				Me.OnKillCredit2Changing(value)
				Me.SendPropertyChanging
				Me._KillCredit2 = value
				Me.SendPropertyChanged("KillCredit2")
				Me.OnKillCredit2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_model", DbType:="Int NOT NULL")>  _
	Public Property creature_model() As Integer
		Get
			Return Me._creature_model
		End Get
		Set
			If ((Me._creature_model = value)  _
						= false) Then
				Me.Oncreature_modelChanging(value)
				Me.SendPropertyChanging
				Me._creature_model = value
				Me.SendPropertyChanged("creature_model")
				Me.Oncreature_modelChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_femalemodel", DbType:="Int NOT NULL")>  _
	Public Property creature_femalemodel() As Integer
		Get
			Return Me._creature_femalemodel
		End Get
		Set
			If ((Me._creature_femalemodel = value)  _
						= false) Then
				Me.Oncreature_femalemodelChanging(value)
				Me.SendPropertyChanging
				Me._creature_femalemodel = value
				Me.SendPropertyChanged("creature_femalemodel")
				Me.Oncreature_femalemodelChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_model2", DbType:="Int NOT NULL")>  _
	Public Property creature_model2() As Integer
		Get
			Return Me._creature_model2
		End Get
		Set
			If ((Me._creature_model2 = value)  _
						= false) Then
				Me.Oncreature_model2Changing(value)
				Me.SendPropertyChanging
				Me._creature_model2 = value
				Me.SendPropertyChanged("creature_model2")
				Me.Oncreature_model2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_femalemodel2", DbType:="Int NOT NULL")>  _
	Public Property creature_femalemodel2() As Integer
		Get
			Return Me._creature_femalemodel2
		End Get
		Set
			If ((Me._creature_femalemodel2 = value)  _
						= false) Then
				Me.Oncreature_femalemodel2Changing(value)
				Me.SendPropertyChanging
				Me._creature_femalemodel2 = value
				Me.SendPropertyChanged("creature_femalemodel2")
				Me.Oncreature_femalemodel2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_size", DbType:="Real NOT NULL")>  _
	Public Property creature_size() As Single
		Get
			Return Me._creature_size
		End Get
		Set
			If ((Me._creature_size = value)  _
						= false) Then
				Me.Oncreature_sizeChanging(value)
				Me.SendPropertyChanging
				Me._creature_size = value
				Me.SendPropertyChanged("creature_size")
				Me.Oncreature_sizeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_minlife", DbType:="Int NOT NULL")>  _
	Public Property creature_minlife() As Integer
		Get
			Return Me._creature_minlife
		End Get
		Set
			If ((Me._creature_minlife = value)  _
						= false) Then
				Me.Oncreature_minlifeChanging(value)
				Me.SendPropertyChanging
				Me._creature_minlife = value
				Me.SendPropertyChanged("creature_minlife")
				Me.Oncreature_minlifeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_maxlife", DbType:="Int NOT NULL")>  _
	Public Property creature_maxlife() As Integer
		Get
			Return Me._creature_maxlife
		End Get
		Set
			If ((Me._creature_maxlife = value)  _
						= false) Then
				Me.Oncreature_maxlifeChanging(value)
				Me.SendPropertyChanging
				Me._creature_maxlife = value
				Me.SendPropertyChanged("creature_maxlife")
				Me.Oncreature_maxlifeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_minmana", DbType:="Int NOT NULL")>  _
	Public Property creature_minmana() As Integer
		Get
			Return Me._creature_minmana
		End Get
		Set
			If ((Me._creature_minmana = value)  _
						= false) Then
				Me.Oncreature_minmanaChanging(value)
				Me.SendPropertyChanging
				Me._creature_minmana = value
				Me.SendPropertyChanged("creature_minmana")
				Me.Oncreature_minmanaChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_maxmana", DbType:="Int NOT NULL")>  _
	Public Property creature_maxmana() As Integer
		Get
			Return Me._creature_maxmana
		End Get
		Set
			If ((Me._creature_maxmana = value)  _
						= false) Then
				Me.Oncreature_maxmanaChanging(value)
				Me.SendPropertyChanging
				Me._creature_maxmana = value
				Me.SendPropertyChanged("creature_maxmana")
				Me.Oncreature_maxmanaChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_manaType", DbType:="Int NOT NULL")>  _
	Public Property creature_manaType() As Integer
		Get
			Return Me._creature_manaType
		End Get
		Set
			If ((Me._creature_manaType = value)  _
						= false) Then
				Me.Oncreature_manaTypeChanging(value)
				Me.SendPropertyChanging
				Me._creature_manaType = value
				Me.SendPropertyChanged("creature_manaType")
				Me.Oncreature_manaTypeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_elite", DbType:="Int NOT NULL")>  _
	Public Property creature_elite() As Integer
		Get
			Return Me._creature_elite
		End Get
		Set
			If ((Me._creature_elite = value)  _
						= false) Then
				Me.Oncreature_eliteChanging(value)
				Me.SendPropertyChanging
				Me._creature_elite = value
				Me.SendPropertyChanged("creature_elite")
				Me.Oncreature_eliteChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_leader", DbType:="Int")>  _
	Public Property creature_leader() As System.Nullable(Of Integer)
		Get
			Return Me._creature_leader
		End Get
		Set
			If (Me._creature_leader.Equals(value) = false) Then
				Me.Oncreature_leaderChanging(value)
				Me.SendPropertyChanging
				Me._creature_leader = value
				Me.SendPropertyChanged("creature_leader")
				Me.Oncreature_leaderChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_faction", DbType:="Int NOT NULL")>  _
	Public Property creature_faction() As Integer
		Get
			Return Me._creature_faction
		End Get
		Set
			If ((Me._creature_faction = value)  _
						= false) Then
				Me.Oncreature_factionChanging(value)
				Me.SendPropertyChanging
				Me._creature_faction = value
				Me.SendPropertyChanged("creature_faction")
				Me.Oncreature_factionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_family", DbType:="Int NOT NULL")>  _
	Public Property creature_family() As Integer
		Get
			Return Me._creature_family
		End Get
		Set
			If ((Me._creature_family = value)  _
						= false) Then
				Me.Oncreature_familyChanging(value)
				Me.SendPropertyChanging
				Me._creature_family = value
				Me.SendPropertyChanged("creature_family")
				Me.Oncreature_familyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_type", DbType:="Int NOT NULL")>  _
	Public Property creature_type() As Integer
		Get
			Return Me._creature_type
		End Get
		Set
			If ((Me._creature_type = value)  _
						= false) Then
				Me.Oncreature_typeChanging(value)
				Me.SendPropertyChanging
				Me._creature_type = value
				Me.SendPropertyChanged("creature_type")
				Me.Oncreature_typeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_spelldataid", DbType:="Int")>  _
	Public Property creature_spelldataid() As System.Nullable(Of Integer)
		Get
			Return Me._creature_spelldataid
		End Get
		Set
			If (Me._creature_spelldataid.Equals(value) = false) Then
				Me.Oncreature_spelldataidChanging(value)
				Me.SendPropertyChanging
				Me._creature_spelldataid = value
				Me.SendPropertyChanged("creature_spelldataid")
				Me.Oncreature_spelldataidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_minDamage", DbType:="Real NOT NULL")>  _
	Public Property creature_minDamage() As Single
		Get
			Return Me._creature_minDamage
		End Get
		Set
			If ((Me._creature_minDamage = value)  _
						= false) Then
				Me.Oncreature_minDamageChanging(value)
				Me.SendPropertyChanging
				Me._creature_minDamage = value
				Me.SendPropertyChanged("creature_minDamage")
				Me.Oncreature_minDamageChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_maxDamage", DbType:="Real NOT NULL")>  _
	Public Property creature_maxDamage() As Single
		Get
			Return Me._creature_maxDamage
		End Get
		Set
			If ((Me._creature_maxDamage = value)  _
						= false) Then
				Me.Oncreature_maxDamageChanging(value)
				Me.SendPropertyChanging
				Me._creature_maxDamage = value
				Me.SendPropertyChanged("creature_maxDamage")
				Me.Oncreature_maxDamageChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_minRangedDamage", DbType:="Real NOT NULL")>  _
	Public Property creature_minRangedDamage() As Single
		Get
			Return Me._creature_minRangedDamage
		End Get
		Set
			If ((Me._creature_minRangedDamage = value)  _
						= false) Then
				Me.Oncreature_minRangedDamageChanging(value)
				Me.SendPropertyChanging
				Me._creature_minRangedDamage = value
				Me.SendPropertyChanged("creature_minRangedDamage")
				Me.Oncreature_minRangedDamageChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_maxRangedDamage", DbType:="Real NOT NULL")>  _
	Public Property creature_maxRangedDamage() As Single
		Get
			Return Me._creature_maxRangedDamage
		End Get
		Set
			If ((Me._creature_maxRangedDamage = value)  _
						= false) Then
				Me.Oncreature_maxRangedDamageChanging(value)
				Me.SendPropertyChanging
				Me._creature_maxRangedDamage = value
				Me.SendPropertyChanged("creature_maxRangedDamage")
				Me.Oncreature_maxRangedDamageChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_armor", DbType:="Int NOT NULL")>  _
	Public Property creature_armor() As Integer
		Get
			Return Me._creature_armor
		End Get
		Set
			If ((Me._creature_armor = value)  _
						= false) Then
				Me.Oncreature_armorChanging(value)
				Me.SendPropertyChanging
				Me._creature_armor = value
				Me.SendPropertyChanged("creature_armor")
				Me.Oncreature_armorChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_resHoly", DbType:="Int NOT NULL")>  _
	Public Property creature_resHoly() As Integer
		Get
			Return Me._creature_resHoly
		End Get
		Set
			If ((Me._creature_resHoly = value)  _
						= false) Then
				Me.Oncreature_resHolyChanging(value)
				Me.SendPropertyChanging
				Me._creature_resHoly = value
				Me.SendPropertyChanged("creature_resHoly")
				Me.Oncreature_resHolyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_resFire", DbType:="Int NOT NULL")>  _
	Public Property creature_resFire() As Integer
		Get
			Return Me._creature_resFire
		End Get
		Set
			If ((Me._creature_resFire = value)  _
						= false) Then
				Me.Oncreature_resFireChanging(value)
				Me.SendPropertyChanging
				Me._creature_resFire = value
				Me.SendPropertyChanged("creature_resFire")
				Me.Oncreature_resFireChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_resNature", DbType:="Int NOT NULL")>  _
	Public Property creature_resNature() As Integer
		Get
			Return Me._creature_resNature
		End Get
		Set
			If ((Me._creature_resNature = value)  _
						= false) Then
				Me.Oncreature_resNatureChanging(value)
				Me.SendPropertyChanging
				Me._creature_resNature = value
				Me.SendPropertyChanged("creature_resNature")
				Me.Oncreature_resNatureChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_resFrost", DbType:="Int NOT NULL")>  _
	Public Property creature_resFrost() As Integer
		Get
			Return Me._creature_resFrost
		End Get
		Set
			If ((Me._creature_resFrost = value)  _
						= false) Then
				Me.Oncreature_resFrostChanging(value)
				Me.SendPropertyChanging
				Me._creature_resFrost = value
				Me.SendPropertyChanged("creature_resFrost")
				Me.Oncreature_resFrostChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_resShadow", DbType:="Int NOT NULL")>  _
	Public Property creature_resShadow() As Integer
		Get
			Return Me._creature_resShadow
		End Get
		Set
			If ((Me._creature_resShadow = value)  _
						= false) Then
				Me.Oncreature_resShadowChanging(value)
				Me.SendPropertyChanging
				Me._creature_resShadow = value
				Me.SendPropertyChanged("creature_resShadow")
				Me.Oncreature_resShadowChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_resArcane", DbType:="Int NOT NULL")>  _
	Public Property creature_resArcane() As Integer
		Get
			Return Me._creature_resArcane
		End Get
		Set
			If ((Me._creature_resArcane = value)  _
						= false) Then
				Me.Oncreature_resArcaneChanging(value)
				Me.SendPropertyChanging
				Me._creature_resArcane = value
				Me.SendPropertyChanged("creature_resArcane")
				Me.Oncreature_resArcaneChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_walkSpeed", DbType:="Real NOT NULL")>  _
	Public Property creature_walkSpeed() As Single
		Get
			Return Me._creature_walkSpeed
		End Get
		Set
			If ((Me._creature_walkSpeed = value)  _
						= false) Then
				Me.Oncreature_walkSpeedChanging(value)
				Me.SendPropertyChanging
				Me._creature_walkSpeed = value
				Me.SendPropertyChanged("creature_walkSpeed")
				Me.Oncreature_walkSpeedChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_runSpeed", DbType:="Real NOT NULL")>  _
	Public Property creature_runSpeed() As Single
		Get
			Return Me._creature_runSpeed
		End Get
		Set
			If ((Me._creature_runSpeed = value)  _
						= false) Then
				Me.Oncreature_runSpeedChanging(value)
				Me.SendPropertyChanging
				Me._creature_runSpeed = value
				Me.SendPropertyChanged("creature_runSpeed")
				Me.Oncreature_runSpeedChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_flySpeed", DbType:="Real NOT NULL")>  _
	Public Property creature_flySpeed() As Single
		Get
			Return Me._creature_flySpeed
		End Get
		Set
			If ((Me._creature_flySpeed = value)  _
						= false) Then
				Me.Oncreature_flySpeedChanging(value)
				Me.SendPropertyChanging
				Me._creature_flySpeed = value
				Me.SendPropertyChanged("creature_flySpeed")
				Me.Oncreature_flySpeedChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_respawnTime", DbType:="Int NOT NULL")>  _
	Public Property creature_respawnTime() As Integer
		Get
			Return Me._creature_respawnTime
		End Get
		Set
			If ((Me._creature_respawnTime = value)  _
						= false) Then
				Me.Oncreature_respawnTimeChanging(value)
				Me.SendPropertyChanging
				Me._creature_respawnTime = value
				Me.SendPropertyChanged("creature_respawnTime")
				Me.Oncreature_respawnTimeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_baseAttackSpeed", DbType:="Int NOT NULL")>  _
	Public Property creature_baseAttackSpeed() As Integer
		Get
			Return Me._creature_baseAttackSpeed
		End Get
		Set
			If ((Me._creature_baseAttackSpeed = value)  _
						= false) Then
				Me.Oncreature_baseAttackSpeedChanging(value)
				Me.SendPropertyChanging
				Me._creature_baseAttackSpeed = value
				Me.SendPropertyChanged("creature_baseAttackSpeed")
				Me.Oncreature_baseAttackSpeedChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_baseRangedAttackSpeed", DbType:="Int NOT NULL")>  _
	Public Property creature_baseRangedAttackSpeed() As Integer
		Get
			Return Me._creature_baseRangedAttackSpeed
		End Get
		Set
			If ((Me._creature_baseRangedAttackSpeed = value)  _
						= false) Then
				Me.Oncreature_baseRangedAttackSpeedChanging(value)
				Me.SendPropertyChanging
				Me._creature_baseRangedAttackSpeed = value
				Me.SendPropertyChanged("creature_baseRangedAttackSpeed")
				Me.Oncreature_baseRangedAttackSpeedChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_combatReach", DbType:="Real NOT NULL")>  _
	Public Property creature_combatReach() As Single
		Get
			Return Me._creature_combatReach
		End Get
		Set
			If ((Me._creature_combatReach = value)  _
						= false) Then
				Me.Oncreature_combatReachChanging(value)
				Me.SendPropertyChanging
				Me._creature_combatReach = value
				Me.SendPropertyChanged("creature_combatReach")
				Me.Oncreature_combatReachChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_bondingRadius", DbType:="Real NOT NULL")>  _
	Public Property creature_bondingRadius() As Single
		Get
			Return Me._creature_bondingRadius
		End Get
		Set
			If ((Me._creature_bondingRadius = value)  _
						= false) Then
				Me.Oncreature_bondingRadiusChanging(value)
				Me.SendPropertyChanging
				Me._creature_bondingRadius = value
				Me.SendPropertyChanged("creature_bondingRadius")
				Me.Oncreature_bondingRadiusChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_npcFlags", DbType:="Int NOT NULL")>  _
	Public Property creature_npcFlags() As Integer
		Get
			Return Me._creature_npcFlags
		End Get
		Set
			If ((Me._creature_npcFlags = value)  _
						= false) Then
				Me.Oncreature_npcFlagsChanging(value)
				Me.SendPropertyChanging
				Me._creature_npcFlags = value
				Me.SendPropertyChanged("creature_npcFlags")
				Me.Oncreature_npcFlagsChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_flags", DbType:="Int NOT NULL")>  _
	Public Property creature_flags() As Integer
		Get
			Return Me._creature_flags
		End Get
		Set
			If ((Me._creature_flags = value)  _
						= false) Then
				Me.Oncreature_flagsChanging(value)
				Me.SendPropertyChanging
				Me._creature_flags = value
				Me.SendPropertyChanged("creature_flags")
				Me.Oncreature_flagsChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_minLevel", DbType:="Int NOT NULL")>  _
	Public Property creature_minLevel() As Integer
		Get
			Return Me._creature_minLevel
		End Get
		Set
			If ((Me._creature_minLevel = value)  _
						= false) Then
				Me.Oncreature_minLevelChanging(value)
				Me.SendPropertyChanging
				Me._creature_minLevel = value
				Me.SendPropertyChanged("creature_minLevel")
				Me.Oncreature_minLevelChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_maxLevel", DbType:="Int NOT NULL")>  _
	Public Property creature_maxLevel() As Integer
		Get
			Return Me._creature_maxLevel
		End Get
		Set
			If ((Me._creature_maxLevel = value)  _
						= false) Then
				Me.Oncreature_maxLevelChanging(value)
				Me.SendPropertyChanging
				Me._creature_maxLevel = value
				Me.SendPropertyChanged("creature_maxLevel")
				Me.Oncreature_maxLevelChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_loot", DbType:="Int NOT NULL")>  _
	Public Property creature_loot() As Integer
		Get
			Return Me._creature_loot
		End Get
		Set
			If ((Me._creature_loot = value)  _
						= false) Then
				Me.Oncreature_lootChanging(value)
				Me.SendPropertyChanging
				Me._creature_loot = value
				Me.SendPropertyChanged("creature_loot")
				Me.Oncreature_lootChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_skinloot", DbType:="Int NOT NULL")>  _
	Public Property creature_skinloot() As Integer
		Get
			Return Me._creature_skinloot
		End Get
		Set
			If ((Me._creature_skinloot = value)  _
						= false) Then
				Me.Oncreature_skinlootChanging(value)
				Me.SendPropertyChanging
				Me._creature_skinloot = value
				Me.SendPropertyChanged("creature_skinloot")
				Me.Oncreature_skinlootChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_pickpocketloot", DbType:="Int NOT NULL")>  _
	Public Property creature_pickpocketloot() As Integer
		Get
			Return Me._creature_pickpocketloot
		End Get
		Set
			If ((Me._creature_pickpocketloot = value)  _
						= false) Then
				Me.Oncreature_pickpocketlootChanging(value)
				Me.SendPropertyChanging
				Me._creature_pickpocketloot = value
				Me.SendPropertyChanged("creature_pickpocketloot")
				Me.Oncreature_pickpocketlootChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_equipmententry", DbType:="Int NOT NULL")>  _
	Public Property creature_equipmententry() As Integer
		Get
			Return Me._creature_equipmententry
		End Get
		Set
			If ((Me._creature_equipmententry = value)  _
						= false) Then
				Me.Oncreature_equipmententryChanging(value)
				Me.SendPropertyChanging
				Me._creature_equipmententry = value
				Me.SendPropertyChanged("creature_equipmententry")
				Me.Oncreature_equipmententryChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_equipmodel1", DbType:="Int NOT NULL")>  _
	Public Property creature_equipmodel1() As Integer
		Get
			Return Me._creature_equipmodel1
		End Get
		Set
			If ((Me._creature_equipmodel1 = value)  _
						= false) Then
				Me.Oncreature_equipmodel1Changing(value)
				Me.SendPropertyChanging
				Me._creature_equipmodel1 = value
				Me.SendPropertyChanged("creature_equipmodel1")
				Me.Oncreature_equipmodel1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_equipmodel2", DbType:="Int NOT NULL")>  _
	Public Property creature_equipmodel2() As Integer
		Get
			Return Me._creature_equipmodel2
		End Get
		Set
			If ((Me._creature_equipmodel2 = value)  _
						= false) Then
				Me.Oncreature_equipmodel2Changing(value)
				Me.SendPropertyChanging
				Me._creature_equipmodel2 = value
				Me.SendPropertyChanged("creature_equipmodel2")
				Me.Oncreature_equipmodel2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_equipmodel3", DbType:="Int NOT NULL")>  _
	Public Property creature_equipmodel3() As Integer
		Get
			Return Me._creature_equipmodel3
		End Get
		Set
			If ((Me._creature_equipmodel3 = value)  _
						= false) Then
				Me.Oncreature_equipmodel3Changing(value)
				Me.SendPropertyChanging
				Me._creature_equipmodel3 = value
				Me.SendPropertyChanged("creature_equipmodel3")
				Me.Oncreature_equipmodel3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_equipinfo1", DbType:="Int NOT NULL")>  _
	Public Property creature_equipinfo1() As Integer
		Get
			Return Me._creature_equipinfo1
		End Get
		Set
			If ((Me._creature_equipinfo1 = value)  _
						= false) Then
				Me.Oncreature_equipinfo1Changing(value)
				Me.SendPropertyChanging
				Me._creature_equipinfo1 = value
				Me.SendPropertyChanged("creature_equipinfo1")
				Me.Oncreature_equipinfo1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_equipinfo2", DbType:="Int NOT NULL")>  _
	Public Property creature_equipinfo2() As Integer
		Get
			Return Me._creature_equipinfo2
		End Get
		Set
			If ((Me._creature_equipinfo2 = value)  _
						= false) Then
				Me.Oncreature_equipinfo2Changing(value)
				Me.SendPropertyChanging
				Me._creature_equipinfo2 = value
				Me.SendPropertyChanged("creature_equipinfo2")
				Me.Oncreature_equipinfo2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_equipinfo3", DbType:="Int NOT NULL")>  _
	Public Property creature_equipinfo3() As Integer
		Get
			Return Me._creature_equipinfo3
		End Get
		Set
			If ((Me._creature_equipinfo3 = value)  _
						= false) Then
				Me.Oncreature_equipinfo3Changing(value)
				Me.SendPropertyChanging
				Me._creature_equipinfo3 = value
				Me.SendPropertyChanged("creature_equipinfo3")
				Me.Oncreature_equipinfo3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_equipslot1", DbType:="Int NOT NULL")>  _
	Public Property creature_equipslot1() As Integer
		Get
			Return Me._creature_equipslot1
		End Get
		Set
			If ((Me._creature_equipslot1 = value)  _
						= false) Then
				Me.Oncreature_equipslot1Changing(value)
				Me.SendPropertyChanging
				Me._creature_equipslot1 = value
				Me.SendPropertyChanged("creature_equipslot1")
				Me.Oncreature_equipslot1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_equipslot2", DbType:="Int NOT NULL")>  _
	Public Property creature_equipslot2() As Integer
		Get
			Return Me._creature_equipslot2
		End Get
		Set
			If ((Me._creature_equipslot2 = value)  _
						= false) Then
				Me.Oncreature_equipslot2Changing(value)
				Me.SendPropertyChanging
				Me._creature_equipslot2 = value
				Me.SendPropertyChanged("creature_equipslot2")
				Me.Oncreature_equipslot2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_equipslot3", DbType:="Int NOT NULL")>  _
	Public Property creature_equipslot3() As Integer
		Get
			Return Me._creature_equipslot3
		End Get
		Set
			If ((Me._creature_equipslot3 = value)  _
						= false) Then
				Me.Oncreature_equipslot3Changing(value)
				Me.SendPropertyChanging
				Me._creature_equipslot3 = value
				Me.SendPropertyChanged("creature_equipslot3")
				Me.Oncreature_equipslot3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_unkfloat1", DbType:="Real")>  _
	Public Property creature_unkfloat1() As System.Nullable(Of Single)
		Get
			Return Me._creature_unkfloat1
		End Get
		Set
			If (Me._creature_unkfloat1.Equals(value) = false) Then
				Me.Oncreature_unkfloat1Changing(value)
				Me.SendPropertyChanging
				Me._creature_unkfloat1 = value
				Me.SendPropertyChanged("creature_unkfloat1")
				Me.Oncreature_unkfloat1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_unkfloat2", DbType:="Real")>  _
	Public Property creature_unkfloat2() As System.Nullable(Of Single)
		Get
			Return Me._creature_unkfloat2
		End Get
		Set
			If (Me._creature_unkfloat2.Equals(value) = false) Then
				Me.Oncreature_unkfloat2Changing(value)
				Me.SendPropertyChanging
				Me._creature_unkfloat2 = value
				Me.SendPropertyChanged("creature_unkfloat2")
				Me.Oncreature_unkfloat2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_aiScript", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property creature_aiScript() As String
		Get
			Return Me._creature_aiScript
		End Get
		Set
			If (String.Equals(Me._creature_aiScript, value) = false) Then
				Me.Oncreature_aiScriptChanging(value)
				Me.SendPropertyChanging
				Me._creature_aiScript = value
				Me.SendPropertyChanged("creature_aiScript")
				Me.Oncreature_aiScriptChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_minGold", DbType:="Int NOT NULL")>  _
	Public Property creature_minGold() As Integer
		Get
			Return Me._creature_minGold
		End Get
		Set
			If ((Me._creature_minGold = value)  _
						= false) Then
				Me.Oncreature_minGoldChanging(value)
				Me.SendPropertyChanging
				Me._creature_minGold = value
				Me.SendPropertyChanged("creature_minGold")
				Me.Oncreature_minGoldChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_maxGold", DbType:="Int NOT NULL")>  _
	Public Property creature_maxGold() As Integer
		Get
			Return Me._creature_maxGold
		End Get
		Set
			If ((Me._creature_maxGold = value)  _
						= false) Then
				Me.Oncreature_maxGoldChanging(value)
				Me.SendPropertyChanging
				Me._creature_maxGold = value
				Me.SendPropertyChanged("creature_maxGold")
				Me.Oncreature_maxGoldChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_trainerType", DbType:="Int NOT NULL")>  _
	Public Property creature_trainerType() As Integer
		Get
			Return Me._creature_trainerType
		End Get
		Set
			If ((Me._creature_trainerType = value)  _
						= false) Then
				Me.Oncreature_trainerTypeChanging(value)
				Me.SendPropertyChanging
				Me._creature_trainerType = value
				Me.SendPropertyChanged("creature_trainerType")
				Me.Oncreature_trainerTypeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_trainerSpell", DbType:="Int NOT NULL")>  _
	Public Property creature_trainerSpell() As Integer
		Get
			Return Me._creature_trainerSpell
		End Get
		Set
			If ((Me._creature_trainerSpell = value)  _
						= false) Then
				Me.Oncreature_trainerSpellChanging(value)
				Me.SendPropertyChanging
				Me._creature_trainerSpell = value
				Me.SendPropertyChanged("creature_trainerSpell")
				Me.Oncreature_trainerSpellChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_trainerClass", DbType:="Int NOT NULL")>  _
	Public Property creature_trainerClass() As Integer
		Get
			Return Me._creature_trainerClass
		End Get
		Set
			If ((Me._creature_trainerClass = value)  _
						= false) Then
				Me.Oncreature_trainerClassChanging(value)
				Me.SendPropertyChanging
				Me._creature_trainerClass = value
				Me.SendPropertyChanged("creature_trainerClass")
				Me.Oncreature_trainerClassChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_trainerRace", DbType:="Int NOT NULL")>  _
	Public Property creature_trainerRace() As Integer
		Get
			Return Me._creature_trainerRace
		End Get
		Set
			If ((Me._creature_trainerRace = value)  _
						= false) Then
				Me.Oncreature_trainerRaceChanging(value)
				Me.SendPropertyChanging
				Me._creature_trainerRace = value
				Me.SendPropertyChanged("creature_trainerRace")
				Me.Oncreature_trainerRaceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_movementType", DbType:="Int NOT NULL")>  _
	Public Property creature_movementType() As Integer
		Get
			Return Me._creature_movementType
		End Get
		Set
			If ((Me._creature_movementType = value)  _
						= false) Then
				Me.Oncreature_movementTypeChanging(value)
				Me.SendPropertyChanging
				Me._creature_movementType = value
				Me.SendPropertyChanged("creature_movementType")
				Me.Oncreature_movementTypeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_regenHealth", DbType:="Int NOT NULL")>  _
	Public Property creature_regenHealth() As Integer
		Get
			Return Me._creature_regenHealth
		End Get
		Set
			If ((Me._creature_regenHealth = value)  _
						= false) Then
				Me.Oncreature_regenHealthChanging(value)
				Me.SendPropertyChanging
				Me._creature_regenHealth = value
				Me.SendPropertyChanged("creature_regenHealth")
				Me.Oncreature_regenHealthChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_mechanicImmuneMask", DbType:="Int NOT NULL")>  _
	Public Property creature_mechanicImmuneMask() As Integer
		Get
			Return Me._creature_mechanicImmuneMask
		End Get
		Set
			If ((Me._creature_mechanicImmuneMask = value)  _
						= false) Then
				Me.Oncreature_mechanicImmuneMaskChanging(value)
				Me.SendPropertyChanging
				Me._creature_mechanicImmuneMask = value
				Me.SendPropertyChanged("creature_mechanicImmuneMask")
				Me.Oncreature_mechanicImmuneMaskChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_creature_flagsExtra", DbType:="Int NOT NULL")>  _
	Public Property creature_flagsExtra() As Integer
		Get
			Return Me._creature_flagsExtra
		End Get
		Set
			If ((Me._creature_flagsExtra = value)  _
						= false) Then
				Me.Oncreature_flagsExtraChanging(value)
				Me.SendPropertyChanging
				Me._creature_flagsExtra = value
				Me.SendPropertyChanged("creature_flagsExtra")
				Me.Oncreature_flagsExtraChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_questItem1", DbType:="Int NOT NULL")>  _
	Public Property questItem1() As Integer
		Get
			Return Me._questItem1
		End Get
		Set
			If ((Me._questItem1 = value)  _
						= false) Then
				Me.OnquestItem1Changing(value)
				Me.SendPropertyChanging
				Me._questItem1 = value
				Me.SendPropertyChanged("questItem1")
				Me.OnquestItem1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_questItem2", DbType:="Int NOT NULL")>  _
	Public Property questItem2() As Integer
		Get
			Return Me._questItem2
		End Get
		Set
			If ((Me._questItem2 = value)  _
						= false) Then
				Me.OnquestItem2Changing(value)
				Me.SendPropertyChanging
				Me._questItem2 = value
				Me.SendPropertyChanged("questItem2")
				Me.OnquestItem2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_questItem3", DbType:="Int NOT NULL")>  _
	Public Property questItem3() As Integer
		Get
			Return Me._questItem3
		End Get
		Set
			If ((Me._questItem3 = value)  _
						= false) Then
				Me.OnquestItem3Changing(value)
				Me.SendPropertyChanging
				Me._questItem3 = value
				Me.SendPropertyChanged("questItem3")
				Me.OnquestItem3Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_questItem4", DbType:="Int NOT NULL")>  _
	Public Property questItem4() As Integer
		Get
			Return Me._questItem4
		End Get
		Set
			If ((Me._questItem4 = value)  _
						= false) Then
				Me.OnquestItem4Changing(value)
				Me.SendPropertyChanging
				Me._questItem4 = value
				Me.SendPropertyChanged("questItem4")
				Me.OnquestItem4Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_questItem5", DbType:="Int NOT NULL")>  _
	Public Property questItem5() As Integer
		Get
			Return Me._questItem5
		End Get
		Set
			If ((Me._questItem5 = value)  _
						= false) Then
				Me.OnquestItem5Changing(value)
				Me.SendPropertyChanging
				Me._questItem5 = value
				Me.SendPropertyChanged("questItem5")
				Me.OnquestItem5Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_questItem6", DbType:="Int NOT NULL")>  _
	Public Property questItem6() As Integer
		Get
			Return Me._questItem6
		End Get
		Set
			If ((Me._questItem6 = value)  _
						= false) Then
				Me.OnquestItem6Changing(value)
				Me.SendPropertyChanging
				Me._questItem6 = value
				Me.SendPropertyChanged("questItem6")
				Me.OnquestItem6Changed
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.npc_vendor")>  _
Partial Public Class npc_vendor
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _entry As Integer
	
	Private _item As Integer
	
	Private _sellamount As Integer
	
	Private _maxcount As Integer
	
	Private _incrtime As Integer
	
	Private _extendedcost As Integer
	
	Private _currentcount As Integer
	
	Private _lastrefill As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnentryChanging(value As Integer)
    End Sub
    Partial Private Sub OnentryChanged()
    End Sub
    Partial Private Sub OnitemChanging(value As Integer)
    End Sub
    Partial Private Sub OnitemChanged()
    End Sub
    Partial Private Sub OnsellamountChanging(value As Integer)
    End Sub
    Partial Private Sub OnsellamountChanged()
    End Sub
    Partial Private Sub OnmaxcountChanging(value As Integer)
    End Sub
    Partial Private Sub OnmaxcountChanged()
    End Sub
    Partial Private Sub OnincrtimeChanging(value As Integer)
    End Sub
    Partial Private Sub OnincrtimeChanged()
    End Sub
    Partial Private Sub OnextendedcostChanging(value As Integer)
    End Sub
    Partial Private Sub OnextendedcostChanged()
    End Sub
    Partial Private Sub OncurrentcountChanging(value As Integer)
    End Sub
    Partial Private Sub OncurrentcountChanged()
    End Sub
    Partial Private Sub OnlastrefillChanging(value As Integer)
    End Sub
    Partial Private Sub OnlastrefillChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_entry", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property entry() As Integer
		Get
			Return Me._entry
		End Get
		Set
			If ((Me._entry = value)  _
						= false) Then
				Me.OnentryChanging(value)
				Me.SendPropertyChanging
				Me._entry = value
				Me.SendPropertyChanged("entry")
				Me.OnentryChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_item", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property item() As Integer
		Get
			Return Me._item
		End Get
		Set
			If ((Me._item = value)  _
						= false) Then
				Me.OnitemChanging(value)
				Me.SendPropertyChanging
				Me._item = value
				Me.SendPropertyChanged("item")
				Me.OnitemChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_sellamount", DbType:="Int NOT NULL")>  _
	Public Property sellamount() As Integer
		Get
			Return Me._sellamount
		End Get
		Set
			If ((Me._sellamount = value)  _
						= false) Then
				Me.OnsellamountChanging(value)
				Me.SendPropertyChanging
				Me._sellamount = value
				Me.SendPropertyChanged("sellamount")
				Me.OnsellamountChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_maxcount", DbType:="Int NOT NULL")>  _
	Public Property maxcount() As Integer
		Get
			Return Me._maxcount
		End Get
		Set
			If ((Me._maxcount = value)  _
						= false) Then
				Me.OnmaxcountChanging(value)
				Me.SendPropertyChanging
				Me._maxcount = value
				Me.SendPropertyChanged("maxcount")
				Me.OnmaxcountChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_incrtime", DbType:="Int NOT NULL")>  _
	Public Property incrtime() As Integer
		Get
			Return Me._incrtime
		End Get
		Set
			If ((Me._incrtime = value)  _
						= false) Then
				Me.OnincrtimeChanging(value)
				Me.SendPropertyChanging
				Me._incrtime = value
				Me.SendPropertyChanged("incrtime")
				Me.OnincrtimeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_extendedcost", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property extendedcost() As Integer
		Get
			Return Me._extendedcost
		End Get
		Set
			If ((Me._extendedcost = value)  _
						= false) Then
				Me.OnextendedcostChanging(value)
				Me.SendPropertyChanging
				Me._extendedcost = value
				Me.SendPropertyChanged("extendedcost")
				Me.OnextendedcostChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_currentcount", DbType:="Int NOT NULL")>  _
	Public Property currentcount() As Integer
		Get
			Return Me._currentcount
		End Get
		Set
			If ((Me._currentcount = value)  _
						= false) Then
				Me.OncurrentcountChanging(value)
				Me.SendPropertyChanging
				Me._currentcount = value
				Me.SendPropertyChanged("currentcount")
				Me.OncurrentcountChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_lastrefill", DbType:="Int NOT NULL")>  _
	Public Property lastrefill() As Integer
		Get
			Return Me._lastrefill
		End Get
		Set
			If ((Me._lastrefill = value)  _
						= false) Then
				Me.OnlastrefillChanging(value)
				Me.SendPropertyChanging
				Me._lastrefill = value
				Me.SendPropertyChanged("lastrefill")
				Me.OnlastrefillChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.playercreateinfo")>  _
Partial Public Class playercreateinfo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Index As Short
	
	Private _race As Short
	
	Private _factiontemplate As Integer
	
	Private _class As Byte
	
	Private _mapID As Integer
	
	Private _zoneID As Integer
	
	Private _positionX As Single
	
	Private _positionY As Single
	
	Private _positionZ As Single
	
	Private _displayID As Short
	
	Private _PowerType As Byte
	
	Private _BaseStrength As Byte
	
	Private _BaseAgility As Byte
	
	Private _BaseStamina As Byte
	
	Private _BaseIntellect As Byte
	
	Private _BaseSpirit As Byte
	
	Private _BaseHealth As Integer
	
	Private _BasePower As Integer
	
	Private _mindmg As Single
	
	Private _maxdmg As Single
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIndexChanging(value As Short)
    End Sub
    Partial Private Sub OnIndexChanged()
    End Sub
    Partial Private Sub OnraceChanging(value As Short)
    End Sub
    Partial Private Sub OnraceChanged()
    End Sub
    Partial Private Sub OnfactiontemplateChanging(value As Integer)
    End Sub
    Partial Private Sub OnfactiontemplateChanged()
    End Sub
    Partial Private Sub OnclassChanging(value As Byte)
    End Sub
    Partial Private Sub OnclassChanged()
    End Sub
    Partial Private Sub OnmapIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnmapIDChanged()
    End Sub
    Partial Private Sub OnzoneIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnzoneIDChanged()
    End Sub
    Partial Private Sub OnpositionXChanging(value As Single)
    End Sub
    Partial Private Sub OnpositionXChanged()
    End Sub
    Partial Private Sub OnpositionYChanging(value As Single)
    End Sub
    Partial Private Sub OnpositionYChanged()
    End Sub
    Partial Private Sub OnpositionZChanging(value As Single)
    End Sub
    Partial Private Sub OnpositionZChanged()
    End Sub
    Partial Private Sub OndisplayIDChanging(value As Short)
    End Sub
    Partial Private Sub OndisplayIDChanged()
    End Sub
    Partial Private Sub OnPowerTypeChanging(value As Byte)
    End Sub
    Partial Private Sub OnPowerTypeChanged()
    End Sub
    Partial Private Sub OnBaseStrengthChanging(value As Byte)
    End Sub
    Partial Private Sub OnBaseStrengthChanged()
    End Sub
    Partial Private Sub OnBaseAgilityChanging(value As Byte)
    End Sub
    Partial Private Sub OnBaseAgilityChanged()
    End Sub
    Partial Private Sub OnBaseStaminaChanging(value As Byte)
    End Sub
    Partial Private Sub OnBaseStaminaChanged()
    End Sub
    Partial Private Sub OnBaseIntellectChanging(value As Byte)
    End Sub
    Partial Private Sub OnBaseIntellectChanged()
    End Sub
    Partial Private Sub OnBaseSpiritChanging(value As Byte)
    End Sub
    Partial Private Sub OnBaseSpiritChanged()
    End Sub
    Partial Private Sub OnBaseHealthChanging(value As Integer)
    End Sub
    Partial Private Sub OnBaseHealthChanged()
    End Sub
    Partial Private Sub OnBasePowerChanging(value As Integer)
    End Sub
    Partial Private Sub OnBasePowerChanged()
    End Sub
    Partial Private Sub OnmindmgChanging(value As Single)
    End Sub
    Partial Private Sub OnmindmgChanged()
    End Sub
    Partial Private Sub OnmaxdmgChanging(value As Single)
    End Sub
    Partial Private Sub OnmaxdmgChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Name:="[Index]", Storage:="_Index", AutoSync:=AutoSync.OnInsert, DbType:="SmallInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Index() As Short
		Get
			Return Me._Index
		End Get
		Set
			If ((Me._Index = value)  _
						= false) Then
				Me.OnIndexChanging(value)
				Me.SendPropertyChanging
				Me._Index = value
				Me.SendPropertyChanged("Index")
				Me.OnIndexChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_race", DbType:="SmallInt NOT NULL")>  _
	Public Property race() As Short
		Get
			Return Me._race
		End Get
		Set
			If ((Me._race = value)  _
						= false) Then
				Me.OnraceChanging(value)
				Me.SendPropertyChanging
				Me._race = value
				Me.SendPropertyChanged("race")
				Me.OnraceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_factiontemplate", DbType:="Int NOT NULL")>  _
	Public Property factiontemplate() As Integer
		Get
			Return Me._factiontemplate
		End Get
		Set
			If ((Me._factiontemplate = value)  _
						= false) Then
				Me.OnfactiontemplateChanging(value)
				Me.SendPropertyChanging
				Me._factiontemplate = value
				Me.SendPropertyChanged("factiontemplate")
				Me.OnfactiontemplateChanged
			End If
		End Set
	End Property
	
	<Column(Name:="class", Storage:="_class", DbType:="TinyInt NOT NULL")>  _
	Public Property [class]() As Byte
		Get
			Return Me._class
		End Get
		Set
			If ((Me._class = value)  _
						= false) Then
				Me.OnclassChanging(value)
				Me.SendPropertyChanging
				Me._class = value
				Me.SendPropertyChanged("[class]")
				Me.OnclassChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_mapID", DbType:="Int NOT NULL")>  _
	Public Property mapID() As Integer
		Get
			Return Me._mapID
		End Get
		Set
			If ((Me._mapID = value)  _
						= false) Then
				Me.OnmapIDChanging(value)
				Me.SendPropertyChanging
				Me._mapID = value
				Me.SendPropertyChanged("mapID")
				Me.OnmapIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_zoneID", DbType:="Int NOT NULL")>  _
	Public Property zoneID() As Integer
		Get
			Return Me._zoneID
		End Get
		Set
			If ((Me._zoneID = value)  _
						= false) Then
				Me.OnzoneIDChanging(value)
				Me.SendPropertyChanging
				Me._zoneID = value
				Me.SendPropertyChanged("zoneID")
				Me.OnzoneIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_positionX", DbType:="Real NOT NULL")>  _
	Public Property positionX() As Single
		Get
			Return Me._positionX
		End Get
		Set
			If ((Me._positionX = value)  _
						= false) Then
				Me.OnpositionXChanging(value)
				Me.SendPropertyChanging
				Me._positionX = value
				Me.SendPropertyChanged("positionX")
				Me.OnpositionXChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_positionY", DbType:="Real NOT NULL")>  _
	Public Property positionY() As Single
		Get
			Return Me._positionY
		End Get
		Set
			If ((Me._positionY = value)  _
						= false) Then
				Me.OnpositionYChanging(value)
				Me.SendPropertyChanging
				Me._positionY = value
				Me.SendPropertyChanged("positionY")
				Me.OnpositionYChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_positionZ", DbType:="Real NOT NULL")>  _
	Public Property positionZ() As Single
		Get
			Return Me._positionZ
		End Get
		Set
			If ((Me._positionZ = value)  _
						= false) Then
				Me.OnpositionZChanging(value)
				Me.SendPropertyChanging
				Me._positionZ = value
				Me.SendPropertyChanged("positionZ")
				Me.OnpositionZChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_displayID", DbType:="SmallInt NOT NULL")>  _
	Public Property displayID() As Short
		Get
			Return Me._displayID
		End Get
		Set
			If ((Me._displayID = value)  _
						= false) Then
				Me.OndisplayIDChanging(value)
				Me.SendPropertyChanging
				Me._displayID = value
				Me.SendPropertyChanged("displayID")
				Me.OndisplayIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_PowerType", DbType:="TinyInt NOT NULL")>  _
	Public Property PowerType() As Byte
		Get
			Return Me._PowerType
		End Get
		Set
			If ((Me._PowerType = value)  _
						= false) Then
				Me.OnPowerTypeChanging(value)
				Me.SendPropertyChanging
				Me._PowerType = value
				Me.SendPropertyChanged("PowerType")
				Me.OnPowerTypeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_BaseStrength", DbType:="TinyInt NOT NULL")>  _
	Public Property BaseStrength() As Byte
		Get
			Return Me._BaseStrength
		End Get
		Set
			If ((Me._BaseStrength = value)  _
						= false) Then
				Me.OnBaseStrengthChanging(value)
				Me.SendPropertyChanging
				Me._BaseStrength = value
				Me.SendPropertyChanged("BaseStrength")
				Me.OnBaseStrengthChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_BaseAgility", DbType:="TinyInt NOT NULL")>  _
	Public Property BaseAgility() As Byte
		Get
			Return Me._BaseAgility
		End Get
		Set
			If ((Me._BaseAgility = value)  _
						= false) Then
				Me.OnBaseAgilityChanging(value)
				Me.SendPropertyChanging
				Me._BaseAgility = value
				Me.SendPropertyChanged("BaseAgility")
				Me.OnBaseAgilityChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_BaseStamina", DbType:="TinyInt NOT NULL")>  _
	Public Property BaseStamina() As Byte
		Get
			Return Me._BaseStamina
		End Get
		Set
			If ((Me._BaseStamina = value)  _
						= false) Then
				Me.OnBaseStaminaChanging(value)
				Me.SendPropertyChanging
				Me._BaseStamina = value
				Me.SendPropertyChanged("BaseStamina")
				Me.OnBaseStaminaChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_BaseIntellect", DbType:="TinyInt NOT NULL")>  _
	Public Property BaseIntellect() As Byte
		Get
			Return Me._BaseIntellect
		End Get
		Set
			If ((Me._BaseIntellect = value)  _
						= false) Then
				Me.OnBaseIntellectChanging(value)
				Me.SendPropertyChanging
				Me._BaseIntellect = value
				Me.SendPropertyChanged("BaseIntellect")
				Me.OnBaseIntellectChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_BaseSpirit", DbType:="TinyInt NOT NULL")>  _
	Public Property BaseSpirit() As Byte
		Get
			Return Me._BaseSpirit
		End Get
		Set
			If ((Me._BaseSpirit = value)  _
						= false) Then
				Me.OnBaseSpiritChanging(value)
				Me.SendPropertyChanging
				Me._BaseSpirit = value
				Me.SendPropertyChanged("BaseSpirit")
				Me.OnBaseSpiritChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_BaseHealth", DbType:="Int NOT NULL")>  _
	Public Property BaseHealth() As Integer
		Get
			Return Me._BaseHealth
		End Get
		Set
			If ((Me._BaseHealth = value)  _
						= false) Then
				Me.OnBaseHealthChanging(value)
				Me.SendPropertyChanging
				Me._BaseHealth = value
				Me.SendPropertyChanged("BaseHealth")
				Me.OnBaseHealthChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_BasePower", DbType:="Int NOT NULL")>  _
	Public Property BasePower() As Integer
		Get
			Return Me._BasePower
		End Get
		Set
			If ((Me._BasePower = value)  _
						= false) Then
				Me.OnBasePowerChanging(value)
				Me.SendPropertyChanging
				Me._BasePower = value
				Me.SendPropertyChanged("BasePower")
				Me.OnBasePowerChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_mindmg", DbType:="Real NOT NULL")>  _
	Public Property mindmg() As Single
		Get
			Return Me._mindmg
		End Get
		Set
			If ((Me._mindmg = value)  _
						= false) Then
				Me.OnmindmgChanging(value)
				Me.SendPropertyChanging
				Me._mindmg = value
				Me.SendPropertyChanged("mindmg")
				Me.OnmindmgChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_maxdmg", DbType:="Real NOT NULL")>  _
	Public Property maxdmg() As Single
		Get
			Return Me._maxdmg
		End Get
		Set
			If ((Me._maxdmg = value)  _
						= false) Then
				Me.OnmaxdmgChanging(value)
				Me.SendPropertyChanging
				Me._maxdmg = value
				Me.SendPropertyChanged("maxdmg")
				Me.OnmaxdmgChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.playercreateinfo_items")>  _
Partial Public Class playercreateinfo_item
	
	Private _race As Short
	
	Private _class As Short
	
	Private _protoid As Integer
	
	Private _slotid As Byte
	
	Private _amount As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Column(Storage:="_race", DbType:="SmallInt NOT NULL")>  _
	Public Property race() As Short
		Get
			Return Me._race
		End Get
		Set
			If ((Me._race = value)  _
						= false) Then
				Me._race = value
			End If
		End Set
	End Property
	
	<Column(Name:="class", Storage:="_class", DbType:="SmallInt NOT NULL")>  _
	Public Property [class]() As Short
		Get
			Return Me._class
		End Get
		Set
			If ((Me._class = value)  _
						= false) Then
				Me._class = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_protoid", DbType:="Int NOT NULL")>  _
	Public Property protoid() As Integer
		Get
			Return Me._protoid
		End Get
		Set
			If ((Me._protoid = value)  _
						= false) Then
				Me._protoid = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_slotid", DbType:="TinyInt NOT NULL")>  _
	Public Property slotid() As Byte
		Get
			Return Me._slotid
		End Get
		Set
			If ((Me._slotid = value)  _
						= false) Then
				Me._slotid = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_amount", DbType:="Int NOT NULL")>  _
	Public Property amount() As Integer
		Get
			Return Me._amount
		End Get
		Set
			If ((Me._amount = value)  _
						= false) Then
				Me._amount = value
			End If
		End Set
	End Property
End Class

<Table(Name:="dbo.playercreateinfo_skills")>  _
Partial Public Class playercreateinfo_skill
	
	Private _race As Short
	
	Private _class As Short
	
	Private _skillid As Integer
	
	Private _level As Integer
	
	Private _maxlevel As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Column(Storage:="_race", DbType:="SmallInt NOT NULL")>  _
	Public Property race() As Short
		Get
			Return Me._race
		End Get
		Set
			If ((Me._race = value)  _
						= false) Then
				Me._race = value
			End If
		End Set
	End Property
	
	<Column(Name:="class", Storage:="_class", DbType:="SmallInt NOT NULL")>  _
	Public Property [class]() As Short
		Get
			Return Me._class
		End Get
		Set
			If ((Me._class = value)  _
						= false) Then
				Me._class = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_skillid", DbType:="Int NOT NULL")>  _
	Public Property skillid() As Integer
		Get
			Return Me._skillid
		End Get
		Set
			If ((Me._skillid = value)  _
						= false) Then
				Me._skillid = value
			End If
		End Set
	End Property
	
	<Column(Name:="[level]", Storage:="_level", DbType:="Int NOT NULL")>  _
	Public Property level() As Integer
		Get
			Return Me._level
		End Get
		Set
			If ((Me._level = value)  _
						= false) Then
				Me._level = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_maxlevel", DbType:="Int NOT NULL")>  _
	Public Property maxlevel() As Integer
		Get
			Return Me._maxlevel
		End Get
		Set
			If ((Me._maxlevel = value)  _
						= false) Then
				Me._maxlevel = value
			End If
		End Set
	End Property
End Class

<Table(Name:="dbo.playercreateinfo_bars")>  _
Partial Public Class playercreateinfo_bar
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _race As Short
	
	Private _class As Short
	
	Private _button As Integer
	
	Private _action As System.Nullable(Of Integer)
	
	Private _type As System.Nullable(Of Integer)
	
	Private _misc As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnraceChanging(value As Short)
    End Sub
    Partial Private Sub OnraceChanged()
    End Sub
    Partial Private Sub OnclassChanging(value As Short)
    End Sub
    Partial Private Sub OnclassChanged()
    End Sub
    Partial Private Sub OnbuttonChanging(value As Integer)
    End Sub
    Partial Private Sub OnbuttonChanged()
    End Sub
    Partial Private Sub OnactionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnactionChanged()
    End Sub
    Partial Private Sub OntypeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OntypeChanged()
    End Sub
    Partial Private Sub OnmiscChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnmiscChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_race", DbType:="SmallInt NOT NULL", IsPrimaryKey:=true)>  _
	Public Property race() As Short
		Get
			Return Me._race
		End Get
		Set
			If ((Me._race = value)  _
						= false) Then
				Me.OnraceChanging(value)
				Me.SendPropertyChanging
				Me._race = value
				Me.SendPropertyChanged("race")
				Me.OnraceChanged
			End If
		End Set
	End Property
	
	<Column(Name:="class", Storage:="_class", DbType:="SmallInt NOT NULL", IsPrimaryKey:=true)>  _
	Public Property [class]() As Short
		Get
			Return Me._class
		End Get
		Set
			If ((Me._class = value)  _
						= false) Then
				Me.OnclassChanging(value)
				Me.SendPropertyChanging
				Me._class = value
				Me.SendPropertyChanged("[class]")
				Me.OnclassChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_button", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property button() As Integer
		Get
			Return Me._button
		End Get
		Set
			If ((Me._button = value)  _
						= false) Then
				Me.OnbuttonChanging(value)
				Me.SendPropertyChanging
				Me._button = value
				Me.SendPropertyChanged("button")
				Me.OnbuttonChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_action", DbType:="Int")>  _
	Public Property action() As System.Nullable(Of Integer)
		Get
			Return Me._action
		End Get
		Set
			If (Me._action.Equals(value) = false) Then
				Me.OnactionChanging(value)
				Me.SendPropertyChanging
				Me._action = value
				Me.SendPropertyChanged("action")
				Me.OnactionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_type", DbType:="Int")>  _
	Public Property type() As System.Nullable(Of Integer)
		Get
			Return Me._type
		End Get
		Set
			If (Me._type.Equals(value) = false) Then
				Me.OntypeChanging(value)
				Me.SendPropertyChanging
				Me._type = value
				Me.SendPropertyChanged("type")
				Me.OntypeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_misc", DbType:="Int")>  _
	Public Property misc() As System.Nullable(Of Integer)
		Get
			Return Me._misc
		End Get
		Set
			If (Me._misc.Equals(value) = false) Then
				Me.OnmiscChanging(value)
				Me.SendPropertyChanging
				Me._misc = value
				Me.SendPropertyChanged("misc")
				Me.OnmiscChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.playercreateinfo_spells")>  _
Partial Public Class playercreateinfo_spell
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _race As Short
	
	Private _class As Short
	
	Private _spellid As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnraceChanging(value As Short)
    End Sub
    Partial Private Sub OnraceChanged()
    End Sub
    Partial Private Sub OnclassChanging(value As Short)
    End Sub
    Partial Private Sub OnclassChanged()
    End Sub
    Partial Private Sub OnspellidChanging(value As Integer)
    End Sub
    Partial Private Sub OnspellidChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_race", DbType:="SmallInt NOT NULL", IsPrimaryKey:=true)>  _
	Public Property race() As Short
		Get
			Return Me._race
		End Get
		Set
			If ((Me._race = value)  _
						= false) Then
				Me.OnraceChanging(value)
				Me.SendPropertyChanging
				Me._race = value
				Me.SendPropertyChanged("race")
				Me.OnraceChanged
			End If
		End Set
	End Property
	
	<Column(Name:="class", Storage:="_class", DbType:="SmallInt NOT NULL", IsPrimaryKey:=true)>  _
	Public Property [class]() As Short
		Get
			Return Me._class
		End Get
		Set
			If ((Me._class = value)  _
						= false) Then
				Me.OnclassChanging(value)
				Me.SendPropertyChanging
				Me._class = value
				Me.SendPropertyChanged("[class]")
				Me.OnclassChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_spellid", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property spellid() As Integer
		Get
			Return Me._spellid
		End Get
		Set
			If ((Me._spellid = value)  _
						= false) Then
				Me.OnspellidChanging(value)
				Me.SendPropertyChanging
				Me._spellid = value
				Me.SendPropertyChanged("spellid")
				Me.OnspellidChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.loots_gameobject")>  _
Partial Public Class loots_gameobject
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _loot_id As Integer
	
	Private _loot_object As Integer
	
	Private _loot_item As Integer
	
	Private _loot_chance As Single
	
	Private _loot_heroicchance As Single
	
	Private _loot_min As Integer
	
	Private _loot_max As Short
	
	Private _loot_ffa As Short
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onloot_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onloot_idChanged()
    End Sub
    Partial Private Sub Onloot_objectChanging(value As Integer)
    End Sub
    Partial Private Sub Onloot_objectChanged()
    End Sub
    Partial Private Sub Onloot_itemChanging(value As Integer)
    End Sub
    Partial Private Sub Onloot_itemChanged()
    End Sub
    Partial Private Sub Onloot_chanceChanging(value As Single)
    End Sub
    Partial Private Sub Onloot_chanceChanged()
    End Sub
    Partial Private Sub Onloot_heroicchanceChanging(value As Single)
    End Sub
    Partial Private Sub Onloot_heroicchanceChanged()
    End Sub
    Partial Private Sub Onloot_minChanging(value As Integer)
    End Sub
    Partial Private Sub Onloot_minChanged()
    End Sub
    Partial Private Sub Onloot_maxChanging(value As Short)
    End Sub
    Partial Private Sub Onloot_maxChanged()
    End Sub
    Partial Private Sub Onloot_ffaChanging(value As Short)
    End Sub
    Partial Private Sub Onloot_ffaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_loot_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property loot_id() As Integer
		Get
			Return Me._loot_id
		End Get
		Set
			If ((Me._loot_id = value)  _
						= false) Then
				Me.Onloot_idChanging(value)
				Me.SendPropertyChanging
				Me._loot_id = value
				Me.SendPropertyChanged("loot_id")
				Me.Onloot_idChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_loot_object", DbType:="Int NOT NULL")>  _
	Public Property loot_object() As Integer
		Get
			Return Me._loot_object
		End Get
		Set
			If ((Me._loot_object = value)  _
						= false) Then
				Me.Onloot_objectChanging(value)
				Me.SendPropertyChanging
				Me._loot_object = value
				Me.SendPropertyChanged("loot_object")
				Me.Onloot_objectChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_loot_item", DbType:="Int NOT NULL")>  _
	Public Property loot_item() As Integer
		Get
			Return Me._loot_item
		End Get
		Set
			If ((Me._loot_item = value)  _
						= false) Then
				Me.Onloot_itemChanging(value)
				Me.SendPropertyChanging
				Me._loot_item = value
				Me.SendPropertyChanged("loot_item")
				Me.Onloot_itemChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_loot_chance", DbType:="Real NOT NULL")>  _
	Public Property loot_chance() As Single
		Get
			Return Me._loot_chance
		End Get
		Set
			If ((Me._loot_chance = value)  _
						= false) Then
				Me.Onloot_chanceChanging(value)
				Me.SendPropertyChanging
				Me._loot_chance = value
				Me.SendPropertyChanged("loot_chance")
				Me.Onloot_chanceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_loot_heroicchance", DbType:="Real NOT NULL")>  _
	Public Property loot_heroicchance() As Single
		Get
			Return Me._loot_heroicchance
		End Get
		Set
			If ((Me._loot_heroicchance = value)  _
						= false) Then
				Me.Onloot_heroicchanceChanging(value)
				Me.SendPropertyChanging
				Me._loot_heroicchance = value
				Me.SendPropertyChanged("loot_heroicchance")
				Me.Onloot_heroicchanceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_loot_min", DbType:="Int NOT NULL")>  _
	Public Property loot_min() As Integer
		Get
			Return Me._loot_min
		End Get
		Set
			If ((Me._loot_min = value)  _
						= false) Then
				Me.Onloot_minChanging(value)
				Me.SendPropertyChanging
				Me._loot_min = value
				Me.SendPropertyChanged("loot_min")
				Me.Onloot_minChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_loot_max", DbType:="SmallInt NOT NULL")>  _
	Public Property loot_max() As Short
		Get
			Return Me._loot_max
		End Get
		Set
			If ((Me._loot_max = value)  _
						= false) Then
				Me.Onloot_maxChanging(value)
				Me.SendPropertyChanging
				Me._loot_max = value
				Me.SendPropertyChanged("loot_max")
				Me.Onloot_maxChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_loot_ffa", DbType:="SmallInt NOT NULL")>  _
	Public Property loot_ffa() As Short
		Get
			Return Me._loot_ffa
		End Get
		Set
			If ((Me._loot_ffa = value)  _
						= false) Then
				Me.Onloot_ffaChanging(value)
				Me.SendPropertyChanging
				Me._loot_ffa = value
				Me.SendPropertyChanged("loot_ffa")
				Me.Onloot_ffaChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.loots")>  _
Partial Public Class loot
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _loot_id As Integer
	
	Private _loot_creature As Integer
	
	Private _loot_item As Integer
	
	Private _loot_chance As Single
	
	Private _loot_heroicchance As Single
	
	Private _loot_min As Integer
	
	Private _loot_max As Short
	
	Private _loot_ffa As Short
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onloot_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onloot_idChanged()
    End Sub
    Partial Private Sub Onloot_creatureChanging(value As Integer)
    End Sub
    Partial Private Sub Onloot_creatureChanged()
    End Sub
    Partial Private Sub Onloot_itemChanging(value As Integer)
    End Sub
    Partial Private Sub Onloot_itemChanged()
    End Sub
    Partial Private Sub Onloot_chanceChanging(value As Single)
    End Sub
    Partial Private Sub Onloot_chanceChanged()
    End Sub
    Partial Private Sub Onloot_heroicchanceChanging(value As Single)
    End Sub
    Partial Private Sub Onloot_heroicchanceChanged()
    End Sub
    Partial Private Sub Onloot_minChanging(value As Integer)
    End Sub
    Partial Private Sub Onloot_minChanged()
    End Sub
    Partial Private Sub Onloot_maxChanging(value As Short)
    End Sub
    Partial Private Sub Onloot_maxChanged()
    End Sub
    Partial Private Sub Onloot_ffaChanging(value As Short)
    End Sub
    Partial Private Sub Onloot_ffaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_loot_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property loot_id() As Integer
		Get
			Return Me._loot_id
		End Get
		Set
			If ((Me._loot_id = value)  _
						= false) Then
				Me.Onloot_idChanging(value)
				Me.SendPropertyChanging
				Me._loot_id = value
				Me.SendPropertyChanged("loot_id")
				Me.Onloot_idChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_loot_creature", DbType:="Int NOT NULL")>  _
	Public Property loot_creature() As Integer
		Get
			Return Me._loot_creature
		End Get
		Set
			If ((Me._loot_creature = value)  _
						= false) Then
				Me.Onloot_creatureChanging(value)
				Me.SendPropertyChanging
				Me._loot_creature = value
				Me.SendPropertyChanged("loot_creature")
				Me.Onloot_creatureChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_loot_item", DbType:="Int NOT NULL")>  _
	Public Property loot_item() As Integer
		Get
			Return Me._loot_item
		End Get
		Set
			If ((Me._loot_item = value)  _
						= false) Then
				Me.Onloot_itemChanging(value)
				Me.SendPropertyChanging
				Me._loot_item = value
				Me.SendPropertyChanged("loot_item")
				Me.Onloot_itemChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_loot_chance", DbType:="Real NOT NULL")>  _
	Public Property loot_chance() As Single
		Get
			Return Me._loot_chance
		End Get
		Set
			If ((Me._loot_chance = value)  _
						= false) Then
				Me.Onloot_chanceChanging(value)
				Me.SendPropertyChanging
				Me._loot_chance = value
				Me.SendPropertyChanged("loot_chance")
				Me.Onloot_chanceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_loot_heroicchance", DbType:="Real NOT NULL")>  _
	Public Property loot_heroicchance() As Single
		Get
			Return Me._loot_heroicchance
		End Get
		Set
			If ((Me._loot_heroicchance = value)  _
						= false) Then
				Me.Onloot_heroicchanceChanging(value)
				Me.SendPropertyChanging
				Me._loot_heroicchance = value
				Me.SendPropertyChanged("loot_heroicchance")
				Me.Onloot_heroicchanceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_loot_min", DbType:="Int NOT NULL")>  _
	Public Property loot_min() As Integer
		Get
			Return Me._loot_min
		End Get
		Set
			If ((Me._loot_min = value)  _
						= false) Then
				Me.Onloot_minChanging(value)
				Me.SendPropertyChanging
				Me._loot_min = value
				Me.SendPropertyChanged("loot_min")
				Me.Onloot_minChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_loot_max", DbType:="SmallInt NOT NULL")>  _
	Public Property loot_max() As Short
		Get
			Return Me._loot_max
		End Get
		Set
			If ((Me._loot_max = value)  _
						= false) Then
				Me.Onloot_maxChanging(value)
				Me.SendPropertyChanging
				Me._loot_max = value
				Me.SendPropertyChanged("loot_max")
				Me.Onloot_maxChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_loot_ffa", DbType:="SmallInt NOT NULL")>  _
	Public Property loot_ffa() As Short
		Get
			Return Me._loot_ffa
		End Get
		Set
			If ((Me._loot_ffa = value)  _
						= false) Then
				Me.Onloot_ffaChanging(value)
				Me.SendPropertyChanging
				Me._loot_ffa = value
				Me.SendPropertyChanged("loot_ffa")
				Me.Onloot_ffaChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.creature_movement")>  _
Partial Public Class creature_movement
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _spawnid As Integer
	
	Private _waypointid As Short
	
	Private _position_x As Single
	
	Private _position_y As Single
	
	Private _position_z As Single
	
	Private _waittime As Integer
	
	Private _flags As Short
	
	Private _emote As Short
	
	Private _orientation As Single
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnspawnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnspawnidChanged()
    End Sub
    Partial Private Sub OnwaypointidChanging(value As Short)
    End Sub
    Partial Private Sub OnwaypointidChanged()
    End Sub
    Partial Private Sub Onposition_xChanging(value As Single)
    End Sub
    Partial Private Sub Onposition_xChanged()
    End Sub
    Partial Private Sub Onposition_yChanging(value As Single)
    End Sub
    Partial Private Sub Onposition_yChanged()
    End Sub
    Partial Private Sub Onposition_zChanging(value As Single)
    End Sub
    Partial Private Sub Onposition_zChanged()
    End Sub
    Partial Private Sub OnwaittimeChanging(value As Integer)
    End Sub
    Partial Private Sub OnwaittimeChanged()
    End Sub
    Partial Private Sub OnflagsChanging(value As Short)
    End Sub
    Partial Private Sub OnflagsChanged()
    End Sub
    Partial Private Sub OnemoteChanging(value As Short)
    End Sub
    Partial Private Sub OnemoteChanged()
    End Sub
    Partial Private Sub OnorientationChanging(value As Single)
    End Sub
    Partial Private Sub OnorientationChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_spawnid", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property spawnid() As Integer
		Get
			Return Me._spawnid
		End Get
		Set
			If ((Me._spawnid = value)  _
						= false) Then
				Me.OnspawnidChanging(value)
				Me.SendPropertyChanging
				Me._spawnid = value
				Me.SendPropertyChanged("spawnid")
				Me.OnspawnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_waypointid", DbType:="SmallInt NOT NULL", IsPrimaryKey:=true)>  _
	Public Property waypointid() As Short
		Get
			Return Me._waypointid
		End Get
		Set
			If ((Me._waypointid = value)  _
						= false) Then
				Me.OnwaypointidChanging(value)
				Me.SendPropertyChanging
				Me._waypointid = value
				Me.SendPropertyChanged("waypointid")
				Me.OnwaypointidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_position_x", DbType:="Real NOT NULL")>  _
	Public Property position_x() As Single
		Get
			Return Me._position_x
		End Get
		Set
			If ((Me._position_x = value)  _
						= false) Then
				Me.Onposition_xChanging(value)
				Me.SendPropertyChanging
				Me._position_x = value
				Me.SendPropertyChanged("position_x")
				Me.Onposition_xChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_position_y", DbType:="Real NOT NULL")>  _
	Public Property position_y() As Single
		Get
			Return Me._position_y
		End Get
		Set
			If ((Me._position_y = value)  _
						= false) Then
				Me.Onposition_yChanging(value)
				Me.SendPropertyChanging
				Me._position_y = value
				Me.SendPropertyChanged("position_y")
				Me.Onposition_yChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_position_z", DbType:="Real NOT NULL")>  _
	Public Property position_z() As Single
		Get
			Return Me._position_z
		End Get
		Set
			If ((Me._position_z = value)  _
						= false) Then
				Me.Onposition_zChanging(value)
				Me.SendPropertyChanging
				Me._position_z = value
				Me.SendPropertyChanged("position_z")
				Me.Onposition_zChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_waittime", DbType:="Int NOT NULL")>  _
	Public Property waittime() As Integer
		Get
			Return Me._waittime
		End Get
		Set
			If ((Me._waittime = value)  _
						= false) Then
				Me.OnwaittimeChanging(value)
				Me.SendPropertyChanging
				Me._waittime = value
				Me.SendPropertyChanged("waittime")
				Me.OnwaittimeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_flags", DbType:="SmallInt NOT NULL")>  _
	Public Property flags() As Short
		Get
			Return Me._flags
		End Get
		Set
			If ((Me._flags = value)  _
						= false) Then
				Me.OnflagsChanging(value)
				Me.SendPropertyChanging
				Me._flags = value
				Me.SendPropertyChanged("flags")
				Me.OnflagsChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_emote", DbType:="SmallInt NOT NULL")>  _
	Public Property emote() As Short
		Get
			Return Me._emote
		End Get
		Set
			If ((Me._emote = value)  _
						= false) Then
				Me.OnemoteChanging(value)
				Me.SendPropertyChanging
				Me._emote = value
				Me.SendPropertyChanged("emote")
				Me.OnemoteChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_orientation", DbType:="Real NOT NULL")>  _
	Public Property orientation() As Single
		Get
			Return Me._orientation
		End Get
		Set
			If ((Me._orientation = value)  _
						= false) Then
				Me.OnorientationChanging(value)
				Me.SendPropertyChanging
				Me._orientation = value
				Me.SendPropertyChanged("orientation")
				Me.OnorientationChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
End Namespace
